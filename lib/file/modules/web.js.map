{"version":3,"sources":["file/modules/web.js"],"names":["PubNubFile","config","File","data","name","mimeType","type","contents","undefined","Error","Promise","resolve","reject","reader","FileReader","addEventListener","result","ArrayBuffer","error","readAsArrayBuffer","readAsBinaryString","Blob"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { IFile, FileClass } from '../';\n\ntype PubNubFileWebConstructor =\n  | File\n  | {|\n      data: string,\n      name: string,\n      mimeType: string,\n    |}\n  | {|\n      data: ArrayBuffer,\n      name: string,\n      mimeType: string,\n    |};\n\nconst PubNubFile: FileClass = class PubNubFile implements IFile {\n  static supportsFile = typeof File !== 'undefined';\n  static supportsBlob = typeof Blob !== 'undefined';\n  static supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';\n  static supportsBuffer = false;\n  static supportsStream = false;\n  static supportsString = true;\n  static supportsEncryptFile = true;\n  static supportsFileUri = false;\n\n  static create(config: PubNubFileWebConstructor) {\n    return new this(config);\n  }\n\n  data: any;\n  name: string;\n  mimeType: string;\n\n  constructor(config: PubNubFileWebConstructor) {\n    if (config instanceof File) {\n      this.data = config;\n\n      this.name = this.data.name;\n      this.mimeType = this.data.type;\n    } else if (config.data) {\n      let contents = config.data;\n\n      this.data = new File([contents], config.name, { type: config.mimeType });\n\n      this.name = config.name;\n\n      if (config.mimeType) {\n        this.mimeType = config.mimeType;\n      }\n    }\n\n    if (this.data === undefined) {\n      throw new Error(\"Couldn't construct a file out of supplied options.\");\n    }\n\n    if (this.name === undefined) {\n      throw new Error(\"Couldn't guess filename out of the options. Please provide one.\");\n    }\n  }\n\n  async toBuffer() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toStream() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toFileUri() {\n    throw new Error('This feature is only supported in react native environments.');\n  }\n\n  async toBlob() {\n    return this.data;\n  }\n\n  async toArrayBuffer() {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.addEventListener('load', () => {\n        if (reader.result instanceof ArrayBuffer) {\n          return resolve(reader.result);\n        }\n      });\n\n      reader.addEventListener('error', () => {\n        reject(reader.error);\n      });\n\n      reader.readAsArrayBuffer(this.data);\n    });\n  }\n\n  async toString() {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.addEventListener('load', () => {\n        if (typeof reader.result === 'string') {\n          return resolve(reader.result);\n        }\n      });\n\n      reader.addEventListener('error', () => {\n        reject(reader.error);\n      });\n\n      reader.readAsBinaryString(this.data);\n    });\n  }\n\n  async toFile() {\n    return this.data;\n  }\n};\n\nexport default PubNubFile;\n"],"file":"web.js"}