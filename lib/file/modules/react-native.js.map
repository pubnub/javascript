{"version":3,"sources":["file/modules/react-native.js"],"names":["PubNubFile","config","File","data","name","mimeType","type","uri","Error","undefined","blob","Promise","resolve","reject","reader","FileReader","addEventListener","result","ArrayBuffer","error","readAsArrayBuffer","arrayBuffer","JSON","stringify","readAsBinaryString","text","Blob"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { IFile, FileClass } from '../';\n\ntype PubNubFileReactNativeConstructor =\n| File\n| {|\n    data: string,\n    name: string,\n    mimeType: string,\n  |}\n| {|\n    data: ArrayBuffer,\n    name: string,\n    mimeType: string,\n  |}\n| {|\n    uri: string,\n    name: string,\n    mimeType: string,\n  |};\n\nconst PubNubFile: FileClass = class PubNubFile implements IFile {\n  static supportsFile = typeof File !== 'undefined';\n  static supportsBlob = typeof Blob !== 'undefined';\n  static supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';\n  static supportsBuffer = false;\n  static supportsStream = false;\n  static supportsString = true;\n  static supportsEncryptFile = false;\n  static supportsFileUri = true;\n\n  static create(config: PubNubFileReactNativeConstructor) {\n    return new this(config);\n  }\n\n  data: any;\n  name: string;\n  mimeType: string;\n\n  constructor(config: PubNubFileReactNativeConstructor) {\n    if (config instanceof File) {\n      this.data = config;\n\n      this.name = this.data.name;\n      this.mimeType = this.data.type;\n    } else if (config.uri) {\n      // uri upload for react native\n      this.data = {\n        uri: config.uri,\n        name: config.name,\n        type: config.mimeType\n      };\n\n      this.name = config.name;\n\n      if (config.mimeType) {\n        this.mimeType = config.mimeType;\n      }\n    } else if (config.data) {\n      this.data = config.data;\n      this.name = config.name;\n\n      if (config.mimeType) {\n        this.mimeType = config.mimeType;\n      }\n    } else {\n      throw new Error(\"Couldn't construct a file out of supplied options. URI or file data required.\");\n    }\n\n    if (this.data === undefined) {\n      throw new Error(\"Couldn't construct a file out of supplied options.\");\n    }\n\n    if (this.name === undefined) {\n      throw new Error(\"Couldn't guess filename out of the options. Please provide one.\");\n    }\n  }\n\n  async toBuffer() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toStream() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toBlob() {\n    if (this.data && this.data.uri) {\n      throw new Error('This file contains a file URI and does not contain the file contents.');\n    } else if (this.data instanceof File) {\n      return this.data;\n    } else {\n      // data must be a fetch response\n      return this.data.blob();\n    }\n  }\n\n  async toArrayBuffer() {\n    if (this.data && this.data.uri) {\n      throw new Error('This file contains a file URI and does not contain the file contents.');\n    } else if (this.data instanceof File) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('load', () => {\n          if (reader.result instanceof ArrayBuffer) {\n            return resolve(reader.result);\n          }\n        });\n\n        reader.addEventListener('error', () => {\n          reject(reader.error);\n        });\n\n        reader.readAsArrayBuffer(this.data);\n      });\n    } else {\n      // data must be a fetch response\n      let result;\n\n      try {\n        result = await this.data.arrayBuffer();\n      } catch (e) {\n        throw new Error(`Unable to support toArrayBuffer in ReactNative environment: ${e}`);\n      }\n\n      return result;\n    }\n  }\n\n  async toString() {\n    if (this.data && this.data.uri) {\n      return JSON.stringify(this.data);\n    } else if (this.data instanceof File) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('load', () => {\n          if (typeof reader.result === 'string') {\n            return resolve(reader.result);\n          }\n        });\n\n        reader.addEventListener('error', () => {\n          reject(reader.error);\n        });\n\n        reader.readAsBinaryString(this.data);\n      });\n    } else {\n      // data must be a fetch response\n      return this.data.text();\n    }\n  }\n\n  async toFile() {\n    if (this.data.uri) {\n      throw new Error('This file contains a file URI and does not contain the file contents.');\n    } else if (this.data instanceof File) {\n      return this.data;\n    } else {\n      // data must be a fetch response\n      return this.data.blob();\n    }\n  }\n\n  async toFileUri() {\n    if (this.data && this.data.uri) {\n      return this.data;\n    } else {\n      throw new Error('This file does not contain a file URI');\n    }\n  }\n};\n\nexport default PubNubFile;\n"],"file":"react-native.js"}