{"version":3,"sources":["file/modules/node.js"],"names":["PubNubFile","stream","data","encoding","name","mimeType","Readable","ReadStream","path","Buffer","from","undefined","Error","Promise","resolve","reject","chunks","on","chunk","push","once","concat","toBuffer","buffer","toString","input","read","PassThrough","pipe","config"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { Readable, PassThrough } from 'stream';\nimport { ReadStream } from 'fs';\nimport { basename } from 'path';\n\nimport { IFile, FileClass } from '../';\n\ntype PubNubFileNodeConstructor = {|\n  stream?: Readable,\n  data?: string | Buffer,\n  encoding?: string,\n  name?: string,\n  mimeType?: string,\n|};\n\ntype PubNubFileNodeSupportedInputType = Readable | Buffer | string;\n\nconst PubNubFile: FileClass = class PubNubFile implements IFile {\n  static supportsBlob = false;\n  static supportsFile = false;\n  static supportsBuffer = typeof Buffer !== 'undefined';\n  static supportsStream = true;\n  static supportsString = true;\n  static supportsArrayBuffer = false;\n  static supportsEncryptFile = true;\n  static supportsFileUri = false;\n\n  data: PubNubFileNodeSupportedInputType;\n\n  name: string;\n  mimeType: string;\n\n  static create(config: PubNubFileNodeConstructor) {\n    return new this(config);\n  }\n\n  constructor({ stream, data, encoding, name, mimeType }: PubNubFileNodeConstructor) {\n    if (stream instanceof Readable) {\n      this.data = stream;\n\n      if (stream instanceof ReadStream) {\n        // $FlowFixMe: incomplete flow node definitions\n        this.name = basename(stream.path);\n      }\n    } else if (data instanceof Buffer) {\n      this.data = Buffer.from(data);\n    } else if (typeof data === 'string') {\n      // $FlowFixMe: incomplete flow node definitions\n      this.data = Buffer.from(data, encoding ?? 'utf8');\n    }\n\n    if (name) {\n      this.name = basename(name);\n    }\n\n    if (mimeType) {\n      this.mimeType = mimeType;\n    }\n\n    if (this.data === undefined) {\n      throw new Error(\"Couldn't construct a file out of supplied options.\");\n    }\n\n    if (this.name === undefined) {\n      throw new Error(\"Couldn't guess filename out of the options. Please provide one.\");\n    }\n  }\n\n  toBuffer(): Promise<Buffer> {\n    if (this.data instanceof Buffer) {\n      return Promise.resolve(Buffer.from(this.data));\n    }\n\n    if (this.data instanceof Readable) {\n      const stream = this.data;\n      return new Promise((resolve, reject) => {\n        const chunks = [];\n\n        stream.on('data', (chunk) => chunks.push(chunk));\n        stream.once('error', reject);\n        stream.once('end', () => {\n          resolve(Buffer.concat(chunks));\n        });\n      });\n    }\n\n    if (typeof this.data === 'string') {\n      return Promise.resolve(Buffer.from(this.data));\n    }\n\n    throw new Error(\"Can't cast to 'buffer'.\");\n  }\n\n  async toArrayBuffer() {\n    throw new Error('This feature is only supported in browser environments.');\n  }\n\n  async toString(encoding: buffer$NonBufferEncoding = 'utf8') {\n    const buffer = await this.toBuffer();\n\n    return buffer.toString(encoding);\n  }\n\n  async toStream() {\n    if (!(this.data instanceof Readable)) {\n      const input = this.data;\n\n      return new Readable({\n        read() {\n          this.push(Buffer.from(input));\n          this.push(null);\n        },\n      });\n    }\n\n    const stream = new PassThrough();\n\n    if (this.data instanceof Readable) {\n      this.data.pipe(stream);\n    }\n\n    return stream;\n  }\n\n  async toFile() {\n    throw new Error('This feature is only supported in browser environments.');\n  }\n\n  async toFileUri() {\n    throw new Error('This feature is only supported in react native environments.');\n  }\n\n  async toBlob() {\n    throw new Error('This feature is only supported in browser environments.');\n  }\n};\n\nexport default PubNubFile;\n"],"file":"node.js"}