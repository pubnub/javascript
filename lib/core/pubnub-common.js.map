{"version":3,"sources":["core/pubnub-common.js"],"names":["addChannelsChannelGroupConfig","removeChannelsChannelGroupConfig","deleteChannelGroupConfig","listChannelGroupsConfig","listChannelsInChannelGroupConfig","addPushChannelsConfig","removePushChannelsConfig","listPushChannelsConfig","removeDevicePushConfig","presenceLeaveEndpointConfig","presenceWhereNowEndpointConfig","presenceHeartbeatEndpointConfig","presenceGetStateConfig","presenceSetStateConfig","presenceHereNowConfig","auditEndpointConfig","grantEndpointConfig","publishEndpointConfig","historyEndpointConfig","deleteMessagesEndpointConfig","messageCountsEndpointConfig","fetchMessagesEndpointConfig","timeEndpointConfig","subscribeEndpointConfig","setup","db","networking","config","_config","Config","crypto","Crypto","init","modules","timeEndpoint","endpointCreator","bind","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","subscribeEndpoint","listenerManager","_listenerManager","ListenerManager","subscriptionManager","SubscriptionManager","addListener","removeListener","removeAllListeners","channelGroups","listGroups","listChannels","addChannels","removeChannels","deleteGroup","push","deleteDevice","hereNow","whereNow","getState","setState","adaptStateChange","grant","audit","publish","fire","args","callback","replicate","storeInHistory","history","deleteMessages","messageCounts","fetchMessages","time","subscribe","adaptSubscribeChange","presence","adaptPresenceChange","unsubscribe","adaptUnsubscribeChange","disconnect","reconnect","destroy","isOffline","unsubscribeAll","stop","getSubscribedChannels","getSubscribedChannelGroups","encrypt","decrypt","getAuthKey","setAuthKey","setCipherKey","getUUID","setUUID","getFilterExpression","setFilterExpression","setHeartbeatInterval","hasModule","setProxy","proxy","getVersion","announceNetworkDown","restore","announceNetworkUp","uuidGenerator","createUUID","OPERATIONS","CATEGORIES"],"mappings":"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","file":"pubnub-common.js","sourcesContent":["/* @flow */\r\n\r\nimport Config from './components/config';\r\nimport Crypto from './components/cryptography/index';\r\nimport SubscriptionManager from './components/subscription_manager';\r\nimport ListenerManager from './components/listener_manager';\r\n\r\nimport endpointCreator from './components/endpoint';\r\n\r\nimport * as addChannelsChannelGroupConfig from './endpoints/channel_groups/add_channels';\r\nimport * as removeChannelsChannelGroupConfig from './endpoints/channel_groups/remove_channels';\r\nimport * as deleteChannelGroupConfig from './endpoints/channel_groups/delete_group';\r\nimport * as listChannelGroupsConfig from './endpoints/channel_groups/list_groups';\r\nimport * as listChannelsInChannelGroupConfig from './endpoints/channel_groups/list_channels';\r\n\r\nimport * as addPushChannelsConfig from './endpoints/push/add_push_channels';\r\nimport * as removePushChannelsConfig from './endpoints/push/remove_push_channels';\r\nimport * as listPushChannelsConfig from './endpoints/push/list_push_channels';\r\nimport * as removeDevicePushConfig from './endpoints/push/remove_device';\r\n\r\nimport * as presenceLeaveEndpointConfig from './endpoints/presence/leave';\r\nimport * as presenceWhereNowEndpointConfig from './endpoints/presence/where_now';\r\nimport * as presenceHeartbeatEndpointConfig from './endpoints/presence/heartbeat';\r\nimport * as presenceGetStateConfig from './endpoints/presence/get_state';\r\nimport * as presenceSetStateConfig from './endpoints/presence/set_state';\r\nimport * as presenceHereNowConfig from './endpoints/presence/here_now';\r\n\r\nimport * as auditEndpointConfig from './endpoints/access_manager/audit';\r\nimport * as grantEndpointConfig from './endpoints/access_manager/grant';\r\n\r\nimport * as publishEndpointConfig from './endpoints/publish';\r\nimport * as historyEndpointConfig from './endpoints/history/get_history';\r\nimport * as deleteMessagesEndpointConfig from './endpoints/history/delete_messages';\r\nimport * as messageCountsEndpointConfig from './endpoints/history/message_counts';\r\nimport * as fetchMessagesEndpointConfig from './endpoints/fetch_messages';\r\nimport * as timeEndpointConfig from './endpoints/time';\r\nimport * as subscribeEndpointConfig from './endpoints/subscribe';\r\n\r\nimport OPERATIONS from './constants/operations';\r\nimport CATEGORIES from './constants/categories';\r\n\r\nimport { InternalSetupStruct } from './flow_interfaces';\r\nimport uuidGenerator from './components/uuid';\r\n\r\nexport default class {\r\n\r\n  _config: Config;\r\n  _listenerManager: ListenerManager;\r\n\r\n  // tell flow about the mounted endpoint\r\n  time: Function;\r\n  publish: Function;\r\n  fire: Function;\r\n\r\n  history: Function;\r\n  deleteMessages: Function;\r\n  messageCounts: Function;\r\n  fetchMessages: Function;\r\n\r\n  //\r\n  channelGroups: Object;\r\n  //\r\n  push: Object;\r\n  //\r\n  hereNow: Function;\r\n  whereNow: Function;\r\n  getState: Function;\r\n  setState: Function;\r\n  //\r\n  grant: Function;\r\n  audit: Function;\r\n  //\r\n  subscribe: Function;\r\n  presence: Function;\r\n  unsubscribe: Function;\r\n  unsubscribeAll: Function;\r\n\r\n  disconnect: Function;\r\n  reconnect: Function;\r\n\r\n\r\n  destroy: Function;\r\n  stop: Function;\r\n\r\n  getSubscribedChannels: Function;\r\n  getSubscribedChannelGroups: Function;\r\n\r\n  addListener: Function;\r\n  removeListener: Function;\r\n  removeAllListeners: Function;\r\n\r\n  getAuthKey: Function;\r\n  setAuthKey: Function;\r\n\r\n  setCipherKey: Function;\r\n  setUUID: Function;\r\n  getUUID: Function;\r\n\r\n  getFilterExpression: Function;\r\n  setFilterExpression: Function;\r\n\r\n  setHeartbeatInterval: Function;\r\n\r\n  setProxy: Function;\r\n\r\n  encrypt: Function;\r\n  decrypt: Function;\r\n\r\n  //\r\n\r\n  constructor(setup: InternalSetupStruct) {\r\n    let { db, networking } = setup;\r\n\r\n    const config = this._config = new Config({ setup, db });\r\n    const crypto = new Crypto({ config });\r\n\r\n    networking.init(config);\r\n\r\n    let modules = { config, networking, crypto };\r\n\r\n    const timeEndpoint = endpointCreator.bind(this, modules, timeEndpointConfig);\r\n    const leaveEndpoint = endpointCreator.bind(this, modules, presenceLeaveEndpointConfig);\r\n    const heartbeatEndpoint = endpointCreator.bind(this, modules, presenceHeartbeatEndpointConfig);\r\n    const setStateEndpoint = endpointCreator.bind(this, modules, presenceSetStateConfig);\r\n    const subscribeEndpoint = endpointCreator.bind(this, modules, subscribeEndpointConfig);\r\n\r\n    // managers\r\n    const listenerManager = this._listenerManager = new ListenerManager();\r\n\r\n    const subscriptionManager = new SubscriptionManager({\r\n      timeEndpoint,\r\n      leaveEndpoint,\r\n      heartbeatEndpoint,\r\n      setStateEndpoint,\r\n      subscribeEndpoint,\r\n      crypto: modules.crypto,\r\n      config: modules.config,\r\n      listenerManager\r\n    });\r\n\r\n    this.addListener = listenerManager.addListener.bind(listenerManager);\r\n    this.removeListener = listenerManager.removeListener.bind(listenerManager);\r\n    this.removeAllListeners = listenerManager.removeAllListeners.bind(listenerManager);\r\n\r\n    /* channel groups */\r\n    this.channelGroups = {\r\n      listGroups: endpointCreator.bind(this, modules, listChannelGroupsConfig),\r\n      listChannels: endpointCreator.bind(this, modules, listChannelsInChannelGroupConfig),\r\n      addChannels: endpointCreator.bind(this, modules, addChannelsChannelGroupConfig),\r\n      removeChannels: endpointCreator.bind(this, modules, removeChannelsChannelGroupConfig),\r\n      deleteGroup: endpointCreator.bind(this, modules, deleteChannelGroupConfig)\r\n    };\r\n    /* push */\r\n    this.push = {\r\n      addChannels: endpointCreator.bind(this, modules, addPushChannelsConfig),\r\n      removeChannels: endpointCreator.bind(this, modules, removePushChannelsConfig),\r\n      deleteDevice: endpointCreator.bind(this, modules, removeDevicePushConfig),\r\n      listChannels: endpointCreator.bind(this, modules, listPushChannelsConfig)\r\n    };\r\n    /* presence */\r\n    this.hereNow = endpointCreator.bind(this, modules, presenceHereNowConfig);\r\n    this.whereNow = endpointCreator.bind(this, modules, presenceWhereNowEndpointConfig);\r\n    this.getState = endpointCreator.bind(this, modules, presenceGetStateConfig);\r\n    this.setState = subscriptionManager.adaptStateChange.bind(subscriptionManager);\r\n    /* PAM */\r\n    this.grant = endpointCreator.bind(this, modules, grantEndpointConfig);\r\n    this.audit = endpointCreator.bind(this, modules, auditEndpointConfig);\r\n    //\r\n    this.publish = endpointCreator.bind(this, modules, publishEndpointConfig);\r\n\r\n    this.fire = (args, callback) => {\r\n      args.replicate = false;\r\n      args.storeInHistory = false;\r\n      return this.publish(args, callback);\r\n    };\r\n\r\n    this.history = endpointCreator.bind(this, modules, historyEndpointConfig);\r\n    this.deleteMessages = endpointCreator.bind(this, modules, deleteMessagesEndpointConfig);\r\n    this.messageCounts = endpointCreator.bind(this, modules, messageCountsEndpointConfig);\r\n    this.fetchMessages = endpointCreator.bind(this, modules, fetchMessagesEndpointConfig);\r\n\r\n    this.time = timeEndpoint;\r\n\r\n    // subscription related methods\r\n    this.subscribe = subscriptionManager.adaptSubscribeChange.bind(subscriptionManager);\r\n    this.presence = subscriptionManager.adaptPresenceChange.bind(subscriptionManager);\r\n    this.unsubscribe = subscriptionManager.adaptUnsubscribeChange.bind(subscriptionManager);\r\n    this.disconnect = subscriptionManager.disconnect.bind(subscriptionManager);\r\n    this.reconnect = subscriptionManager.reconnect.bind(subscriptionManager);\r\n\r\n    this.destroy = (isOffline: boolean) => {\r\n      subscriptionManager.unsubscribeAll(isOffline);\r\n      subscriptionManager.disconnect();\r\n    };\r\n\r\n    // --- deprecated  ------------------\r\n    this.stop = this.destroy; // --------\r\n    // --- deprecated  ------------------\r\n\r\n    this.unsubscribeAll = subscriptionManager.unsubscribeAll.bind(subscriptionManager);\r\n\r\n    this.getSubscribedChannels = subscriptionManager.getSubscribedChannels.bind(subscriptionManager);\r\n    this.getSubscribedChannelGroups = subscriptionManager.getSubscribedChannelGroups.bind(subscriptionManager);\r\n\r\n    // mount crypto\r\n    this.encrypt = crypto.encrypt.bind(crypto);\r\n    this.decrypt = crypto.decrypt.bind(crypto);\r\n\r\n    /* config */\r\n    this.getAuthKey = modules.config.getAuthKey.bind(modules.config);\r\n    this.setAuthKey = modules.config.setAuthKey.bind(modules.config);\r\n    this.setCipherKey = modules.config.setCipherKey.bind(modules.config);\r\n    this.getUUID = modules.config.getUUID.bind(modules.config);\r\n    this.setUUID = modules.config.setUUID.bind(modules.config);\r\n    this.getFilterExpression = modules.config.getFilterExpression.bind(modules.config);\r\n    this.setFilterExpression = modules.config.setFilterExpression.bind(modules.config);\r\n\r\n    this.setHeartbeatInterval = modules.config.setHeartbeatInterval.bind(modules.config);\r\n\r\n    if (networking.hasModule('proxy')) {\r\n      this.setProxy = (proxy) => {\r\n        modules.config.setProxy(proxy);\r\n        this.reconnect();\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n  getVersion(): string {\r\n    return this._config.getVersion();\r\n  }\r\n\r\n  // network hooks to indicate network changes\r\n  networkDownDetected() {\r\n    this._listenerManager.announceNetworkDown();\r\n\r\n    if (this._config.restore) {\r\n      this.disconnect();\r\n    } else {\r\n      this.destroy(true);\r\n    }\r\n  }\r\n\r\n  networkUpDetected() {\r\n    this._listenerManager.announceNetworkUp();\r\n    this.reconnect();\r\n  }\r\n\r\n\r\n  static generateUUID(): string {\r\n    return uuidGenerator.createUUID();\r\n  }\r\n\r\n  static OPERATIONS = OPERATIONS;\r\n  static CATEGORIES = CATEGORIES;\r\n\r\n}\r\n"]}