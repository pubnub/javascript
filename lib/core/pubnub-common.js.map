{"version":3,"sources":["core/pubnub-common.js"],"names":["addChannelsChannelGroupConfig","removeChannelsChannelGroupConfig","deleteChannelGroupConfig","listChannelGroupsConfig","listChannelsInChannelGroupConfig","addPushChannelsConfig","removePushChannelsConfig","listPushChannelsConfig","removeDevicePushConfig","presenceLeaveEndpointConfig","presenceWhereNowEndpointConfig","presenceHeartbeatEndpointConfig","presenceGetStateConfig","presenceSetStateConfig","presenceHereNowConfig","createUserEndpointConfig","updateUserEndpointConfig","deleteUserEndpointConfig","auditEndpointConfig","grantEndpointConfig","publishEndpointConfig","historyEndpointConfig","deleteMessagesEndpointConfig","messageCountsEndpointConfig","fetchMessagesEndpointConfig","timeEndpointConfig","subscribeEndpointConfig","setup","db","networking","config","_config","Config","crypto","Crypto","init","modules","timeEndpoint","endpointCreator","bind","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","subscribeEndpoint","listenerManager","_listenerManager","ListenerManager","subscriptionManager","SubscriptionManager","addListener","removeListener","removeAllListeners","channelGroups","listGroups","listChannels","addChannels","removeChannels","deleteGroup","push","deleteDevice","hereNow","whereNow","getState","setState","adaptStateChange","grant","audit","publish","fire","args","callback","replicate","storeInHistory","history","deleteMessages","messageCounts","fetchMessages","createUser","updateUser","deleteUser","time","subscribe","adaptSubscribeChange","presence","adaptPresenceChange","unsubscribe","adaptUnsubscribeChange","disconnect","reconnect","destroy","isOffline","unsubscribeAll","stop","getSubscribedChannels","getSubscribedChannelGroups","encrypt","decrypt","getAuthKey","setAuthKey","setCipherKey","getUUID","setUUID","getFilterExpression","setFilterExpression","setHeartbeatInterval","hasModule","setProxy","proxy","getVersion","announceNetworkDown","restore","announceNetworkUp","uuidGenerator","createUUID","OPERATIONS","CATEGORIES"],"mappings":"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","file":"pubnub-common.js","sourcesContent":["/* @flow */\n\nimport Config from './components/config';\nimport Crypto from './components/cryptography/index';\nimport SubscriptionManager from './components/subscription_manager';\nimport ListenerManager from './components/listener_manager';\n\nimport endpointCreator from './components/endpoint';\n\nimport * as addChannelsChannelGroupConfig from './endpoints/channel_groups/add_channels';\nimport * as removeChannelsChannelGroupConfig from './endpoints/channel_groups/remove_channels';\nimport * as deleteChannelGroupConfig from './endpoints/channel_groups/delete_group';\nimport * as listChannelGroupsConfig from './endpoints/channel_groups/list_groups';\nimport * as listChannelsInChannelGroupConfig from './endpoints/channel_groups/list_channels';\n\nimport * as addPushChannelsConfig from './endpoints/push/add_push_channels';\nimport * as removePushChannelsConfig from './endpoints/push/remove_push_channels';\nimport * as listPushChannelsConfig from './endpoints/push/list_push_channels';\nimport * as removeDevicePushConfig from './endpoints/push/remove_device';\n\nimport * as presenceLeaveEndpointConfig from './endpoints/presence/leave';\nimport * as presenceWhereNowEndpointConfig from './endpoints/presence/where_now';\nimport * as presenceHeartbeatEndpointConfig from './endpoints/presence/heartbeat';\nimport * as presenceGetStateConfig from './endpoints/presence/get_state';\nimport * as presenceSetStateConfig from './endpoints/presence/set_state';\nimport * as presenceHereNowConfig from './endpoints/presence/here_now';\n\n// Objects API\nimport * as createUserEndpointConfig from './endpoints/users/create_user';\nimport * as updateUserEndpointConfig from './endpoints/users/update_user';\nimport * as deleteUserEndpointConfig from './endpoints/users/delete_user';\n\nimport * as auditEndpointConfig from './endpoints/access_manager/audit';\nimport * as grantEndpointConfig from './endpoints/access_manager/grant';\n\nimport * as publishEndpointConfig from './endpoints/publish';\nimport * as historyEndpointConfig from './endpoints/history/get_history';\nimport * as deleteMessagesEndpointConfig from './endpoints/history/delete_messages';\nimport * as messageCountsEndpointConfig from './endpoints/history/message_counts';\nimport * as fetchMessagesEndpointConfig from './endpoints/fetch_messages';\nimport * as timeEndpointConfig from './endpoints/time';\nimport * as subscribeEndpointConfig from './endpoints/subscribe';\n\nimport OPERATIONS from './constants/operations';\nimport CATEGORIES from './constants/categories';\n\nimport { InternalSetupStruct } from './flow_interfaces';\nimport uuidGenerator from './components/uuid';\n\nexport default class {\n  _config: Config;\n  _listenerManager: ListenerManager;\n\n  // tell flow about the mounted endpoint\n  time: Function;\n  publish: Function;\n  fire: Function;\n\n  history: Function;\n  deleteMessages: Function;\n  messageCounts: Function;\n  fetchMessages: Function;\n\n  //\n  channelGroups: Object;\n  //\n  push: Object;\n  //\n  hereNow: Function;\n  whereNow: Function;\n  getState: Function;\n  setState: Function;\n  //\n  grant: Function;\n  audit: Function;\n  //\n  subscribe: Function;\n  presence: Function;\n  unsubscribe: Function;\n  unsubscribeAll: Function;\n\n  // Objects API\n  createUser: Function;\n  updateUser: Function;\n  deleteUser: Function;\n\n  disconnect: Function;\n  reconnect: Function;\n\n  destroy: Function;\n  stop: Function;\n\n  getSubscribedChannels: Function;\n  getSubscribedChannelGroups: Function;\n\n  addListener: Function;\n  removeListener: Function;\n  removeAllListeners: Function;\n\n  getAuthKey: Function;\n  setAuthKey: Function;\n\n  setCipherKey: Function;\n  setUUID: Function;\n  getUUID: Function;\n\n  getFilterExpression: Function;\n  setFilterExpression: Function;\n\n  setHeartbeatInterval: Function;\n\n  setProxy: Function;\n\n  encrypt: Function;\n  decrypt: Function;\n\n  //\n\n  constructor(setup: InternalSetupStruct) {\n    let { db, networking } = setup;\n\n    const config = (this._config = new Config({ setup, db }));\n    const crypto = new Crypto({ config });\n\n    networking.init(config);\n\n    let modules = { config, networking, crypto };\n\n    const timeEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      timeEndpointConfig\n    );\n    const leaveEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceLeaveEndpointConfig\n    );\n    const heartbeatEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceHeartbeatEndpointConfig\n    );\n    const setStateEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceSetStateConfig\n    );\n    const subscribeEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      subscribeEndpointConfig\n    );\n\n    // managers\n    const listenerManager = (this._listenerManager = new ListenerManager());\n\n    const subscriptionManager = new SubscriptionManager({\n      timeEndpoint,\n      leaveEndpoint,\n      heartbeatEndpoint,\n      setStateEndpoint,\n      subscribeEndpoint,\n      crypto: modules.crypto,\n      config: modules.config,\n      listenerManager,\n    });\n\n    this.addListener = listenerManager.addListener.bind(listenerManager);\n    this.removeListener = listenerManager.removeListener.bind(listenerManager);\n    this.removeAllListeners = listenerManager.removeAllListeners.bind(\n      listenerManager\n    );\n\n    /* channel groups */\n    this.channelGroups = {\n      listGroups: endpointCreator.bind(this, modules, listChannelGroupsConfig),\n      listChannels: endpointCreator.bind(\n        this,\n        modules,\n        listChannelsInChannelGroupConfig\n      ),\n      addChannels: endpointCreator.bind(\n        this,\n        modules,\n        addChannelsChannelGroupConfig\n      ),\n      removeChannels: endpointCreator.bind(\n        this,\n        modules,\n        removeChannelsChannelGroupConfig\n      ),\n      deleteGroup: endpointCreator.bind(\n        this,\n        modules,\n        deleteChannelGroupConfig\n      ),\n    };\n    /* push */\n    this.push = {\n      addChannels: endpointCreator.bind(this, modules, addPushChannelsConfig),\n      removeChannels: endpointCreator.bind(\n        this,\n        modules,\n        removePushChannelsConfig\n      ),\n      deleteDevice: endpointCreator.bind(this, modules, removeDevicePushConfig),\n      listChannels: endpointCreator.bind(this, modules, listPushChannelsConfig),\n    };\n    /* presence */\n    this.hereNow = endpointCreator.bind(this, modules, presenceHereNowConfig);\n    this.whereNow = endpointCreator.bind(\n      this,\n      modules,\n      presenceWhereNowEndpointConfig\n    );\n    this.getState = endpointCreator.bind(this, modules, presenceGetStateConfig);\n    this.setState = subscriptionManager.adaptStateChange.bind(\n      subscriptionManager\n    );\n    /* PAM */\n    this.grant = endpointCreator.bind(this, modules, grantEndpointConfig);\n    this.audit = endpointCreator.bind(this, modules, auditEndpointConfig);\n    //\n    this.publish = endpointCreator.bind(this, modules, publishEndpointConfig);\n\n    this.fire = (args, callback) => {\n      args.replicate = false;\n      args.storeInHistory = false;\n      return this.publish(args, callback);\n    };\n\n    this.history = endpointCreator.bind(this, modules, historyEndpointConfig);\n    this.deleteMessages = endpointCreator.bind(\n      this,\n      modules,\n      deleteMessagesEndpointConfig\n    );\n    this.messageCounts = endpointCreator.bind(\n      this,\n      modules,\n      messageCountsEndpointConfig\n    );\n    this.fetchMessages = endpointCreator.bind(\n      this,\n      modules,\n      fetchMessagesEndpointConfig\n    );\n\n    // Objects API\n    this.createUser = endpointCreator.bind(\n      this,\n      modules,\n      createUserEndpointConfig\n    );\n    this.updateUser = endpointCreator.bind(\n      this,\n      modules,\n      updateUserEndpointConfig\n    );\n    this.deleteUser = endpointCreator.bind(\n      this,\n      modules,\n      deleteUserEndpointConfig\n    );\n\n    this.time = timeEndpoint;\n\n    // subscription related methods\n    this.subscribe = subscriptionManager.adaptSubscribeChange.bind(\n      subscriptionManager\n    );\n    this.presence = subscriptionManager.adaptPresenceChange.bind(\n      subscriptionManager\n    );\n    this.unsubscribe = subscriptionManager.adaptUnsubscribeChange.bind(\n      subscriptionManager\n    );\n    this.disconnect = subscriptionManager.disconnect.bind(subscriptionManager);\n    this.reconnect = subscriptionManager.reconnect.bind(subscriptionManager);\n\n    this.destroy = (isOffline: boolean) => {\n      subscriptionManager.unsubscribeAll(isOffline);\n      subscriptionManager.disconnect();\n    };\n\n    // --- deprecated  ------------------\n    this.stop = this.destroy; // --------\n    // --- deprecated  ------------------\n\n    this.unsubscribeAll = subscriptionManager.unsubscribeAll.bind(\n      subscriptionManager\n    );\n\n    this.getSubscribedChannels = subscriptionManager.getSubscribedChannels.bind(\n      subscriptionManager\n    );\n    this.getSubscribedChannelGroups = subscriptionManager.getSubscribedChannelGroups.bind(\n      subscriptionManager\n    );\n\n    // mount crypto\n    this.encrypt = crypto.encrypt.bind(crypto);\n    this.decrypt = crypto.decrypt.bind(crypto);\n\n    /* config */\n    this.getAuthKey = modules.config.getAuthKey.bind(modules.config);\n    this.setAuthKey = modules.config.setAuthKey.bind(modules.config);\n    this.setCipherKey = modules.config.setCipherKey.bind(modules.config);\n    this.getUUID = modules.config.getUUID.bind(modules.config);\n    this.setUUID = modules.config.setUUID.bind(modules.config);\n    this.getFilterExpression = modules.config.getFilterExpression.bind(\n      modules.config\n    );\n    this.setFilterExpression = modules.config.setFilterExpression.bind(\n      modules.config\n    );\n\n    this.setHeartbeatInterval = modules.config.setHeartbeatInterval.bind(\n      modules.config\n    );\n\n    if (networking.hasModule('proxy')) {\n      this.setProxy = proxy => {\n        modules.config.setProxy(proxy);\n        this.reconnect();\n      };\n    }\n  }\n\n  getVersion(): string {\n    return this._config.getVersion();\n  }\n\n  // network hooks to indicate network changes\n  networkDownDetected() {\n    this._listenerManager.announceNetworkDown();\n\n    if (this._config.restore) {\n      this.disconnect();\n    } else {\n      this.destroy(true);\n    }\n  }\n\n  networkUpDetected() {\n    this._listenerManager.announceNetworkUp();\n    this.reconnect();\n  }\n\n  static generateUUID(): string {\n    return uuidGenerator.createUUID();\n  }\n\n  static OPERATIONS = OPERATIONS;\n  static CATEGORIES = CATEGORIES;\n}\n"]}