{"version":3,"sources":["core/components/telemetry_manager.js"],"names":["configuration","_maximumSamplesCount","maximumSamplesCount","latencies","Object","keys","_latencies","forEach","endpointName","operationLatencies","averageLatency","_averageLatency","operationType","identifier","operationConstants","PNSubscribeOperation","_trackedLatencies","Date","now","_endpointName","endpointLatencies","startDate","push","length","splice","arrayReduce","accumulatedLatency","latency","Math","floor","reduce","operation","PNPublishOperation","PNSignalOperation","PNHistoryOperation","PNFetchMessagesOperation","PNDeleteMessagesOperation","PNMessageCounts","PNUnsubscribeOperation","PNWhereNowOperation","PNHereNowOperation","PNHeartbeatOperation","PNSetStateOperation","PNGetStateOperation","PNAddChannelsToGroupOperation","PNRemoveChannelsFromGroupOperation","PNChannelGroupsOperation","PNRemoveGroupOperation","PNChannelsForGroupOperation","PNPushNotificationEnabledChannelsOperation","PNRemoveAllPushNotificationsOperation","PNCreateUserOperation","PNUpdateUserOperation","PNDeleteUserOperation","PNGetUserOperation","PNGetUsersOperation","PNCreateSpaceOperation","PNUpdateSpaceOperation","PNDeleteSpaceOperation","PNGetSpaceOperation","PNGetSpacesOperation","PNGetMembersOperation","PNUpdateMembersOperation","PNGetMembershipsOperation","PNUpdateMembershipsOperation","PNAddMessageActionOperation","PNRemoveMessageActionOperation","PNGetMessageActionsOperation","PNAccessManagerGrant","PNAccessManagerAudit","PNAccessManagerGrantToken","PNAccessManagerRevokeToken"],"mappings":"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","sourcesContent":["/* @flow */\nimport operationConstants from '../constants/operations';\n\ntype TelemetryManagerConstruct = {\n  maximumSamplesCount: number,\n};\n\nexport default class {\n  _maximumSamplesCount: number = 100;\n  _trackedLatencies = {};\n  _latencies = {};\n\n  constructor(configuration: TelemetryManagerConstruct) {\n    this._maximumSamplesCount = configuration.maximumSamplesCount || this._maximumSamplesCount;\n  }\n\n  /**\n   * Compose object with latency information of recently used API endpoints.\n   *\n   * @return {Object} Object with request query key/value pairs.\n   */\n  operationsLatencyForRequest(): Object {\n    let latencies = {};\n\n    Object.keys(this._latencies).forEach((endpointName) => {\n      const operationLatencies = this._latencies[endpointName];\n      const averageLatency = this._averageLatency(operationLatencies);\n\n      if (averageLatency > 0) {\n        latencies[`l_${endpointName}`] = averageLatency;\n      }\n    });\n\n    return latencies;\n  }\n\n  startLatencyMeasure(operationType: String, identifier: string) {\n    if (operationType === operationConstants.PNSubscribeOperation || !identifier) {\n      return;\n    }\n\n    this._trackedLatencies[identifier] = Date.now();\n  }\n\n  stopLatencyMeasure(operationType: String, identifier: string) {\n    if (operationType === operationConstants.PNSubscribeOperation || !identifier) {\n      return;\n    }\n\n    const endpointName = this._endpointName(operationType);\n    /** @type Array<Number> */\n    let endpointLatencies = this._latencies[endpointName];\n    const startDate = this._trackedLatencies[identifier];\n\n    if (!endpointLatencies) {\n      endpointLatencies = (this._latencies[endpointName] = []);\n    }\n\n    endpointLatencies.push((Date.now() - startDate));\n\n    // Truncate samples count if there is more then configured.\n    if (endpointLatencies.length > this._maximumSamplesCount) {\n      endpointLatencies.splice(0, (endpointLatencies.length - this._maximumSamplesCount));\n    }\n\n    delete this._trackedLatencies[identifier];\n  }\n\n  _averageLatency(latencies: Array<number>) {\n    const arrayReduce = (accumulatedLatency: number, latency: number) => accumulatedLatency + latency;\n\n    return Math.floor(latencies.reduce(arrayReduce, 0) / latencies.length);\n  }\n\n  _endpointName(operationType: String) {\n    let operation = null;\n\n    switch (operationType) {\n      case operationConstants.PNPublishOperation:\n        operation = 'pub';\n        break;\n      case operationConstants.PNSignalOperation:\n        operation = 'sig';\n        break;\n      case operationConstants.PNHistoryOperation:\n      case operationConstants.PNFetchMessagesOperation:\n      case operationConstants.PNDeleteMessagesOperation:\n      case operationConstants.PNMessageCounts:\n        operation = 'hist';\n        break;\n      case operationConstants.PNUnsubscribeOperation:\n      case operationConstants.PNWhereNowOperation:\n      case operationConstants.PNHereNowOperation:\n      case operationConstants.PNHeartbeatOperation:\n      case operationConstants.PNSetStateOperation:\n      case operationConstants.PNGetStateOperation:\n        operation = 'pres';\n        break;\n      case operationConstants.PNAddChannelsToGroupOperation:\n      case operationConstants.PNRemoveChannelsFromGroupOperation:\n      case operationConstants.PNChannelGroupsOperation:\n      case operationConstants.PNRemoveGroupOperation:\n      case operationConstants.PNChannelsForGroupOperation:\n        operation = 'cg';\n        break;\n      case operationConstants.PNPushNotificationEnabledChannelsOperation:\n      case operationConstants.PNRemoveAllPushNotificationsOperation:\n        operation = 'push';\n        break;\n      case operationConstants.PNCreateUserOperation:\n      case operationConstants.PNUpdateUserOperation:\n      case operationConstants.PNDeleteUserOperation:\n      case operationConstants.PNGetUserOperation:\n      case operationConstants.PNGetUsersOperation:\n      case operationConstants.PNCreateSpaceOperation:\n      case operationConstants.PNUpdateSpaceOperation:\n      case operationConstants.PNDeleteSpaceOperation:\n      case operationConstants.PNGetSpaceOperation:\n      case operationConstants.PNGetSpacesOperation:\n      case operationConstants.PNGetMembersOperation:\n      case operationConstants.PNUpdateMembersOperation:\n      case operationConstants.PNGetMembershipsOperation:\n      case operationConstants.PNUpdateMembershipsOperation:\n        operation = 'obj';\n        break;\n      case operationConstants.PNAddMessageActionOperation:\n      case operationConstants.PNRemoveMessageActionOperation:\n      case operationConstants.PNGetMessageActionsOperation:\n        operation = 'msga';\n        break;\n      case operationConstants.PNAccessManagerGrant:\n      case operationConstants.PNAccessManagerAudit:\n        operation = 'pam';\n        break;\n      case operationConstants.PNAccessManagerGrantToken:\n      case operationConstants.PNAccessManagerRevokeToken:\n        operation = 'pamv3';\n        break;\n      default:\n        operation = 'time';\n        break;\n    }\n\n    return operation;\n  }\n}\n"],"file":"telemetry_manager.js"}