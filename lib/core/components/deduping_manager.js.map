{"version":3,"sources":["core/components/deduping_manager.js"],"names":["hashCode","payload","hash","length","i","character","charCodeAt","config","hashHistory","_config","message","hashedPayload","JSON","stringify","toString","timetoken","publishMetaData","publishTimetoken","includes","getKey","maximumCacheSize","shift","push"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;;;AAMA,IAAMA,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAa;AAC5B,MAAIC,OAAO,CAAX;AACA,MAAID,QAAQE,MAAR,KAAmB,CAAvB,EAA0B,OAAOD,IAAP;AAC1B,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIH,QAAQE,MAA5B,EAAoCC,KAAK,CAAzC,EAA4C;AAC1C,QAAIC,YAAYJ,QAAQK,UAAR,CAAmBF,CAAnB,CAAhB;AACAF,WAAQ,CAACA,QAAQ,CAAT,IAAcA,IAAf,GAAuBG,SAA9B;AACAH,WAAOA,OAAOA,IAAd;AACD;AACD,SAAOA,IAAP;AACD,CATD;;;AAgBE,wBAAkD;AAAA,QAApCK,MAAoC,QAApCA,MAAoC;;AAAA;;AAChD,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,OAAL,GAAeF,MAAf;AACD;;;;2BAEMG,O,EAA2B;AAChC,UAAMC,gBAAgBX,SAASY,KAAKC,SAAL,CAAeH,QAAQT,OAAvB,CAAT,EAA0Ca,QAA1C,EAAtB;AACA,UAAMC,YAAYL,QAAQM,eAAR,CAAwBC,gBAA1C;AACA,aAAUF,SAAV,SAAuBJ,aAAvB;AACD;;;gCAEWD,O,EAA2B;AACrC,aAAO,KAAKF,WAAL,CAAiBU,QAAjB,CAA0B,KAAKC,MAAL,CAAYT,OAAZ,CAA1B,CAAP;AACD;;;6BAEQA,O,EAA2B;AAClC,UAAI,KAAKF,WAAL,CAAiBL,MAAjB,IAA2B,KAAKM,OAAL,CAAaW,gBAA5C,EAA8D;AAC5D,aAAKZ,WAAL,CAAiBa,KAAjB;AACD;;AAED,WAAKb,WAAL,CAAiBc,IAAjB,CAAsB,KAAKH,MAAL,CAAYT,OAAZ,CAAtB;AACD;;;mCAEc;AACb,WAAKF,WAAL,GAAmB,EAAnB;AACD","file":"deduping_manager.js","sourcesContent":["/* @flow */\r\n\r\nimport Config from '../components/config';\r\nimport { SubscribeMessage } from '../flow_interfaces';\r\n\r\ntype DedupingManagerConsturct = {\r\n  config: Config,\r\n}\r\n\r\nconst hashCode = (payload) => {\r\n  let hash = 0;\r\n  if (payload.length === 0) return hash;\r\n  for (let i = 0; i < payload.length; i += 1) {\r\n    let character = payload.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + character; // eslint-disable-line\r\n    hash = hash & hash; // eslint-disable-line\r\n  }\r\n  return hash;\r\n};\r\n\r\nexport default class {\r\n\r\n  _config: Config;\r\n  hashHistory: Array<string>;\r\n\r\n  constructor({ config }: DedupingManagerConsturct) {\r\n    this.hashHistory = [];\r\n    this._config = config;\r\n  }\r\n\r\n  getKey(message: SubscribeMessage) {\r\n    const hashedPayload = hashCode(JSON.stringify(message.payload)).toString();\r\n    const timetoken = message.publishMetaData.publishTimetoken;\r\n    return `${timetoken}-${hashedPayload}`;\r\n  }\r\n\r\n  isDuplicate(message: SubscribeMessage) {\r\n    return this.hashHistory.includes(this.getKey(message));\r\n  }\r\n\r\n  addEntry(message: SubscribeMessage) {\r\n    if (this.hashHistory.length >= this._config.maximumCacheSize) {\r\n      this.hashHistory.shift();\r\n    }\r\n\r\n    this.hashHistory.push(this.getKey(message));\r\n  }\r\n\r\n  clearHistory() {\r\n    this.hashHistory = [];\r\n  }\r\n\r\n}\r\n"]}