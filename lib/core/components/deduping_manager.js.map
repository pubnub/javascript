{"version":3,"sources":["core/components/deduping_manager.js"],"names":["hashCode","payload","hash","length","i","character","charCodeAt","config","hashHistory","_config","message","hashedPayload","JSON","stringify","toString","timetoken","publishMetaData","publishTimetoken","includes","getKey","maximumCacheSize","shift","push"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AAMA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAa;AAC5B,MAAIC,IAAI,GAAG,CAAX;AACA,MAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B,OAAOD,IAAP;;AAC1B,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACE,MAA5B,EAAoCC,CAAC,IAAI,CAAzC,EAA4C;AAC1C,QAAIC,SAAS,GAAGJ,OAAO,CAACK,UAAR,CAAmBF,CAAnB,CAAhB;AACAF,IAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAd,GAAqBG,SAA5B;AACAH,IAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAd;AACD;;AACD,SAAOA,IAAP;AACD,CATD;;;AAeE,0BAAkD;AAAA,QAApCK,MAAoC,QAApCA,MAAoC;AAAA;AAAA;AAAA;AAChD,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,OAAL,GAAeF,MAAf;AACD;;;;WAED,gBAAOG,OAAP,EAAkC;AAChC,UAAMC,aAAa,GAAGX,QAAQ,CAACY,IAAI,CAACC,SAAL,CAAeH,OAAO,CAACT,OAAvB,CAAD,CAAR,CAA0Ca,QAA1C,EAAtB;AACA,UAAMC,SAAS,GAAGL,OAAO,CAACM,eAAR,CAAwBC,gBAA1C;AACA,uBAAUF,SAAV,cAAuBJ,aAAvB;AACD;;;WAED,qBAAYD,OAAZ,EAAuC;AACrC,aAAO,KAAKF,WAAL,CAAiBU,QAAjB,CAA0B,KAAKC,MAAL,CAAYT,OAAZ,CAA1B,CAAP;AACD;;;WAED,kBAASA,OAAT,EAAoC;AAClC,UAAI,KAAKF,WAAL,CAAiBL,MAAjB,IAA2B,KAAKM,OAAL,CAAaW,gBAA5C,EAA8D;AAC5D,aAAKZ,WAAL,CAAiBa,KAAjB;AACD;;AAED,WAAKb,WAAL,CAAiBc,IAAjB,CAAsB,KAAKH,MAAL,CAAYT,OAAZ,CAAtB;AACD;;;WAED,wBAAe;AACb,WAAKF,WAAL,GAAmB,EAAnB;AACD","sourcesContent":["/* @flow */\n\nimport Config from '../components/config';\nimport { SubscribeMessage } from '../flow_interfaces';\n\ntype DedupingManagerConsturct = {\n  config: Config,\n};\n\nconst hashCode = (payload) => {\n  let hash = 0;\n  if (payload.length === 0) return hash;\n  for (let i = 0; i < payload.length; i += 1) {\n    let character = payload.charCodeAt(i);\n    hash = (hash << 5) - hash + character; // eslint-disable-line\n    hash = hash & hash; // eslint-disable-line\n  }\n  return hash;\n};\n\nexport default class {\n  _config: Config;\n  hashHistory: Array<string>;\n\n  constructor({ config }: DedupingManagerConsturct) {\n    this.hashHistory = [];\n    this._config = config;\n  }\n\n  getKey(message: SubscribeMessage) {\n    const hashedPayload = hashCode(JSON.stringify(message.payload)).toString();\n    const timetoken = message.publishMetaData.publishTimetoken;\n    return `${timetoken}-${hashedPayload}`;\n  }\n\n  isDuplicate(message: SubscribeMessage) {\n    return this.hashHistory.includes(this.getKey(message));\n  }\n\n  addEntry(message: SubscribeMessage) {\n    if (this.hashHistory.length >= this._config.maximumCacheSize) {\n      this.hashHistory.shift();\n    }\n\n    this.hashHistory.push(this.getKey(message));\n  }\n\n  clearHistory() {\n    this.hashHistory = [];\n  }\n}\n"],"file":"deduping_manager.js"}