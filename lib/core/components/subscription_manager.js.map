{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","getFileUrl","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_getFileUrl","_crypto","_channels","_presenceChannels","_heartbeatChannels","_heartbeatChannelGroups","_channelGroups","_presenceChannelGroups","_pendingChannelSubscriptions","_pendingChannelGroupSubscriptions","_currentTimetoken","_lastTimetoken","_storedTimetoken","_subscriptionStatusAnnounced","_isOnline","_reconnectionManager","ReconnectionManager","_dedupingManager","DedupingManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","connected","suppressLeaveEvents","status","announceStatus","reconnect","timetoken","withPresence","withHeartbeats","subscribeKey","console","log","getHeartbeatInterval","push","isOffline","actualChannels","actualChannelGroups","length","affectedChannels","affectedChannelGroups","currentTimetoken","lastTimetoken","Object","keys","_region","stopPolling","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","undefined","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","clearInterval","heartbeatChannels","getHeartbeatChannels","heartbeatChannelGroups","getHeartbeatChannelGroups","presenceState","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","autoNetworkDetection","disconnect","announceNetworkDown","announceSuccessfulHeartbeats","subscribeArgs","filterExpression","region","_subscribeCall","_processSubscribeResponse","payload","category","categoryConstants","PNTimeoutCategory","PNNetworkIssuesCategory","onReconnection","announceNetworkUp","reconnectedAnnounce","PNReconnectedCategory","operation","startPolling","PNBadRequestCategory","metadata","connectedAnnounce","PNConnectedCategory","subscribedChannels","messages","requestMessageCountThreshold","dedupeOnSubscribe","countAnnouncement","PNRequestMessageCountExceededCategory","message","subscriptionMatch","publishMetaData","isDuplicate","addEntry","utils","endsWith","announce","subscription","actualChannel","subscribedChannel","substring","lastIndexOf","action","data","publishTimetoken","occupancy","uuid","timestamp","join","leave","timeout","announcePresence","messageType","publisher","issuingClientId","userMetadata","announceSignal","event","type","announceObjects","announceUser","announceSpace","announceMembership","messageTimetoken","actionTimetoken","value","announceMessageAction","msgPayload","cipherKey","decryptedPayload","decrypt","file","id","name","url","announceFile","announceMessage","abort"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAUA;;;AAiFE,0BAUiC;AAAA,QAT/BA,iBAS+B,QAT/BA,iBAS+B;AAAA,QAR/BC,aAQ+B,QAR/BA,aAQ+B;AAAA,QAP/BC,iBAO+B,QAP/BA,iBAO+B;AAAA,QAN/BC,gBAM+B,QAN/BA,gBAM+B;AAAA,QAL/BC,YAK+B,QAL/BA,YAK+B;AAAA,QAJ/BC,UAI+B,QAJ/BA,UAI+B;AAAA,QAH/BC,MAG+B,QAH/BA,MAG+B;AAAA,QAF/BC,MAE+B,QAF/BA,MAE+B;AAAA,QAD/BC,eAC+B,QAD/BA,eAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/B,SAAKC,gBAAL,GAAwBD,eAAxB;AACA,SAAKE,OAAL,GAAeJ,MAAf;AAEA,SAAKK,cAAL,GAAsBV,aAAtB;AACA,SAAKW,kBAAL,GAA0BV,iBAA1B;AACA,SAAKW,iBAAL,GAAyBV,gBAAzB;AACA,SAAKW,kBAAL,GAA0Bd,iBAA1B;AACA,SAAKe,WAAL,GAAmBV,UAAnB;AAEA,SAAKW,OAAL,GAAeT,MAAf;AAEA,SAAKU,SAAL,GAAiB,EAAjB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AAEA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,uBAAL,GAA+B,EAA/B;AAEA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,sBAAL,GAA8B,EAA9B;AAEA,SAAKC,4BAAL,GAAoC,EAApC;AACA,SAAKC,iCAAL,GAAyC,EAAzC;AAEA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AAEA,SAAKC,4BAAL,GAAoC,KAApC;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AAEA,SAAKC,oBAAL,GAA4B,IAAIC,gCAAJ,CAAwB;AAAE3B,MAAAA,YAAY,EAAZA;AAAF,KAAxB,CAA5B;AACA,SAAK4B,gBAAL,GAAwB,IAAIC,4BAAJ,CAAoB;AAAE3B,MAAAA,MAAM,EAANA;AAAF,KAApB,CAAxB;AACD;;;;WAED,0BAAiB4B,IAAjB,EAAkCC,QAAlC,EAAsD;AAAA;;AACpD,UAAQC,KAAR,GAAqDF,IAArD,CAAQE,KAAR;AAAA,2BAAqDF,IAArD,CAAeG,QAAf;AAAA,UAAeA,QAAf,+BAA0B,EAA1B;AAAA,gCAAqDH,IAArD,CAA8BI,aAA9B;AAAA,UAA8BA,aAA9B,oCAA8C,EAA9C;AAEAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,YAAIA,OAAO,IAAI,KAAI,CAACvB,SAApB,EAA+B,KAAI,CAACA,SAAL,CAAeuB,OAAf,EAAwBJ,KAAxB,GAAgCA,KAAhC;AAChC,OAFD;AAIAE,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,YAAIA,YAAY,IAAI,KAAI,CAACpB,cAAzB,EAAyC;AACvC,UAAA,KAAI,CAACA,cAAL,CAAoBoB,YAApB,EAAkCL,KAAlC,GAA0CA,KAA1C;AACD;AACF,OAJD;AAMA,aAAO,KAAKvB,iBAAL,CAAuB;AAAEuB,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,QAAQ,EAARA,QAAT;AAAmBC,QAAAA,aAAa,EAAbA;AAAnB,OAAvB,EAA2DH,QAA3D,CAAP;AACD;;;WAED,6BAAoBD,IAApB,EAAwC;AAAA;;AACtC,UAAQQ,SAAR,GAAyDR,IAAzD,CAAQQ,SAAR;AAAA,4BAAyDR,IAAzD,CAAmBG,QAAnB;AAAA,UAAmBA,QAAnB,gCAA8B,EAA9B;AAAA,iCAAyDH,IAAzD,CAAkCI,aAAlC;AAAA,UAAkCA,aAAlC,qCAAkD,EAAlD;;AAEA,UAAII,SAAJ,EAAe;AACbL,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAqB;AACpC,UAAA,MAAI,CAACrB,kBAAL,CAAwBqB,OAAxB,IAAmC;AAAEJ,YAAAA,KAAK,EAAE;AAAT,WAAnC;AACD,SAFD;AAIAE,QAAAA,aAAa,CAACC,OAAd,CAAsB,UAACE,YAAD,EAA0B;AAC9C,UAAA,MAAI,CAACrB,uBAAL,CAA6BqB,YAA7B,IAA6C;AAAEL,YAAAA,KAAK,EAAE;AAAT,WAA7C;AACD,SAFD;AAGD,OARD,MAQO;AACLC,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,cAAIA,OAAO,IAAI,MAAI,CAACrB,kBAApB,EAAwC;AACtC,mBAAO,MAAI,CAACA,kBAAL,CAAwBqB,OAAxB,CAAP;AACD;AACF,SAJD;AAMAF,QAAAA,aAAa,CAACC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,cAAIA,YAAY,IAAI,MAAI,CAACrB,uBAAzB,EAAkD;AAChD,mBAAO,MAAI,CAACA,uBAAL,CAA6BqB,YAA7B,CAAP;AACD;AACF,SAJD;;AAMA,YAAI,KAAK/B,OAAL,CAAaiC,mBAAb,KAAqC,KAAzC,EAAgD;AAC9C,eAAKhC,cAAL,CAAoB;AAAE0B,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,aAAa,EAAbA;AAAZ,WAApB,EAAiD,UAACM,MAAD,EAAY;AAC3D,YAAA,MAAI,CAACnC,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD,WAFD;AAGD;AACF;;AAED,WAAKE,SAAL;AACD;;;WAED,8BAAqBZ,IAArB,EAA0C;AAAA;;AACxC,UAAQa,SAAR,GAAuGb,IAAvG,CAAQa,SAAR;AAAA,4BAAuGb,IAAvG,CAAmBG,QAAnB;AAAA,UAAmBA,QAAnB,gCAA8B,EAA9B;AAAA,iCAAuGH,IAAvG,CAAkCI,aAAlC;AAAA,UAAkCA,aAAlC,qCAAkD,EAAlD;AAAA,+BAAuGJ,IAAvG,CAAsDc,YAAtD;AAAA,UAAsDA,YAAtD,mCAAqE,KAArE;AAAA,iCAAuGd,IAAvG,CAA4Ee,cAA5E;AAAA,UAA4EA,cAA5E,qCAA6F,KAA7F;;AAEA,UAAI,CAAC,KAAKvC,OAAL,CAAawC,YAAd,IAA8B,KAAKxC,OAAL,CAAawC,YAAb,KAA8B,EAAhE,EAAoE;AAElE,YAAIC,OAAO,IAAIA,OAAO,CAACC,GAAvB,EAA4B;AAC1BD,UAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD;;AACD;AACD;;AAED,UAAIL,SAAJ,EAAe;AACb,aAAKrB,cAAL,GAAsB,KAAKD,iBAA3B;AACA,aAAKA,iBAAL,GAAyBsB,SAAzB;AACD;;AAID,UAAI,KAAKtB,iBAAL,KAA2B,GAA3B,IAAkC,KAAKA,iBAAL,KAA2B,CAAjE,EAAoE;AAClE,aAAKE,gBAAL,GAAwB,KAAKF,iBAA7B;AACA,aAAKA,iBAAL,GAAyB,CAAzB;AACD;;AAEDY,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAqB;AACpC,QAAA,MAAI,CAACvB,SAAL,CAAeuB,OAAf,IAA0B;AAAEJ,UAAAA,KAAK,EAAE;AAAT,SAA1B;AACA,YAAIY,YAAJ,EAAkB,MAAI,CAAC9B,iBAAL,CAAuBsB,OAAvB,IAAkC,EAAlC;AAClB,YAAIS,cAAc,IAAI,MAAI,CAACvC,OAAL,CAAa2C,oBAAb,EAAtB,EAA2D,MAAI,CAAClC,kBAAL,CAAwBqB,OAAxB,IAAmC,EAAnC;;AAE3D,QAAA,MAAI,CAACjB,4BAAL,CAAkC+B,IAAlC,CAAuCd,OAAvC;AACD,OAND;AAQAF,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAACE,YAAD,EAA0B;AAC9C,QAAA,MAAI,CAACpB,cAAL,CAAoBoB,YAApB,IAAoC;AAAEL,UAAAA,KAAK,EAAE;AAAT,SAApC;AACA,YAAIY,YAAJ,EAAkB,MAAI,CAAC1B,sBAAL,CAA4BmB,YAA5B,IAA4C,EAA5C;AAClB,YAAIQ,cAAc,IAAI,MAAI,CAACvC,OAAL,CAAa2C,oBAAb,EAAtB,EAA2D,MAAI,CAACjC,uBAAL,CAA6BqB,YAA7B,IAA6C,EAA7C;;AAE3D,QAAA,MAAI,CAACjB,iCAAL,CAAuC8B,IAAvC,CAA4Cb,YAA5C;AACD,OAND;AAQA,WAAKb,4BAAL,GAAoC,KAApC;AACA,WAAKkB,SAAL;AACD;;;WAED,gCAAuBZ,IAAvB,EAA8CqB,SAA9C,EAAkE;AAAA;;AAChE,4BAA8CrB,IAA9C,CAAQG,QAAR;AAAA,UAAQA,QAAR,gCAAmB,EAAnB;AAAA,iCAA8CH,IAA9C,CAAuBI,aAAvB;AAAA,UAAuBA,aAAvB,qCAAuC,EAAvC;AAIA,UAAMkB,cAAc,GAAG,EAAvB;AACA,UAAMC,mBAAmB,GAAG,EAA5B;AAGApB,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,YAAIA,OAAO,IAAI,MAAI,CAACvB,SAApB,EAA+B;AAC7B,iBAAO,MAAI,CAACA,SAAL,CAAeuB,OAAf,CAAP;AACAgB,UAAAA,cAAc,CAACF,IAAf,CAAoBd,OAApB;;AAEA,cAAIA,OAAO,IAAI,MAAI,CAACrB,kBAApB,EAAwC;AACtC,mBAAO,MAAI,CAACA,kBAAL,CAAwBqB,OAAxB,CAAP;AACD;AACF;;AACD,YAAIA,OAAO,IAAI,MAAI,CAACtB,iBAApB,EAAuC;AACrC,iBAAO,MAAI,CAACA,iBAAL,CAAuBsB,OAAvB,CAAP;AACAgB,UAAAA,cAAc,CAACF,IAAf,CAAoBd,OAApB;AACD;AACF,OAbD;AAeAF,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,YAAIA,YAAY,IAAI,MAAI,CAACpB,cAAzB,EAAyC;AACvC,iBAAO,MAAI,CAACA,cAAL,CAAoBoB,YAApB,CAAP;AACAgB,UAAAA,mBAAmB,CAACH,IAApB,CAAyBb,YAAzB;;AAEA,cAAIA,YAAY,IAAI,MAAI,CAACrB,uBAAzB,EAAkD;AAChD,mBAAO,MAAI,CAACA,uBAAL,CAA6BqB,YAA7B,CAAP;AACD;AACF;;AACD,YAAIA,YAAY,IAAI,MAAI,CAACnB,sBAAzB,EAAiD;AAC/C,iBAAO,MAAI,CAACD,cAAL,CAAoBoB,YAApB,CAAP;AACAgB,UAAAA,mBAAmB,CAACH,IAApB,CAAyBb,YAAzB;AACD;AACF,OAbD;;AAgBA,UAAIe,cAAc,CAACE,MAAf,KAA0B,CAA1B,IAA+BD,mBAAmB,CAACC,MAApB,KAA+B,CAAlE,EAAqE;AACnE;AACD;;AAED,UAAI,KAAKhD,OAAL,CAAaiC,mBAAb,KAAqC,KAArC,IAA8C,CAACY,SAAnD,EAA8D;AAC5D,aAAK5C,cAAL,CAAoB;AAAE0B,UAAAA,QAAQ,EAAEmB,cAAZ;AAA4BlB,UAAAA,aAAa,EAAEmB;AAA3C,SAApB,EAAsF,UAACb,MAAD,EAAY;AAChGA,UAAAA,MAAM,CAACe,gBAAP,GAA0BH,cAA1B;AACAZ,UAAAA,MAAM,CAACgB,qBAAP,GAA+BH,mBAA/B;AACAb,UAAAA,MAAM,CAACiB,gBAAP,GAA0B,MAAI,CAACpC,iBAA/B;AACAmB,UAAAA,MAAM,CAACkB,aAAP,GAAuB,MAAI,CAACpC,cAA5B;;AACA,UAAA,MAAI,CAACjB,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD,SAND;AAOD;;AAGD,UACEmB,MAAM,CAACC,IAAP,CAAY,KAAK/C,SAAjB,EAA4ByC,MAA5B,KAAuC,CAAvC,IACAK,MAAM,CAACC,IAAP,CAAY,KAAK9C,iBAAjB,EAAoCwC,MAApC,KAA+C,CAD/C,IAEAK,MAAM,CAACC,IAAP,CAAY,KAAK3C,cAAjB,EAAiCqC,MAAjC,KAA4C,CAF5C,IAGAK,MAAM,CAACC,IAAP,CAAY,KAAK1C,sBAAjB,EAAyCoC,MAAzC,KAAoD,CAJtD,EAKE;AACA,aAAKhC,cAAL,GAAsB,CAAtB;AACA,aAAKD,iBAAL,GAAyB,CAAzB;AACA,aAAKE,gBAAL,GAAwB,IAAxB;AACA,aAAKsC,OAAL,GAAe,IAAf;;AACA,aAAKnC,oBAAL,CAA0BoC,WAA1B;AACD;;AAED,WAAKpB,SAAL;AACD;;;WAED,wBAAeS,SAAf,EAAmC;AACjC,WAAKY,sBAAL,CACE;AACE9B,QAAAA,QAAQ,EAAE,KAAK+B,qBAAL,EADZ;AAEE9B,QAAAA,aAAa,EAAE,KAAK+B,0BAAL;AAFjB,OADF,EAKEd,SALF;AAOD;;;WAED,gCAAsC;AACpC,aAAOQ,MAAM,CAACC,IAAP,CAAY,KAAK7C,kBAAjB,CAAP;AACD;;;WAED,qCAA2C;AACzC,aAAO4C,MAAM,CAACC,IAAP,CAAY,KAAK5C,uBAAjB,CAAP;AACD;;;WAED,iCAAuC;AACrC,aAAO2C,MAAM,CAACC,IAAP,CAAY,KAAK/C,SAAjB,CAAP;AACD;;;WAED,sCAA4C;AAC1C,aAAO8C,MAAM,CAACC,IAAP,CAAY,KAAK3C,cAAjB,CAAP;AACD;;;WAED,qBAAY;AACV,WAAKiD,mBAAL;;AACA,WAAKC,uBAAL;AACD;;;WAED,sBAAa;AACX,WAAKC,kBAAL;;AACA,WAAKC,mBAAL;;AACA,WAAK3C,oBAAL,CAA0BoC,WAA1B;AACD;;;WAED,mCAA0B;AACxB,WAAKO,mBAAL;;AAGA,UAAI,KAAK/D,OAAL,CAAa2C,oBAAb,OAAwC,CAAxC,IAA6C,KAAK3C,OAAL,CAAa2C,oBAAb,OAAwCqB,SAAzF,EAAoG;AAClG;AACD;;AAED,WAAKC,qBAAL;;AAEA,WAAKC,eAAL,GAAuBC,WAAW,CAChC,KAAKF,qBAAL,CAA2BG,IAA3B,CAAgC,IAAhC,CADgC,EAEhC,KAAKpE,OAAL,CAAa2C,oBAAb,KAAsC,IAFN,CAAlC;AAID;;;WAED,+BAAsB;AACpB,UAAI,KAAKuB,eAAT,EAA0B;AAExBG,QAAAA,aAAa,CAAC,KAAKH,eAAN,CAAb;AACA,aAAKA,eAAL,GAAuB,IAAvB;AACD;AACF;;;WAED,iCAAwB;AAAA;;AACtB,UAAMI,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;AAEA,UAAMC,sBAAsB,GAAG,KAAKC,yBAAL,EAA/B;AAEA,UAAIC,aAAa,GAAG,EAApB;;AAEA,UAAIJ,iBAAiB,CAACtB,MAAlB,KAA6B,CAA7B,IAAkCwB,sBAAsB,CAACxB,MAAvB,KAAkC,CAAxE,EAA2E;AACzE;AACD;;AAED,WAAKU,qBAAL,GAA6B7B,OAA7B,CAAqC,UAACC,OAAD,EAAa;AAChD,YAAI6C,YAAY,GAAG,MAAI,CAACpE,SAAL,CAAeuB,OAAf,EAAwBJ,KAA3C;;AACA,YAAI2B,MAAM,CAACC,IAAP,CAAYqB,YAAZ,EAA0B3B,MAA9B,EAAsC;AACpC0B,UAAAA,aAAa,CAAC5C,OAAD,CAAb,GAAyB6C,YAAzB;AACD;AACF,OALD;AAOA,WAAKhB,0BAAL,GAAkC9B,OAAlC,CAA0C,UAACE,YAAD,EAAkB;AAC1D,YAAI6C,iBAAiB,GAAG,MAAI,CAACjE,cAAL,CAAoBoB,YAApB,EAAkCL,KAA1D;;AACA,YAAI2B,MAAM,CAACC,IAAP,CAAYsB,iBAAZ,EAA+B5B,MAAnC,EAA2C;AACzC0B,UAAAA,aAAa,CAAC3C,YAAD,CAAb,GAA8B6C,iBAA9B;AACD;AACF,OALD;;AAOA,UAAIC,WAAW,GAAG,SAAdA,WAAc,CAAC3C,MAAD,EAAgC;AAChD,YAAIA,MAAM,CAAC4C,KAAP,IAAgB,MAAI,CAAC9E,OAAL,CAAa+E,wBAAjC,EAA2D;AACzD,UAAA,MAAI,CAAChF,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD;;AAED,YAAIA,MAAM,CAAC4C,KAAP,IAAgB,MAAI,CAAC9E,OAAL,CAAagF,oBAA7B,IAAqD,MAAI,CAAC7D,SAA9D,EAAyE;AACvE,UAAA,MAAI,CAACA,SAAL,GAAiB,KAAjB;;AACA,UAAA,MAAI,CAAC8D,UAAL;;AACA,UAAA,MAAI,CAAClF,gBAAL,CAAsBmF,mBAAtB;;AACA,UAAA,MAAI,CAAC9C,SAAL;AACD;;AAED,YAAI,CAACF,MAAM,CAAC4C,KAAR,IAAiB,MAAI,CAAC9E,OAAL,CAAamF,4BAAlC,EAAgE;AAC9D,UAAA,MAAI,CAACpF,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD;AACF,OAfD;;AAiBA,WAAKhC,kBAAL,CACE;AACEyB,QAAAA,QAAQ,EAAE2C,iBADZ;AAEE1C,QAAAA,aAAa,EAAE4C,sBAFjB;AAGE9C,QAAAA,KAAK,EAAEgD;AAHT,OADF,EAMEG,WAAW,CAACT,IAAZ,CAAiB,IAAjB,CANF;AAQD;;;WAED,+BAAsB;AAAA;;AACpB,WAAKN,kBAAL;;AACA,UAAIY,aAAa,GAAG,EAApB;AACA,UAAI/C,QAAQ,GAAG,EAAf;AACA,UAAIC,aAAa,GAAG,EAApB;AAEAyB,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAK/C,SAAjB,EAA4BsB,OAA5B,CAAoC,UAACC,OAAD,EAAa;AAC/C,YAAI6C,YAAY,GAAG,MAAI,CAACpE,SAAL,CAAeuB,OAAf,EAAwBJ,KAA3C;;AAEA,YAAI2B,MAAM,CAACC,IAAP,CAAYqB,YAAZ,EAA0B3B,MAA9B,EAAsC;AACpC0B,UAAAA,aAAa,CAAC5C,OAAD,CAAb,GAAyB6C,YAAzB;AACD;;AAEDhD,QAAAA,QAAQ,CAACiB,IAAT,CAAcd,OAAd;AACD,OARD;AASAuB,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAK9C,iBAAjB,EAAoCqB,OAApC,CAA4C,UAACC,OAAD,EAAa;AACvDH,QAAAA,QAAQ,CAACiB,IAAT,WAAiBd,OAAjB;AACD,OAFD;AAIAuB,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAK3C,cAAjB,EAAiCkB,OAAjC,CAAyC,UAACE,YAAD,EAAkB;AACzD,YAAI6C,iBAAiB,GAAG,MAAI,CAACjE,cAAL,CAAoBoB,YAApB,EAAkCL,KAA1D;;AAEA,YAAI2B,MAAM,CAACC,IAAP,CAAYsB,iBAAZ,EAA+B5B,MAAnC,EAA2C;AACzC0B,UAAAA,aAAa,CAAC3C,YAAD,CAAb,GAA8B6C,iBAA9B;AACD;;AAEDhD,QAAAA,aAAa,CAACgB,IAAd,CAAmBb,YAAnB;AACD,OARD;AASAsB,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAK1C,sBAAjB,EAAyCiB,OAAzC,CAAiD,UAACE,YAAD,EAAkB;AACjEH,QAAAA,aAAa,CAACgB,IAAd,WAAsBb,YAAtB;AACD,OAFD;;AAIA,UAAIJ,QAAQ,CAACqB,MAAT,KAAoB,CAApB,IAAyBpB,aAAa,CAACoB,MAAd,KAAyB,CAAtD,EAAyD;AACvD;AACD;;AAED,UAAMoC,aAAa,GAAG;AACpBzD,QAAAA,QAAQ,EAARA,QADoB;AAEpBC,QAAAA,aAAa,EAAbA,aAFoB;AAGpBF,QAAAA,KAAK,EAAEgD,aAHa;AAIpBrC,QAAAA,SAAS,EAAE,KAAKtB,iBAJI;AAKpBsE,QAAAA,gBAAgB,EAAE,KAAKrF,OAAL,CAAaqF,gBALX;AAMpBC,QAAAA,MAAM,EAAE,KAAK/B;AANO,OAAtB;AASA,WAAKgC,cAAL,GAAsB,KAAKnF,kBAAL,CAAwBgF,aAAxB,EAAuC,KAAKI,yBAAL,CAA+BpB,IAA/B,CAAoC,IAApC,CAAvC,CAAtB;AACD;;;WAED,mCAA0BlC,MAA1B,EAAsDuD,OAAtD,EAAkF;AAAA;;AAChF,UAAIvD,MAAM,CAAC4C,KAAX,EAAkB;AAEhB,YAAI5C,MAAM,CAACwD,QAAP,KAAoBC,uBAAkBC,iBAA1C,EAA6D;AAC3D,eAAKhC,mBAAL;AACD,SAFD,MAEO,IAAI1B,MAAM,CAACwD,QAAP,KAAoBC,uBAAkBE,uBAA1C,EAAmE;AAExE,eAAKZ,UAAL;;AAEA,cAAI/C,MAAM,CAAC4C,KAAP,IAAgB,KAAK9E,OAAL,CAAagF,oBAA7B,IAAqD,KAAK7D,SAA9D,EAAyE;AACvE,iBAAKA,SAAL,GAAiB,KAAjB;;AACA,iBAAKpB,gBAAL,CAAsBmF,mBAAtB;AACD;;AAED,eAAK9D,oBAAL,CAA0B0E,cAA1B,CAAyC,YAAM;AAC7C,gBAAI,MAAI,CAAC9F,OAAL,CAAagF,oBAAb,IAAqC,CAAC,MAAI,CAAC7D,SAA/C,EAA0D;AACxD,cAAA,MAAI,CAACA,SAAL,GAAiB,IAAjB;;AACA,cAAA,MAAI,CAACpB,gBAAL,CAAsBgG,iBAAtB;AACD;;AACD,YAAA,MAAI,CAAC3D,SAAL;;AACA,YAAA,MAAI,CAAClB,4BAAL,GAAoC,IAApC;AACA,gBAAI8E,mBAAuC,GAAG;AAC5CN,cAAAA,QAAQ,EAAEC,uBAAkBM,qBADgB;AAE5CC,cAAAA,SAAS,EAAEhE,MAAM,CAACgE,SAF0B;AAG5C9C,cAAAA,aAAa,EAAE,MAAI,CAACpC,cAHwB;AAI5CmC,cAAAA,gBAAgB,EAAE,MAAI,CAACpC;AAJqB,aAA9C;;AAMA,YAAA,MAAI,CAAChB,gBAAL,CAAsBoC,cAAtB,CAAqC6D,mBAArC;AACD,WAdD;;AAgBA,eAAK5E,oBAAL,CAA0B+E,YAA1B;;AACA,eAAKpG,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD,SA3BM,MA2BA,IAAIA,MAAM,CAACwD,QAAP,KAAoBC,uBAAkBS,oBAA1C,EAAgE;AACrE,eAAKrC,mBAAL;;AACA,eAAKhE,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD,SAHM,MAGA;AACL,eAAKnC,gBAAL,CAAsBoC,cAAtB,CAAqCD,MAArC;AACD;;AAED;AACD;;AAED,UAAI,KAAKjB,gBAAT,EAA2B;AACzB,aAAKF,iBAAL,GAAyB,KAAKE,gBAA9B;AACA,aAAKA,gBAAL,GAAwB,IAAxB;AACD,OAHD,MAGO;AACL,aAAKD,cAAL,GAAsB,KAAKD,iBAA3B;AACA,aAAKA,iBAAL,GAAyB0E,OAAO,CAACY,QAAR,CAAiBhE,SAA1C;AACD;;AAED,UAAI,CAAC,KAAKnB,4BAAV,EAAwC;AACtC,YAAIoF,iBAAqC,GAAG,EAA5C;AACAA,QAAAA,iBAAiB,CAACZ,QAAlB,GAA6BC,uBAAkBY,mBAA/C;AACAD,QAAAA,iBAAiB,CAACJ,SAAlB,GAA8BhE,MAAM,CAACgE,SAArC;AACAI,QAAAA,iBAAiB,CAACrD,gBAAlB,GAAqC,KAAKpC,4BAA1C;AACAyF,QAAAA,iBAAiB,CAACE,kBAAlB,GAAuC,KAAK9C,qBAAL,EAAvC;AACA4C,QAAAA,iBAAiB,CAACpD,qBAAlB,GAA0C,KAAKpC,iCAA/C;AACAwF,QAAAA,iBAAiB,CAAClD,aAAlB,GAAkC,KAAKpC,cAAvC;AACAsF,QAAAA,iBAAiB,CAACnD,gBAAlB,GAAqC,KAAKpC,iBAA1C;AACA,aAAKG,4BAAL,GAAoC,IAApC;;AACA,aAAKnB,gBAAL,CAAsBoC,cAAtB,CAAqCmE,iBAArC;;AAGA,aAAKzF,4BAAL,GAAoC,EAApC;AACA,aAAKC,iCAAL,GAAyC,EAAzC;AACD;;AAED,UAAI2F,QAAQ,GAAGhB,OAAO,CAACgB,QAAR,IAAoB,EAAnC;AACA,0BAA0D,KAAKzG,OAA/D;AAAA,UAAM0G,4BAAN,iBAAMA,4BAAN;AAAA,UAAoCC,iBAApC,iBAAoCA,iBAApC;;AAEA,UAAID,4BAA4B,IAAID,QAAQ,CAACzD,MAAT,IAAmB0D,4BAAvD,EAAqF;AACnF,YAAIE,iBAAqC,GAAG,EAA5C;AACAA,QAAAA,iBAAiB,CAAClB,QAAlB,GAA6BC,uBAAkBkB,qCAA/C;AACAD,QAAAA,iBAAiB,CAACV,SAAlB,GAA8BhE,MAAM,CAACgE,SAArC;;AACA,aAAKnG,gBAAL,CAAsBoC,cAAtB,CAAqCyE,iBAArC;AACD;;AAEDH,MAAAA,QAAQ,CAAC5E,OAAT,CAAiB,UAACiF,OAAD,EAAa;AAC5B,YAAIhF,OAAO,GAAGgF,OAAO,CAAChF,OAAtB;AACA,YAAIiF,iBAAiB,GAAGD,OAAO,CAACC,iBAAhC;AACA,YAAIC,eAAe,GAAGF,OAAO,CAACE,eAA9B;;AAEA,YAAIlF,OAAO,KAAKiF,iBAAhB,EAAmC;AACjCA,UAAAA,iBAAiB,GAAG,IAApB;AACD;;AAED,YAAIJ,iBAAJ,EAAuB;AACrB,cAAI,MAAI,CAACrF,gBAAL,CAAsB2F,WAAtB,CAAkCH,OAAlC,CAAJ,EAAgD;AAC9C;AACD,WAFD,MAEO;AACL,YAAA,MAAI,CAACxF,gBAAL,CAAsB4F,QAAtB,CAA+BJ,OAA/B;AACD;AACF;;AAED,YAAIK,kBAAMC,QAAN,CAAeN,OAAO,CAAChF,OAAvB,EAAgC,SAAhC,CAAJ,EAAgD;AAC9C,cAAIuF,QAA8B,GAAG,EAArC;AACAA,UAAAA,QAAQ,CAACvF,OAAT,GAAmB,IAAnB;AACAuF,UAAAA,QAAQ,CAACC,YAAT,GAAwB,IAAxB;AAGAD,UAAAA,QAAQ,CAACE,aAAT,GAAyBR,iBAAiB,IAAI,IAArB,GAA4BjF,OAA5B,GAAsC,IAA/D;AACAuF,UAAAA,QAAQ,CAACG,iBAAT,GAA6BT,iBAAiB,IAAI,IAArB,GAA4BA,iBAA5B,GAAgDjF,OAA7E;;AAGA,cAAIA,OAAJ,EAAa;AACXuF,YAAAA,QAAQ,CAACvF,OAAT,GAAmBA,OAAO,CAAC2F,SAAR,CAAkB,CAAlB,EAAqB3F,OAAO,CAAC4F,WAAR,CAAoB,SAApB,CAArB,CAAnB;AACD;;AAED,cAAIX,iBAAJ,EAAuB;AACrBM,YAAAA,QAAQ,CAACC,YAAT,GAAwBP,iBAAiB,CAACU,SAAlB,CAA4B,CAA5B,EAA+BV,iBAAiB,CAACW,WAAlB,CAA8B,SAA9B,CAA/B,CAAxB;AACD;;AAEDL,UAAAA,QAAQ,CAACM,MAAT,GAAkBb,OAAO,CAACrB,OAAR,CAAgBkC,MAAlC;AACAN,UAAAA,QAAQ,CAAC3F,KAAT,GAAiBoF,OAAO,CAACrB,OAAR,CAAgBmC,IAAjC;AACAP,UAAAA,QAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,QAAQ,CAACS,SAAT,GAAqBhB,OAAO,CAACrB,OAAR,CAAgBqC,SAArC;AACAT,UAAAA,QAAQ,CAACU,IAAT,GAAgBjB,OAAO,CAACrB,OAAR,CAAgBsC,IAAhC;AACAV,UAAAA,QAAQ,CAACW,SAAT,GAAqBlB,OAAO,CAACrB,OAAR,CAAgBuC,SAArC;;AAEA,cAAIlB,OAAO,CAACrB,OAAR,CAAgBwC,IAApB,EAA0B;AACxBZ,YAAAA,QAAQ,CAACY,IAAT,GAAgBnB,OAAO,CAACrB,OAAR,CAAgBwC,IAAhC;AACD;;AAED,cAAInB,OAAO,CAACrB,OAAR,CAAgByC,KAApB,EAA2B;AACzBb,YAAAA,QAAQ,CAACa,KAAT,GAAiBpB,OAAO,CAACrB,OAAR,CAAgByC,KAAjC;AACD;;AAED,cAAIpB,OAAO,CAACrB,OAAR,CAAgB0C,OAApB,EAA6B;AAC3Bd,YAAAA,QAAQ,CAACc,OAAT,GAAmBrB,OAAO,CAACrB,OAAR,CAAgB0C,OAAnC;AACD;;AAED,UAAA,MAAI,CAACpI,gBAAL,CAAsBqI,gBAAtB,CAAuCf,QAAvC;AACD,SAtCD,MAsCO,IAAIP,OAAO,CAACuB,WAAR,KAAwB,CAA5B,EAA+B;AAEpC,cAAIhB,SAA4B,GAAG,EAAnC;AACAA,UAAAA,SAAQ,CAACvF,OAAT,GAAmB,IAAnB;AACAuF,UAAAA,SAAQ,CAACC,YAAT,GAAwB,IAAxB;AAEAD,UAAAA,SAAQ,CAACvF,OAAT,GAAmBA,OAAnB;AACAuF,UAAAA,SAAQ,CAACC,YAAT,GAAwBP,iBAAxB;AACAM,UAAAA,SAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,SAAQ,CAACiB,SAAT,GAAqBxB,OAAO,CAACyB,eAA7B;;AAEA,cAAIzB,OAAO,CAAC0B,YAAZ,EAA0B;AACxBnB,YAAAA,SAAQ,CAACmB,YAAT,GAAwB1B,OAAO,CAAC0B,YAAhC;AACD;;AAEDnB,UAAAA,SAAQ,CAACP,OAAT,GAAmBA,OAAO,CAACrB,OAA3B;;AAEA,UAAA,MAAI,CAAC1F,gBAAL,CAAsB0I,cAAtB,CAAqCpB,SAArC;AACD,SAlBM,MAkBA,IAAIP,OAAO,CAACuB,WAAR,KAAwB,CAA5B,EAA+B;AAGpC,cAAIhB,UAA4B,GAAG,EAAnC;AAEAA,UAAAA,UAAQ,CAACvF,OAAT,GAAmB,IAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwB,IAAxB;AAEAD,UAAAA,UAAQ,CAACvF,OAAT,GAAmBA,OAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwBP,iBAAxB;AACAM,UAAAA,UAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,UAAQ,CAACiB,SAAT,GAAqBxB,OAAO,CAACyB,eAA7B;;AAEA,cAAIzB,OAAO,CAAC0B,YAAZ,EAA0B;AACxBnB,YAAAA,UAAQ,CAACmB,YAAT,GAAwB1B,OAAO,CAAC0B,YAAhC;AACD;;AAEDnB,UAAAA,UAAQ,CAACP,OAAT,GAAmB;AACjB4B,YAAAA,KAAK,EAAE5B,OAAO,CAACrB,OAAR,CAAgBiD,KADN;AAEjBC,YAAAA,IAAI,EAAE7B,OAAO,CAACrB,OAAR,CAAgBkD,IAFL;AAGjBf,YAAAA,IAAI,EAAEd,OAAO,CAACrB,OAAR,CAAgBmC;AAHL,WAAnB;;AAMA,UAAA,MAAI,CAAC7H,gBAAL,CAAsB6I,eAAtB,CAAsCvB,UAAtC;;AAEA,cAAIP,OAAO,CAACrB,OAAR,CAAgBkD,IAAhB,KAAyB,MAA7B,EAAqC;AACnC,YAAA,MAAI,CAAC5I,gBAAL,CAAsB8I,YAAtB,CAAmCxB,UAAnC;AACD,WAFD,MAEO,IAAIP,OAAO,CAACrB,OAAR,CAAgBkD,IAAhB,KAAyB,OAA7B,EAAsC;AAC3C,YAAA,MAAI,CAAC5I,gBAAL,CAAsB+I,aAAtB,CAAoCzB,UAApC;AACD,WAFM,MAEA,IAAIP,OAAO,CAACrB,OAAR,CAAgBkD,IAAhB,KAAyB,YAA7B,EAA2C;AAChD,YAAA,MAAI,CAAC5I,gBAAL,CAAsBgJ,kBAAtB,CAAyC1B,UAAzC;AACD;AACF,SAhCM,MAgCA,IAAIP,OAAO,CAACuB,WAAR,KAAwB,CAA5B,EAA+B;AAEpC,cAAIhB,UAAmC,GAAG,EAA1C;AACAA,UAAAA,UAAQ,CAACvF,OAAT,GAAmBA,OAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwBP,iBAAxB;AACAM,UAAAA,UAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,UAAQ,CAACiB,SAAT,GAAqBxB,OAAO,CAACyB,eAA7B;AAEAlB,UAAAA,UAAQ,CAACO,IAAT,GAAgB;AACdoB,YAAAA,gBAAgB,EAAElC,OAAO,CAACrB,OAAR,CAAgBmC,IAAhB,CAAqBoB,gBADzB;AAEdC,YAAAA,eAAe,EAAEnC,OAAO,CAACrB,OAAR,CAAgBmC,IAAhB,CAAqBqB,eAFxB;AAGdN,YAAAA,IAAI,EAAE7B,OAAO,CAACrB,OAAR,CAAgBmC,IAAhB,CAAqBe,IAHb;AAIdZ,YAAAA,IAAI,EAAEjB,OAAO,CAACyB,eAJA;AAKdW,YAAAA,KAAK,EAAEpC,OAAO,CAACrB,OAAR,CAAgBmC,IAAhB,CAAqBsB;AALd,WAAhB;AAQA7B,UAAAA,UAAQ,CAACqB,KAAT,GAAiB5B,OAAO,CAACrB,OAAR,CAAgBiD,KAAjC;;AAEA,UAAA,MAAI,CAAC3I,gBAAL,CAAsBoJ,qBAAtB,CAA4C9B,UAA5C;AACD,SAnBM,MAmBA,IAAIP,OAAO,CAACuB,WAAR,KAAwB,CAA5B,EAA+B;AAEpC,cAAIhB,UAA0B,GAAG,EAAjC;AACAA,UAAAA,UAAQ,CAACvF,OAAT,GAAmBA,OAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwBP,iBAAxB;AACAM,UAAAA,UAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,UAAQ,CAACiB,SAAT,GAAqBxB,OAAO,CAACyB,eAA7B;AAEA,cAAIa,UAAU,GAAGtC,OAAO,CAACrB,OAAzB;;AAEA,cAAI,MAAI,CAACzF,OAAL,CAAaqJ,SAAjB,EAA4B;AAC1B,gBAAMC,gBAAgB,GAAG,MAAI,CAAChJ,OAAL,CAAaiJ,OAAb,CAAqBzC,OAAO,CAACrB,OAA7B,CAAzB;;AAEA,gBAAI,yBAAO6D,gBAAP,MAA4B,QAA5B,IAAwCA,gBAAgB,KAAK,IAAjE,EAAuE;AACrEF,cAAAA,UAAU,GAAGE,gBAAb;AACD;AACF;;AAED,cAAIxC,OAAO,CAAC0B,YAAZ,EAA0B;AACxBnB,YAAAA,UAAQ,CAACmB,YAAT,GAAwB1B,OAAO,CAAC0B,YAAhC;AACD;;AAEDnB,UAAAA,UAAQ,CAACP,OAAT,GAAmBsC,UAAU,CAACtC,OAA9B;AAEAO,UAAAA,UAAQ,CAACmC,IAAT,GAAgB;AACdC,YAAAA,EAAE,EAAEL,UAAU,CAACI,IAAX,CAAgBC,EADN;AAEdC,YAAAA,IAAI,EAAEN,UAAU,CAACI,IAAX,CAAgBE,IAFR;AAGdC,YAAAA,GAAG,EAAE,MAAI,CAACtJ,WAAL,CAAiB;AACpBoJ,cAAAA,EAAE,EAAEL,UAAU,CAACI,IAAX,CAAgBC,EADA;AAEpBC,cAAAA,IAAI,EAAEN,UAAU,CAACI,IAAX,CAAgBE,IAFF;AAGpB5H,cAAAA,OAAO,EAAPA;AAHoB,aAAjB;AAHS,WAAhB;;AAUA,UAAA,MAAI,CAAC/B,gBAAL,CAAsB6J,YAAtB,CAAmCvC,UAAnC;AACD,SAnCM,MAmCA;AACL,cAAIA,UAA6B,GAAG,EAApC;AACAA,UAAAA,UAAQ,CAACvF,OAAT,GAAmB,IAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwB,IAAxB;AAGAD,UAAAA,UAAQ,CAACE,aAAT,GAAyBR,iBAAiB,IAAI,IAArB,GAA4BjF,OAA5B,GAAsC,IAA/D;AACAuF,UAAAA,UAAQ,CAACG,iBAAT,GAA6BT,iBAAiB,IAAI,IAArB,GAA4BA,iBAA5B,GAAgDjF,OAA7E;AAGAuF,UAAAA,UAAQ,CAACvF,OAAT,GAAmBA,OAAnB;AACAuF,UAAAA,UAAQ,CAACC,YAAT,GAAwBP,iBAAxB;AACAM,UAAAA,UAAQ,CAAChF,SAAT,GAAqB2E,eAAe,CAACa,gBAArC;AACAR,UAAAA,UAAQ,CAACiB,SAAT,GAAqBxB,OAAO,CAACyB,eAA7B;;AAEA,cAAIzB,OAAO,CAAC0B,YAAZ,EAA0B;AACxBnB,YAAAA,UAAQ,CAACmB,YAAT,GAAwB1B,OAAO,CAAC0B,YAAhC;AACD;;AAED,cAAI,MAAI,CAACxI,OAAL,CAAaqJ,SAAjB,EAA4B;AAC1BhC,YAAAA,UAAQ,CAACP,OAAT,GAAmB,MAAI,CAACxG,OAAL,CAAaiJ,OAAb,CAAqBzC,OAAO,CAACrB,OAA7B,CAAnB;AACD,WAFD,MAEO;AACL4B,YAAAA,UAAQ,CAACP,OAAT,GAAmBA,OAAO,CAACrB,OAA3B;AACD;;AAED,UAAA,MAAI,CAAC1F,gBAAL,CAAsB8J,eAAtB,CAAsCxC,UAAtC;AACD;AACF,OA1LD;AA4LA,WAAK9D,OAAL,GAAekC,OAAO,CAACY,QAAR,CAAiBf,MAAhC;;AACA,WAAK1B,mBAAL;AACD;;;WAED,8BAAqB;AACnB,UAAI,KAAK2B,cAAT,EAAyB;AACvB,YAAI,OAAO,KAAKA,cAAL,CAAoBuE,KAA3B,KAAqC,UAAzC,EAAqD;AACnD,eAAKvE,cAAL,CAAoBuE,KAApB;AACD;;AACD,aAAKvE,cAAL,GAAsB,IAAtB;AACD;AACF","sourcesContent":["/* @flow */\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport DedupingManager from '../components/deduping_manager';\nimport utils from '../utils';\nimport {\n  MessageActionAnnouncement,\n  MessageAnnouncement,\n  SignalAnnouncement,\n  ObjectAnnouncement,\n  SubscribeEnvelope,\n  StatusAnnouncement,\n  PresenceAnnouncement,\n  FileAnnouncement,\n} from '../flow_interfaces';\nimport categoryConstants from '../constants/categories';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number,\n  withHeartbeats: ?boolean,\n};\n\ntype PresenceArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  connected: boolean,\n};\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n};\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object,\n};\n\ntype SubscriptionManagerConstruct = {\n  leaveEndpoint: Function,\n  subscribeEndpoint: Function,\n  timeEndpoint: Function,\n  heartbeatEndpoint: Function,\n  setStateEndpoint: Function,\n  getFileUrl: ({| id: string, name: string, channel: string |}) => string,\n  config: Config,\n  crypto: Crypto,\n  listenerManager: ListenerManager,\n};\n\nexport default class {\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n\n  _leaveEndpoint: Function;\n  _heartbeatEndpoint: Function;\n  _setStateEndpoint: Function;\n  _subscribeEndpoint: Function;\n  _getFileUrl: ({| id: string, name: string, channel: string |}) => string;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _heartbeatChannels: Object;\n  _heartbeatChannelGroups: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _currentTimetoken: number;\n  _lastTimetoken: number;\n  _storedTimetoken: ?number;\n\n  _region: ?number;\n\n  _subscribeCall: ?Object;\n  _heartbeatTimer: ?number;\n\n  _subscriptionStatusAnnounced: boolean;\n\n  _autoNetworkDetection: boolean;\n  _isOnline: boolean;\n\n  // store pending connection elements\n  _pendingChannelSubscriptions: Array<string>;\n  _pendingChannelGroupSubscriptions: Array<string>;\n  //\n\n  _dedupingManager: DedupingManager;\n\n  constructor({\n    subscribeEndpoint,\n    leaveEndpoint,\n    heartbeatEndpoint,\n    setStateEndpoint,\n    timeEndpoint,\n    getFileUrl,\n    config,\n    crypto,\n    listenerManager,\n  }: SubscriptionManagerConstruct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n\n    this._leaveEndpoint = leaveEndpoint;\n    this._heartbeatEndpoint = heartbeatEndpoint;\n    this._setStateEndpoint = setStateEndpoint;\n    this._subscribeEndpoint = subscribeEndpoint;\n    this._getFileUrl = getFileUrl;\n\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._heartbeatChannels = {};\n    this._heartbeatChannelGroups = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._pendingChannelSubscriptions = [];\n    this._pendingChannelGroupSubscriptions = [];\n\n    this._currentTimetoken = 0;\n    this._lastTimetoken = 0;\n    this._storedTimetoken = null;\n\n    this._subscriptionStatusAnnounced = false;\n\n    this._isOnline = true;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\n    this._dedupingManager = new DedupingManager({ config });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) {\n        this._channelGroups[channelGroup].state = state;\n      }\n    });\n\n    return this._setStateEndpoint({ state, channels, channelGroups }, callback);\n  }\n\n  adaptPresenceChange(args: PresenceArgs) {\n    const { connected, channels = [], channelGroups = [] } = args;\n\n    if (connected) {\n      channels.forEach((channel: string) => {\n        this._heartbeatChannels[channel] = { state: {} };\n      });\n\n      channelGroups.forEach((channelGroup: string) => {\n        this._heartbeatChannelGroups[channelGroup] = { state: {} };\n      });\n    } else {\n      channels.forEach((channel) => {\n        if (channel in this._heartbeatChannels) {\n          delete this._heartbeatChannels[channel];\n        }\n      });\n\n      channelGroups.forEach((channelGroup) => {\n        if (channelGroup in this._heartbeatChannelGroups) {\n          delete this._heartbeatChannelGroups[channelGroup];\n        }\n      });\n\n      if (this._config.suppressLeaveEvents === false) {\n        this._leaveEndpoint({ channels, channelGroups }, (status) => {\n          this._listenerManager.announceStatus(status);\n        });\n      }\n    }\n\n    this.reconnect();\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false, withHeartbeats = false } = args;\n\n    if (!this._config.subscribeKey || this._config.subscribeKey === '') {\n      // eslint-disable-next-line\n      if (console && console.log) {\n        console.log('subscribe key missing; aborting subscribe'); //eslint-disable-line\n      }\n      return;\n    }\n\n    if (timetoken) {\n      this._lastTimetoken = this._currentTimetoken;\n      this._currentTimetoken = timetoken;\n    }\n\n    // reset the current timetoken to get a connect event.\n    // $FlowFixMe\n    if (this._currentTimetoken !== '0' && this._currentTimetoken !== 0) {\n      this._storedTimetoken = this._currentTimetoken;\n      this._currentTimetoken = 0;\n    }\n\n    channels.forEach((channel: string) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n      if (withHeartbeats || this._config.getHeartbeatInterval()) this._heartbeatChannels[channel] = {};\n\n      this._pendingChannelSubscriptions.push(channel);\n    });\n\n    channelGroups.forEach((channelGroup: string) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n      if (withHeartbeats || this._config.getHeartbeatInterval()) this._heartbeatChannelGroups[channelGroup] = {};\n\n      this._pendingChannelGroupSubscriptions.push(channelGroup);\n    });\n\n    this._subscriptionStatusAnnounced = false;\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs, isOffline: boolean) {\n    const { channels = [], channelGroups = [] } = args;\n\n    // keep track of which channels and channel groups\n    // we are going to unsubscribe from.\n    const actualChannels = [];\n    const actualChannelGroups = [];\n    //\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) {\n        delete this._channels[channel];\n        actualChannels.push(channel);\n\n        if (channel in this._heartbeatChannels) {\n          delete this._heartbeatChannels[channel];\n        }\n      }\n      if (channel in this._presenceChannels) {\n        delete this._presenceChannels[channel];\n        actualChannels.push(channel);\n      }\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) {\n        delete this._channelGroups[channelGroup];\n        actualChannelGroups.push(channelGroup);\n\n        if (channelGroup in this._heartbeatChannelGroups) {\n          delete this._heartbeatChannelGroups[channelGroup];\n        }\n      }\n      if (channelGroup in this._presenceChannelGroups) {\n        delete this._channelGroups[channelGroup];\n        actualChannelGroups.push(channelGroup);\n      }\n    });\n\n    // no-op if there are no channels and cg's to unsubscribe from.\n    if (actualChannels.length === 0 && actualChannelGroups.length === 0) {\n      return;\n    }\n\n    if (this._config.suppressLeaveEvents === false && !isOffline) {\n      this._leaveEndpoint({ channels: actualChannels, channelGroups: actualChannelGroups }, (status) => {\n        status.affectedChannels = actualChannels;\n        status.affectedChannelGroups = actualChannelGroups;\n        status.currentTimetoken = this._currentTimetoken;\n        status.lastTimetoken = this._lastTimetoken;\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    // if we have nothing to subscribe to, reset the timetoken.\n    if (\n      Object.keys(this._channels).length === 0 &&\n      Object.keys(this._presenceChannels).length === 0 &&\n      Object.keys(this._channelGroups).length === 0 &&\n      Object.keys(this._presenceChannelGroups).length === 0\n    ) {\n      this._lastTimetoken = 0;\n      this._currentTimetoken = 0;\n      this._storedTimetoken = null;\n      this._region = null;\n      this._reconnectionManager.stopPolling();\n    }\n\n    this.reconnect();\n  }\n\n  unsubscribeAll(isOffline: boolean) {\n    this.adaptUnsubscribeChange(\n      {\n        channels: this.getSubscribedChannels(),\n        channelGroups: this.getSubscribedChannelGroups(),\n      },\n      isOffline\n    );\n  }\n\n  getHeartbeatChannels(): Array<string> {\n    return Object.keys(this._heartbeatChannels);\n  }\n\n  getHeartbeatChannelGroups(): Array<string> {\n    return Object.keys(this._heartbeatChannelGroups);\n  }\n\n  getSubscribedChannels(): Array<string> {\n    return Object.keys(this._channels);\n  }\n\n  getSubscribedChannelGroups(): Array<string> {\n    return Object.keys(this._channelGroups);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n    this._reconnectionManager.stopPolling();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n\n    // if the interval is 0 or undefined, do not queue up heartbeating\n    if (this._config.getHeartbeatInterval() === 0 || this._config.getHeartbeatInterval() === undefined) {\n      return;\n    }\n\n    this._performHeartbeatLoop();\n    // $FlowFixMe\n    this._heartbeatTimer = setInterval(\n      this._performHeartbeatLoop.bind(this),\n      this._config.getHeartbeatInterval() * 1000\n    );\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      // $FlowFixMe\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    const heartbeatChannels = this.getHeartbeatChannels();\n\n    const heartbeatChannelGroups = this.getHeartbeatChannelGroups();\n\n    let presenceState = {};\n\n    if (heartbeatChannels.length === 0 && heartbeatChannelGroups.length === 0) {\n      return;\n    }\n\n    this.getSubscribedChannels().forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (Object.keys(channelState).length) {\n        presenceState[channel] = channelState;\n      }\n    });\n\n    this.getSubscribedChannelGroups().forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n      if (Object.keys(channelGroupState).length) {\n        presenceState[channelGroup] = channelGroupState;\n      }\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (status.error && this._config.autoNetworkDetection && this._isOnline) {\n        this._isOnline = false;\n        this.disconnect();\n        this._listenerManager.announceNetworkDown();\n        this.reconnect();\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._heartbeatEndpoint(\n      {\n        channels: heartbeatChannels,\n        channelGroups: heartbeatChannelGroups,\n        state: presenceState,\n      },\n      onHeartbeat.bind(this)\n    );\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let presenceState = {};\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach((channel) => {\n      let channelState = this._channels[channel].state;\n\n      if (Object.keys(channelState).length) {\n        presenceState[channel] = channelState;\n      }\n\n      channels.push(channel);\n    });\n    Object.keys(this._presenceChannels).forEach((channel) => {\n      channels.push(`${channel}-pnpres`);\n    });\n\n    Object.keys(this._channelGroups).forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n\n      if (Object.keys(channelGroupState).length) {\n        presenceState[channelGroup] = channelGroupState;\n      }\n\n      channelGroups.push(channelGroup);\n    });\n    Object.keys(this._presenceChannelGroups).forEach((channelGroup) => {\n      channelGroups.push(`${channelGroup}-pnpres`);\n    });\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      state: presenceState,\n      timetoken: this._currentTimetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region,\n    };\n\n    this._subscribeCall = this._subscribeEndpoint(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === categoryConstants.PNTimeoutCategory) {\n        this._startSubscribeLoop();\n      } else if (status.category === categoryConstants.PNNetworkIssuesCategory) {\n        // we lost internet connection, alert the reconnection manager and terminate all loops\n        this.disconnect();\n\n        if (status.error && this._config.autoNetworkDetection && this._isOnline) {\n          this._isOnline = false;\n          this._listenerManager.announceNetworkDown();\n        }\n\n        this._reconnectionManager.onReconnection(() => {\n          if (this._config.autoNetworkDetection && !this._isOnline) {\n            this._isOnline = true;\n            this._listenerManager.announceNetworkUp();\n          }\n          this.reconnect();\n          this._subscriptionStatusAnnounced = true;\n          let reconnectedAnnounce: StatusAnnouncement = {\n            category: categoryConstants.PNReconnectedCategory,\n            operation: status.operation,\n            lastTimetoken: this._lastTimetoken,\n            currentTimetoken: this._currentTimetoken,\n          };\n          this._listenerManager.announceStatus(reconnectedAnnounce);\n        });\n\n        this._reconnectionManager.startPolling();\n        this._listenerManager.announceStatus(status);\n      } else if (status.category === categoryConstants.PNBadRequestCategory) {\n        this._stopHeartbeatTimer();\n        this._listenerManager.announceStatus(status);\n      } else {\n        this._listenerManager.announceStatus(status);\n      }\n\n      return;\n    }\n\n    if (this._storedTimetoken) {\n      this._currentTimetoken = this._storedTimetoken;\n      this._storedTimetoken = null;\n    } else {\n      this._lastTimetoken = this._currentTimetoken;\n      this._currentTimetoken = payload.metadata.timetoken;\n    }\n\n    if (!this._subscriptionStatusAnnounced) {\n      let connectedAnnounce: StatusAnnouncement = {};\n      connectedAnnounce.category = categoryConstants.PNConnectedCategory;\n      connectedAnnounce.operation = status.operation;\n      connectedAnnounce.affectedChannels = this._pendingChannelSubscriptions;\n      connectedAnnounce.subscribedChannels = this.getSubscribedChannels();\n      connectedAnnounce.affectedChannelGroups = this._pendingChannelGroupSubscriptions;\n      connectedAnnounce.lastTimetoken = this._lastTimetoken;\n      connectedAnnounce.currentTimetoken = this._currentTimetoken;\n      this._subscriptionStatusAnnounced = true;\n      this._listenerManager.announceStatus(connectedAnnounce);\n\n      // clear the pending connections list\n      this._pendingChannelSubscriptions = [];\n      this._pendingChannelGroupSubscriptions = [];\n    }\n\n    let messages = payload.messages || [];\n    let { requestMessageCountThreshold, dedupeOnSubscribe } = this._config;\n\n    if (requestMessageCountThreshold && messages.length >= requestMessageCountThreshold) {\n      let countAnnouncement: StatusAnnouncement = {};\n      countAnnouncement.category = categoryConstants.PNRequestMessageCountExceededCategory;\n      countAnnouncement.operation = status.operation;\n      this._listenerManager.announceStatus(countAnnouncement);\n    }\n\n    messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (dedupeOnSubscribe) {\n        if (this._dedupingManager.isDuplicate(message)) {\n          return;\n        } else {\n          this._dedupingManager.addEntry(message);\n        }\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = subscriptionMatch != null ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        if (channel) {\n          announce.channel = channel.substring(0, channel.lastIndexOf('-pnpres'));\n        }\n\n        if (subscriptionMatch) {\n          announce.subscription = subscriptionMatch.substring(0, subscriptionMatch.lastIndexOf('-pnpres'));\n        }\n\n        announce.action = message.payload.action;\n        announce.state = message.payload.data;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n\n        if (message.payload.join) {\n          announce.join = message.payload.join;\n        }\n\n        if (message.payload.leave) {\n          announce.leave = message.payload.leave;\n        }\n\n        if (message.payload.timeout) {\n          announce.timeout = message.payload.timeout;\n        }\n\n        this._listenerManager.announcePresence(announce);\n      } else if (message.messageType === 1) {\n        // this is a signal message\n        let announce: SignalAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        if (message.userMetadata) {\n          announce.userMetadata = message.userMetadata;\n        }\n\n        announce.message = message.payload;\n\n        this._listenerManager.announceSignal(announce);\n      } else if (message.messageType === 2) {\n        // this is an object message\n\n        let announce: ObjectAnnouncement = {};\n\n        announce.channel = null;\n        announce.subscription = null;\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        if (message.userMetadata) {\n          announce.userMetadata = message.userMetadata;\n        }\n\n        announce.message = {\n          event: message.payload.event,\n          type: message.payload.type,\n          data: message.payload.data,\n        };\n\n        this._listenerManager.announceObjects(announce);\n\n        if (message.payload.type === 'user') {\n          this._listenerManager.announceUser(announce);\n        } else if (message.payload.type === 'space') {\n          this._listenerManager.announceSpace(announce);\n        } else if (message.payload.type === 'membership') {\n          this._listenerManager.announceMembership(announce);\n        }\n      } else if (message.messageType === 3) {\n        // this is a message action\n        let announce: MessageActionAnnouncement = {};\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        announce.data = {\n          messageTimetoken: message.payload.data.messageTimetoken,\n          actionTimetoken: message.payload.data.actionTimetoken,\n          type: message.payload.data.type,\n          uuid: message.issuingClientId,\n          value: message.payload.data.value,\n        };\n\n        announce.event = message.payload.event;\n\n        this._listenerManager.announceMessageAction(announce);\n      } else if (message.messageType === 4) {\n        // this is a file message\n        let announce: FileAnnouncement = {};\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        let msgPayload = message.payload;\n\n        if (this._config.cipherKey) {\n          const decryptedPayload = this._crypto.decrypt(message.payload);\n\n          if (typeof decryptedPayload === 'object' && decryptedPayload !== null) {\n            msgPayload = decryptedPayload;\n          }\n        }\n\n        if (message.userMetadata) {\n          announce.userMetadata = message.userMetadata;\n        }\n\n        announce.message = msgPayload.message;\n\n        announce.file = {\n          id: msgPayload.file.id,\n          name: msgPayload.file.name,\n          url: this._getFileUrl({\n            id: msgPayload.file.id,\n            name: msgPayload.file.name,\n            channel,\n          }),\n        };\n\n        this._listenerManager.announceFile(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = subscriptionMatch != null ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        if (message.userMetadata) {\n          announce.userMetadata = message.userMetadata;\n        }\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      if (typeof this._subscribeCall.abort === 'function') {\n        this._subscribeCall.abort();\n      }\n      this._subscribeCall = null;\n    }\n  }\n}\n"],"file":"subscription_manager.js"}