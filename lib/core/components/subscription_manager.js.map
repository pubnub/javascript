{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_crypto","_channels","_presenceChannels","_heartbeatChannels","_heartbeatChannelGroups","_channelGroups","_presenceChannelGroups","_pendingChannelSubscriptions","_pendingChannelGroupSubscriptions","_currentTimetoken","_lastTimetoken","_storedTimetoken","_subscriptionStatusAnnounced","_isOnline","_reconnectionManager","ReconnectionManager","_dedupingManager","DedupingManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","connected","suppressLeaveEvents","announceStatus","status","reconnect","timetoken","withPresence","withHeartbeats","subscribeKey","console","log","push","isOffline","actualChannels","actualChannelGroups","length","affectedChannels","affectedChannelGroups","currentTimetoken","lastTimetoken","Object","keys","_region","stopPolling","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","getHeartbeatInterval","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","clearInterval","heartbeatChannels","getHeartbeatChannels","heartbeatChannelGroups","getHeartbeatChannelGroups","presenceState","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","autoNetworkDetection","disconnect","announceNetworkDown","announceSuccessfulHeartbeats","subscribeArgs","filterExpression","region","_subscribeCall","_processSubscribeResponse","payload","category","categoryConstants","PNTimeoutCategory","PNNetworkIssuesCategory","onReconnection","announceNetworkUp","reconnectedAnnounce","PNReconnectedCategory","operation","startPolling","PNBadRequestCategory","metadata","connectedAnnounce","PNConnectedCategory","subscribedChannels","messages","requestMessageCountThreshold","dedupeOnSubscribe","countAnnouncement","PNRequestMessageCountExceededCategory","message","subscriptionMatch","publishMetaData","isDuplicate","addEntry","utils","endsWith","announce","subscription","actualChannel","subscribedChannel","substring","lastIndexOf","action","data","publishTimetoken","occupancy","uuid","timestamp","join","leave","timeout","announcePresence","publisher","issuingClientId","userMetadata","cipherKey","decrypt","announceMessage","abort"],"mappings":"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","file":"subscription_manager.js","sourcesContent":["/* @flow */\r\nimport Crypto from '../components/cryptography';\r\nimport Config from '../components/config';\r\nimport ListenerManager from '../components/listener_manager';\r\nimport ReconnectionManager from '../components/reconnection_manager';\r\nimport DedupingManager from '../components/deduping_manager';\r\nimport utils from '../utils';\r\nimport {\r\n  MessageAnnouncement,\r\n  SubscribeEnvelope,\r\n  StatusAnnouncement,\r\n  PresenceAnnouncement,\r\n} from '../flow_interfaces';\r\nimport categoryConstants from '../constants/categories';\r\n\r\ntype SubscribeArgs = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  withPresence: ?boolean,\r\n  timetoken: ?number,\r\n  withHeartbeats: ?boolean,\r\n};\r\n\r\ntype PresenceArgs = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  connected: boolean,\r\n};\r\n\r\ntype UnsubscribeArgs = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n};\r\n\r\ntype StateArgs = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  state: Object,\r\n};\r\n\r\ntype SubscriptionManagerConstruct = {\r\n  leaveEndpoint: Function,\r\n  subscribeEndpoint: Function,\r\n  timeEndpoint: Function,\r\n  heartbeatEndpoint: Function,\r\n  setStateEndpoint: Function,\r\n  config: Config,\r\n  crypto: Crypto,\r\n  listenerManager: ListenerManager,\r\n};\r\n\r\nexport default class {\r\n  _crypto: Crypto;\r\n  _config: Config;\r\n  _listenerManager: ListenerManager;\r\n  _reconnectionManager: ReconnectionManager;\r\n\r\n  _leaveEndpoint: Function;\r\n  _heartbeatEndpoint: Function;\r\n  _setStateEndpoint: Function;\r\n  _subscribeEndpoint: Function;\r\n\r\n  _channels: Object;\r\n  _presenceChannels: Object;\r\n\r\n  _heartbeatChannels: Object;\r\n  _heartbeatChannelGroups: Object;\r\n\r\n  _channelGroups: Object;\r\n  _presenceChannelGroups: Object;\r\n\r\n  _currentTimetoken: number;\r\n  _lastTimetoken: number;\r\n  _storedTimetoken: ?number;\r\n\r\n  _region: ?number;\r\n\r\n  _subscribeCall: ?Object;\r\n  _heartbeatTimer: ?number;\r\n\r\n  _subscriptionStatusAnnounced: boolean;\r\n\r\n  _autoNetworkDetection: boolean;\r\n  _isOnline: boolean;\r\n\r\n  // store pending connection elements\r\n  _pendingChannelSubscriptions: Array<string>;\r\n  _pendingChannelGroupSubscriptions: Array<string>;\r\n  //\r\n\r\n  _dedupingManager: DedupingManager;\r\n\r\n  constructor({\r\n    subscribeEndpoint,\r\n    leaveEndpoint,\r\n    heartbeatEndpoint,\r\n    setStateEndpoint,\r\n    timeEndpoint,\r\n    config,\r\n    crypto,\r\n    listenerManager,\r\n  }: SubscriptionManagerConstruct) {\r\n    this._listenerManager = listenerManager;\r\n    this._config = config;\r\n\r\n    this._leaveEndpoint = leaveEndpoint;\r\n    this._heartbeatEndpoint = heartbeatEndpoint;\r\n    this._setStateEndpoint = setStateEndpoint;\r\n    this._subscribeEndpoint = subscribeEndpoint;\r\n\r\n    this._crypto = crypto;\r\n\r\n    this._channels = {};\r\n    this._presenceChannels = {};\r\n\r\n    this._heartbeatChannels = {};\r\n    this._heartbeatChannelGroups = {};\r\n\r\n    this._channelGroups = {};\r\n    this._presenceChannelGroups = {};\r\n\r\n    this._pendingChannelSubscriptions = [];\r\n    this._pendingChannelGroupSubscriptions = [];\r\n\r\n    this._currentTimetoken = 0;\r\n    this._lastTimetoken = 0;\r\n    this._storedTimetoken = null;\r\n\r\n    this._subscriptionStatusAnnounced = false;\r\n\r\n    this._isOnline = true;\r\n\r\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\r\n    this._dedupingManager = new DedupingManager({ config });\r\n  }\r\n\r\n  adaptStateChange(args: StateArgs, callback: Function) {\r\n    const { state, channels = [], channelGroups = [] } = args;\r\n\r\n    channels.forEach(channel => {\r\n      if (channel in this._channels) this._channels[channel].state = state;\r\n    });\r\n\r\n    channelGroups.forEach(channelGroup => {\r\n      if (channelGroup in this._channelGroups) {\r\n        this._channelGroups[channelGroup].state = state;\r\n      }\r\n    });\r\n\r\n    return this._setStateEndpoint({ state, channels, channelGroups }, callback);\r\n  }\r\n\r\n  adaptPresenceChange(args: PresenceArgs) {\r\n    const { connected, channels = [], channelGroups = [] } = args;\r\n\r\n    if (connected) {\r\n      channels.forEach((channel: string) => {\r\n        this._heartbeatChannels[channel] = { state: {} };\r\n      });\r\n\r\n      channelGroups.forEach((channelGroup: string) => {\r\n        this._heartbeatChannelGroups[channelGroup] = { state: {} };\r\n      });\r\n    } else {\r\n      channels.forEach(channel => {\r\n        if (channel in this._heartbeatChannels) {\r\n          delete this._heartbeatChannels[channel];\r\n        }\r\n      });\r\n\r\n      channelGroups.forEach(channelGroup => {\r\n        if (channelGroup in this._heartbeatChannelGroups) {\r\n          delete this._heartbeatChannelGroups[channelGroup];\r\n        }\r\n      });\r\n\r\n      if (this._config.suppressLeaveEvents === false) {\r\n        this._leaveEndpoint({ channels, channelGroups }, status => {\r\n          this._listenerManager.announceStatus(status);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.reconnect();\r\n  }\r\n\r\n  adaptSubscribeChange(args: SubscribeArgs) {\r\n    const {\r\n      timetoken,\r\n      channels = [],\r\n      channelGroups = [],\r\n      withPresence = false,\r\n      withHeartbeats = false,\r\n    } = args;\r\n\r\n    if (!this._config.subscribeKey || this._config.subscribeKey === '') {\r\n      // eslint-disable-next-line\r\n      if (console && console.log) {\r\n        console.log('subscribe key missing; aborting subscribe'); //eslint-disable-line\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (timetoken) {\r\n      this._lastTimetoken = this._currentTimetoken;\r\n      this._currentTimetoken = timetoken;\r\n    }\r\n\r\n    // reset the current timetoken to get a connect event.\r\n    if (this._currentTimetoken !== '0' && this._currentTimetoken !== 0) {\r\n      this._storedTimetoken = this._currentTimetoken;\r\n      this._currentTimetoken = 0;\r\n    }\r\n\r\n    channels.forEach((channel: string) => {\r\n      this._channels[channel] = { state: {} };\r\n      if (withPresence) this._presenceChannels[channel] = {};\r\n      if (withHeartbeats) this._heartbeatChannels[channel] = {};\r\n\r\n      this._pendingChannelSubscriptions.push(channel);\r\n    });\r\n\r\n    channelGroups.forEach((channelGroup: string) => {\r\n      this._channelGroups[channelGroup] = { state: {} };\r\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\r\n      if (withHeartbeats) this._heartbeatChannelGroups[channelGroup] = {};\r\n\r\n      this._pendingChannelGroupSubscriptions.push(channelGroup);\r\n    });\r\n\r\n    this._subscriptionStatusAnnounced = false;\r\n    this.reconnect();\r\n  }\r\n\r\n  adaptUnsubscribeChange(args: UnsubscribeArgs, isOffline: boolean) {\r\n    const { channels = [], channelGroups = [] } = args;\r\n\r\n    // keep track of which channels and channel groups\r\n    // we are going to unsubscribe from.\r\n    const actualChannels = [];\r\n    const actualChannelGroups = [];\r\n    //\r\n\r\n    channels.forEach(channel => {\r\n      if (channel in this._channels) {\r\n        delete this._channels[channel];\r\n        actualChannels.push(channel);\r\n\r\n        if (channel in this._heartbeatChannels) {\r\n          delete this._heartbeatChannels[channel];\r\n        }\r\n      }\r\n      if (channel in this._presenceChannels) {\r\n        delete this._presenceChannels[channel];\r\n        actualChannels.push(channel);\r\n      }\r\n    });\r\n\r\n    channelGroups.forEach(channelGroup => {\r\n      if (channelGroup in this._channelGroups) {\r\n        delete this._channelGroups[channelGroup];\r\n        actualChannelGroups.push(channelGroup);\r\n\r\n        if (channelGroup in this._heartbeatChannelGroups) {\r\n          delete this._heartbeatChannelGroups[channelGroup];\r\n        }\r\n      }\r\n      if (channelGroup in this._presenceChannelGroups) {\r\n        delete this._channelGroups[channelGroup];\r\n        actualChannelGroups.push(channelGroup);\r\n      }\r\n    });\r\n\r\n    // no-op if there are no channels and cg's to unsubscribe from.\r\n    if (actualChannels.length === 0 && actualChannelGroups.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this._config.suppressLeaveEvents === false && !isOffline) {\r\n      this._leaveEndpoint(\r\n        { channels: actualChannels, channelGroups: actualChannelGroups },\r\n        status => {\r\n          status.affectedChannels = actualChannels;\r\n          status.affectedChannelGroups = actualChannelGroups;\r\n          status.currentTimetoken = this._currentTimetoken;\r\n          status.lastTimetoken = this._lastTimetoken;\r\n          this._listenerManager.announceStatus(status);\r\n        }\r\n      );\r\n    }\r\n\r\n    // if we have nothing to subscribe to, reset the timetoken.\r\n    if (\r\n      Object.keys(this._channels).length === 0 &&\r\n      Object.keys(this._presenceChannels).length === 0 &&\r\n      Object.keys(this._channelGroups).length === 0 &&\r\n      Object.keys(this._presenceChannelGroups).length === 0\r\n    ) {\r\n      this._lastTimetoken = 0;\r\n      this._currentTimetoken = 0;\r\n      this._storedTimetoken = null;\r\n      this._region = null;\r\n      this._reconnectionManager.stopPolling();\r\n    }\r\n\r\n    this.reconnect();\r\n  }\r\n\r\n  unsubscribeAll(isOffline: boolean) {\r\n    this.adaptUnsubscribeChange(\r\n      {\r\n        channels: this.getSubscribedChannels(),\r\n        channelGroups: this.getSubscribedChannelGroups(),\r\n      },\r\n      isOffline\r\n    );\r\n  }\r\n\r\n  getHeartbeatChannels(): Array<string> {\r\n    return Object.keys(this._heartbeatChannels);\r\n  }\r\n\r\n  getHeartbeatChannelGroups(): Array<string> {\r\n    return Object.keys(this._heartbeatChannelGroups);\r\n  }\r\n\r\n  getSubscribedChannels(): Array<string> {\r\n    return Object.keys(this._channels);\r\n  }\r\n\r\n  getSubscribedChannelGroups(): Array<string> {\r\n    return Object.keys(this._channelGroups);\r\n  }\r\n\r\n  reconnect() {\r\n    this._startSubscribeLoop();\r\n    this._registerHeartbeatTimer();\r\n  }\r\n\r\n  disconnect() {\r\n    this._stopSubscribeLoop();\r\n    this._stopHeartbeatTimer();\r\n    this._reconnectionManager.stopPolling();\r\n  }\r\n\r\n  _registerHeartbeatTimer() {\r\n    this._stopHeartbeatTimer();\r\n\r\n    // if the interval is 0, do not queue up heartbeating\r\n    if (this._config.getHeartbeatInterval() === 0) {\r\n      return;\r\n    }\r\n\r\n    this._performHeartbeatLoop();\r\n    this._heartbeatTimer = setInterval(\r\n      this._performHeartbeatLoop.bind(this),\r\n      this._config.getHeartbeatInterval() * 1000\r\n    );\r\n  }\r\n\r\n  _stopHeartbeatTimer() {\r\n    if (this._heartbeatTimer) {\r\n      clearInterval(this._heartbeatTimer);\r\n      this._heartbeatTimer = null;\r\n    }\r\n  }\r\n\r\n  _performHeartbeatLoop() {\r\n    const heartbeatChannels = this.getHeartbeatChannels();\r\n\r\n    const heartbeatChannelGroups = this.getHeartbeatChannelGroups();\r\n\r\n    let presenceState = {};\r\n\r\n    if (heartbeatChannels.length === 0 && heartbeatChannelGroups.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.getSubscribedChannels().forEach(channel => {\r\n      let channelState = this._channels[channel].state;\r\n      if (Object.keys(channelState).length) {\r\n        presenceState[channel] = channelState;\r\n      }\r\n    });\r\n\r\n    this.getSubscribedChannelGroups().forEach(channelGroup => {\r\n      let channelGroupState = this._channelGroups[channelGroup].state;\r\n      if (Object.keys(channelGroupState).length) {\r\n        presenceState[channelGroup] = channelGroupState;\r\n      }\r\n    });\r\n\r\n    let onHeartbeat = (status: StatusAnnouncement) => {\r\n      if (status.error && this._config.announceFailedHeartbeats) {\r\n        this._listenerManager.announceStatus(status);\r\n      }\r\n\r\n      if (status.error && this._config.autoNetworkDetection && this._isOnline) {\r\n        this._isOnline = false;\r\n        this.disconnect();\r\n        this._listenerManager.announceNetworkDown();\r\n        this.reconnect();\r\n      }\r\n\r\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\r\n        this._listenerManager.announceStatus(status);\r\n      }\r\n    };\r\n\r\n    this._heartbeatEndpoint(\r\n      {\r\n        channels: heartbeatChannels,\r\n        channelGroups: heartbeatChannelGroups,\r\n        state: presenceState,\r\n      },\r\n      onHeartbeat.bind(this)\r\n    );\r\n  }\r\n\r\n  _startSubscribeLoop() {\r\n    this._stopSubscribeLoop();\r\n    let presenceState = {};\r\n    let channels = [];\r\n    let channelGroups = [];\r\n\r\n    Object.keys(this._channels).forEach(channel => {\r\n      let channelState = this._channels[channel].state;\r\n\r\n      if (Object.keys(channelState).length) {\r\n        presenceState[channel] = channelState;\r\n      }\r\n\r\n      channels.push(channel);\r\n    });\r\n    Object.keys(this._presenceChannels).forEach(channel => {\r\n      channels.push(`${channel}-pnpres`);\r\n    });\r\n\r\n    Object.keys(this._channelGroups).forEach(channelGroup => {\r\n      let channelGroupState = this._channelGroups[channelGroup].state;\r\n\r\n      if (Object.keys(channelGroupState).length) {\r\n        presenceState[channelGroup] = channelGroupState;\r\n      }\r\n\r\n      channelGroups.push(channelGroup);\r\n    });\r\n    Object.keys(this._presenceChannelGroups).forEach(channelGroup => {\r\n      channelGroups.push(`${channelGroup}-pnpres`);\r\n    });\r\n\r\n    if (channels.length === 0 && channelGroups.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const subscribeArgs = {\r\n      channels,\r\n      channelGroups,\r\n      state: presenceState,\r\n      timetoken: this._currentTimetoken,\r\n      filterExpression: this._config.filterExpression,\r\n      region: this._region,\r\n    };\r\n\r\n    this._subscribeCall = this._subscribeEndpoint(\r\n      subscribeArgs,\r\n      this._processSubscribeResponse.bind(this)\r\n    );\r\n  }\r\n\r\n  _processSubscribeResponse(\r\n    status: StatusAnnouncement,\r\n    payload: SubscribeEnvelope\r\n  ) {\r\n    if (status.error) {\r\n      // if we timeout from server, restart the loop.\r\n      if (status.category === categoryConstants.PNTimeoutCategory) {\r\n        this._startSubscribeLoop();\r\n      } else if (\r\n        status.category === categoryConstants.PNNetworkIssuesCategory\r\n      ) {\r\n        // we lost internet connection, alert the reconnection manager and terminate all loops\r\n        this.disconnect();\r\n\r\n        if (\r\n          status.error &&\r\n          this._config.autoNetworkDetection &&\r\n          this._isOnline\r\n        ) {\r\n          this._isOnline = false;\r\n          this._listenerManager.announceNetworkDown();\r\n        }\r\n\r\n        this._reconnectionManager.onReconnection(() => {\r\n          if (this._config.autoNetworkDetection && !this._isOnline) {\r\n            this._isOnline = true;\r\n            this._listenerManager.announceNetworkUp();\r\n          }\r\n          this.reconnect();\r\n          this._subscriptionStatusAnnounced = true;\r\n          let reconnectedAnnounce: StatusAnnouncement = {\r\n            category: categoryConstants.PNReconnectedCategory,\r\n            operation: status.operation,\r\n            lastTimetoken: this._lastTimetoken,\r\n            currentTimetoken: this._currentTimetoken,\r\n          };\r\n          this._listenerManager.announceStatus(reconnectedAnnounce);\r\n        });\r\n\r\n        this._reconnectionManager.startPolling();\r\n        this._listenerManager.announceStatus(status);\r\n      } else if (status.category === categoryConstants.PNBadRequestCategory) {\r\n        this._stopHeartbeatTimer();\r\n        this._listenerManager.announceStatus(status);\r\n      } else {\r\n        this._listenerManager.announceStatus(status);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (this._storedTimetoken) {\r\n      this._currentTimetoken = this._storedTimetoken;\r\n      this._storedTimetoken = null;\r\n    } else {\r\n      this._lastTimetoken = this._currentTimetoken;\r\n      this._currentTimetoken = payload.metadata.timetoken;\r\n    }\r\n\r\n    if (!this._subscriptionStatusAnnounced) {\r\n      let connectedAnnounce: StatusAnnouncement = {};\r\n      connectedAnnounce.category = categoryConstants.PNConnectedCategory;\r\n      connectedAnnounce.operation = status.operation;\r\n      connectedAnnounce.affectedChannels = this._pendingChannelSubscriptions;\r\n      connectedAnnounce.subscribedChannels = this.getSubscribedChannels();\r\n      connectedAnnounce.affectedChannelGroups = this._pendingChannelGroupSubscriptions;\r\n      connectedAnnounce.lastTimetoken = this._lastTimetoken;\r\n      connectedAnnounce.currentTimetoken = this._currentTimetoken;\r\n      this._subscriptionStatusAnnounced = true;\r\n      this._listenerManager.announceStatus(connectedAnnounce);\r\n\r\n      // clear the pending connections list\r\n      this._pendingChannelSubscriptions = [];\r\n      this._pendingChannelGroupSubscriptions = [];\r\n    }\r\n\r\n    let messages = payload.messages || [];\r\n    let { requestMessageCountThreshold, dedupeOnSubscribe } = this._config;\r\n\r\n    if (\r\n      requestMessageCountThreshold &&\r\n      messages.length >= requestMessageCountThreshold\r\n    ) {\r\n      let countAnnouncement: StatusAnnouncement = {};\r\n      countAnnouncement.category =\r\n        categoryConstants.PNRequestMessageCountExceededCategory;\r\n      countAnnouncement.operation = status.operation;\r\n      this._listenerManager.announceStatus(countAnnouncement);\r\n    }\r\n\r\n    messages.forEach(message => {\r\n      let channel = message.channel;\r\n      let subscriptionMatch = message.subscriptionMatch;\r\n      let publishMetaData = message.publishMetaData;\r\n\r\n      if (channel === subscriptionMatch) {\r\n        subscriptionMatch = null;\r\n      }\r\n\r\n      if (dedupeOnSubscribe) {\r\n        if (this._dedupingManager.isDuplicate(message)) {\r\n          return;\r\n        } else {\r\n          this._dedupingManager.addEntry(message);\r\n        }\r\n      }\r\n\r\n      if (utils.endsWith(message.channel, '-pnpres')) {\r\n        let announce: PresenceAnnouncement = {};\r\n        announce.channel = null;\r\n        announce.subscription = null;\r\n\r\n        // deprecated -->\r\n        announce.actualChannel = subscriptionMatch != null ? channel : null;\r\n        announce.subscribedChannel =\r\n          subscriptionMatch != null ? subscriptionMatch : channel;\r\n        // <-- deprecated\r\n\r\n        if (channel) {\r\n          announce.channel = channel.substring(\r\n            0,\r\n            channel.lastIndexOf('-pnpres')\r\n          );\r\n        }\r\n\r\n        if (subscriptionMatch) {\r\n          announce.subscription = subscriptionMatch.substring(\r\n            0,\r\n            subscriptionMatch.lastIndexOf('-pnpres')\r\n          );\r\n        }\r\n\r\n        announce.action = message.payload.action;\r\n        announce.state = message.payload.data;\r\n        announce.timetoken = publishMetaData.publishTimetoken;\r\n        announce.occupancy = message.payload.occupancy;\r\n        announce.uuid = message.payload.uuid;\r\n        announce.timestamp = message.payload.timestamp;\r\n\r\n        if (message.payload.join) {\r\n          announce.join = message.payload.join;\r\n        }\r\n\r\n        if (message.payload.leave) {\r\n          announce.leave = message.payload.leave;\r\n        }\r\n\r\n        if (message.payload.timeout) {\r\n          announce.timeout = message.payload.timeout;\r\n        }\r\n\r\n        this._listenerManager.announcePresence(announce);\r\n      } else {\r\n        let announce: MessageAnnouncement = {};\r\n        announce.channel = null;\r\n        announce.subscription = null;\r\n\r\n        // deprecated -->\r\n        announce.actualChannel = subscriptionMatch != null ? channel : null;\r\n        announce.subscribedChannel =\r\n          subscriptionMatch != null ? subscriptionMatch : channel;\r\n        // <-- deprecated\r\n\r\n        announce.channel = channel;\r\n        announce.subscription = subscriptionMatch;\r\n        announce.timetoken = publishMetaData.publishTimetoken;\r\n        announce.publisher = message.issuingClientId;\r\n\r\n        if (message.userMetadata) {\r\n          announce.userMetadata = message.userMetadata;\r\n        }\r\n\r\n        if (this._config.cipherKey) {\r\n          announce.message = this._crypto.decrypt(message.payload);\r\n        } else {\r\n          announce.message = message.payload;\r\n        }\r\n\r\n        this._listenerManager.announceMessage(announce);\r\n      }\r\n    });\r\n\r\n    this._region = payload.metadata.region;\r\n    this._startSubscribeLoop();\r\n  }\r\n\r\n  _stopSubscribeLoop() {\r\n    if (this._subscribeCall) {\r\n      if (typeof this._subscribeCall.abort === 'function') {\r\n        this._subscribeCall.abort();\r\n      }\r\n      this._subscribeCall = null;\r\n    }\r\n  }\r\n}\r\n"]}