{"version":3,"sources":["core/components/config.js"],"names":["PRESENCE_TIMEOUT_MINIMUM","PRESENCE_TIMEOUT_DEFAULT","makeDefaultOrigins","Array","from","length","_","i","setup","db","_PNSDKSuffix","_db","instanceId","uuidGenerator","createUUID","secretKey","secret_key","subscribeKey","subscribe_key","publishKey","publish_key","sdkName","sdkFamily","partnerId","setAuthKey","authKey","setCipherKey","cipherKey","setFilterExpression","filterExpression","origin","isArray","undefined","Error","secure","ssl","restore","proxy","keepAlive","keepAliveSettings","autoNetworkDetection","dedupeOnSubscribe","maximumCacheSize","customEncrypt","customDecrypt","fileUploadPublishRetryLimit","useRandomIVs","location","protocol","logVerbosity","suppressLeaveEvents","announceFailedHeartbeats","announceSuccessfulHeartbeats","useInstanceId","useRequestId","requestMessageCountThreshold","setTransactionTimeout","transactionalRequestTimeout","setSubscribeTimeout","subscribeRequestTimeout","setSendBeaconConfig","useSendBeacon","presenceTimeout","setPresenceTimeout","_presenceTimeout","heartbeatInterval","setHeartbeatInterval","setUUID","_decideUUID","uuid","val","UUID","set","console","log","_heartbeatInterval","_subscribeRequestTimeout","_transactionalRequestTimeout","_useSendBeacon","name","suffix","separator","Object","keys","reduce","result","key","providedUUID","get"],"mappings":";;;;;;;;;;;;;;;AAGA;;AACA;;AAEA,IAAMA,wBAAgC,GAAG,EAAzC;AACA,IAAMC,wBAAgC,GAAG,GAAzC;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAMC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAX,EAA2B,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAeA,CAAC,GAAG,CAAnB;AAAA,GAA3B,CAAN;AAAA,CAA3B;;;AA0IE,0BAAgD;AAAA;;AAAA,QAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,QAA3BC,EAA2B,QAA3BA,EAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9C,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,GAAL,GAAWF,EAAX;AAEA,SAAKG,UAAL,gBAAwBC,iBAAcC,UAAd,EAAxB;AACA,SAAKC,SAAL,GAAiBP,KAAK,CAACO,SAAN,IAAmBP,KAAK,CAACQ,UAA1C;AACA,SAAKC,YAAL,GAAoBT,KAAK,CAACS,YAAN,IAAsBT,KAAK,CAACU,aAAhD;AACA,SAAKC,UAAL,GAAkBX,KAAK,CAACW,UAAN,IAAoBX,KAAK,CAACY,WAA5C;AACA,SAAKC,OAAL,GAAeb,KAAK,CAACa,OAArB;AACA,SAAKC,SAAL,GAAiBd,KAAK,CAACc,SAAvB;AACA,SAAKC,SAAL,GAAiBf,KAAK,CAACe,SAAvB;AACA,SAAKC,UAAL,CAAgBhB,KAAK,CAACiB,OAAtB;AACA,SAAKC,YAAL,CAAkBlB,KAAK,CAACmB,SAAxB;AAEA,SAAKC,mBAAL,CAAyBpB,KAAK,CAACqB,gBAA/B;;AAEA,QAAI,OAAOrB,KAAK,CAACsB,MAAb,KAAwB,QAAxB,IAAoC,CAAC3B,KAAK,CAAC4B,OAAN,CAAcvB,KAAK,CAACsB,MAApB,CAArC,IAAoEtB,KAAK,CAACsB,MAAN,KAAiBE,SAAzF,EAAoG;AAClG,YAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,SAAKH,MAAL,GAActB,KAAK,CAACsB,MAAN,IAAgB5B,kBAAkB,EAAhD;AACA,SAAKgC,MAAL,GAAc1B,KAAK,CAAC2B,GAAN,IAAa,KAA3B;AACA,SAAKC,OAAL,GAAe5B,KAAK,CAAC4B,OAAN,IAAiB,KAAhC;AACA,SAAKC,KAAL,GAAa7B,KAAK,CAAC6B,KAAnB;AACA,SAAKC,SAAL,GAAiB9B,KAAK,CAAC8B,SAAvB;AACA,SAAKC,iBAAL,GAAyB/B,KAAK,CAAC+B,iBAA/B;AACA,SAAKC,oBAAL,GAA4BhC,KAAK,CAACgC,oBAAN,IAA8B,KAA1D;AAEA,SAAKC,iBAAL,GAAyBjC,KAAK,CAACiC,iBAAN,IAA2B,KAApD;AACA,SAAKC,gBAAL,GAAwBlC,KAAK,CAACkC,gBAAN,IAA0B,GAAlD;AAEA,SAAKC,aAAL,GAAqBnC,KAAK,CAACmC,aAA3B;AACA,SAAKC,aAAL,GAAqBpC,KAAK,CAACoC,aAA3B;AAEA,SAAKC,2BAAL,4BAAmCrC,KAAK,CAACqC,2BAAzC,yEAAwE,CAAxE;AACA,SAAKC,YAAL,0BAAoBtC,KAAK,CAACsC,YAA1B,qEAA0C,IAA1C;;AAGA,QAAI,OAAOC,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACC,QAAT,KAAsB,QAA7D,EAAuE;AACrE,WAAKd,MAAL,GAAc,IAAd;AACD;;AAED,SAAKe,YAAL,GAAoBzC,KAAK,CAACyC,YAAN,IAAsB,KAA1C;AACA,SAAKC,mBAAL,GAA2B1C,KAAK,CAAC0C,mBAAN,IAA6B,KAAxD;AAEA,SAAKC,wBAAL,GAAgC3C,KAAK,CAAC2C,wBAAN,IAAkC,IAAlE;AACA,SAAKC,4BAAL,GAAoC5C,KAAK,CAAC4C,4BAAN,IAAsC,KAA1E;AAEA,SAAKC,aAAL,GAAqB7C,KAAK,CAAC6C,aAAN,IAAuB,KAA5C;AACA,SAAKC,YAAL,GAAoB9C,KAAK,CAAC8C,YAAN,IAAsB,KAA1C;AAEA,SAAKC,4BAAL,GAAoC/C,KAAK,CAAC+C,4BAA1C;AAGA,SAAKC,qBAAL,CAA2BhD,KAAK,CAACiD,2BAAN,IAAqC,KAAK,IAArE;AAEA,SAAKC,mBAAL,CAAyBlD,KAAK,CAACmD,uBAAN,IAAiC,MAAM,IAAhE;AAEA,SAAKC,mBAAL,CAAyBpD,KAAK,CAACqD,aAAN,IAAuB,IAAhD;;AAEA,QAAIrD,KAAK,CAACsD,eAAV,EAA2B;AACzB,WAAKC,kBAAL,CAAwBvD,KAAK,CAACsD,eAA9B;AACD,KAFD,MAEO;AACL,WAAKE,gBAAL,GAAwB/D,wBAAxB;AACD;;AAED,QAAIO,KAAK,CAACyD,iBAAN,IAA2B,IAA/B,EAAqC;AACnC,WAAKC,oBAAL,CAA0B1D,KAAK,CAACyD,iBAAhC;AACD;;AAED,SAAKE,OAAL,CAAa,KAAKC,WAAL,CAAiB5D,KAAK,CAAC6D,IAAvB,CAAb;AACD;;;;WAGD,sBAAqB;AACnB,aAAO,KAAK5C,OAAZ;AACD;;;WAED,oBAAW6C,GAAX,EAA8B;AAC5B,WAAK7C,OAAL,GAAe6C,GAAf;AACA,aAAO,IAAP;AACD;;;WAED,sBAAaA,GAAb,EAAgC;AAC9B,WAAK3C,SAAL,GAAiB2C,GAAjB;AACA,aAAO,IAAP;AACD;;;WAED,mBAAkB;AAChB,aAAO,KAAKC,IAAZ;AACD;;;WAED,iBAAQD,GAAR,EAA2B;AACzB,UAAI,KAAK3D,GAAL,IAAY,KAAKA,GAAL,CAAS6D,GAAzB,EAA8B,KAAK7D,GAAL,CAAS6D,GAAT,WAAgB,KAAKvD,YAArB,WAAyCqD,GAAzC;AAC9B,WAAKC,IAAL,GAAYD,GAAZ;AACA,aAAO,IAAP;AACD;;;WAED,+BAA8B;AAC5B,aAAO,KAAKzC,gBAAZ;AACD;;;WAED,6BAAoByC,GAApB,EAAuC;AACrC,WAAKzC,gBAAL,GAAwByC,GAAxB;AACA,aAAO,IAAP;AACD;;;WAED,8BAA6B;AAC3B,aAAO,KAAKN,gBAAZ;AACD;;;WAED,4BAAmBM,GAAnB,EAAsC;AACpC,UAAIA,GAAG,IAAItE,wBAAX,EAAqC;AACnC,aAAKgE,gBAAL,GAAwBM,GAAxB;AACD,OAFD,MAEO;AACL,aAAKN,gBAAL,GAAwBhE,wBAAxB;AAGAyE,QAAAA,OAAO,CAACC,GAAR,CAAY,2EAAZ,EAAyF,KAAKV,gBAA9F;AACD;;AAED,WAAKE,oBAAL,CAA0B,KAAKF,gBAAL,GAAwB,CAAxB,GAA4B,CAAtD;AAEA,aAAO,IAAP;AACD;;;WAED,kBAAS3B,KAAT,EAA6B;AAC3B,WAAKA,KAAL,GAAaA,KAAb;AACD;;;WAED,gCAA+B;AAC7B,aAAO,KAAKsC,kBAAZ;AACD;;;WAED,8BAAqBL,GAArB,EAAwC;AACtC,WAAKK,kBAAL,GAA0BL,GAA1B;AACA,aAAO,IAAP;AACD;;;WAGD,+BAA8B;AAC5B,aAAO,KAAKM,wBAAZ;AACD;;;WAED,6BAAoBN,GAApB,EAAuC;AACrC,WAAKM,wBAAL,GAAgCN,GAAhC;AACA,aAAO,IAAP;AACD;;;WAED,iCAAgC;AAC9B,aAAO,KAAKO,4BAAZ;AACD;;;WAED,+BAAsBP,GAAtB,EAAyC;AACvC,WAAKO,4BAAL,GAAoCP,GAApC;AACA,aAAO,IAAP;AACD;;;WAED,+BAA+B;AAC7B,aAAO,KAAKQ,cAAZ;AACD;;;WAED,6BAAoBR,GAApB,EAAwC;AACtC,WAAKQ,cAAL,GAAsBR,GAAtB;AACA,aAAO,IAAP;AACD;;;WAED,sBAAqB;AACnB,aAAO,QAAP;AACD;;;WAED,yBAAgBS,IAAhB,EAA8BC,MAA9B,EAA8C;AAC5C,WAAKtE,YAAL,CAAkBqE,IAAlB,IAA0BC,MAA1B;AACD;;;WAED,yBAAgBC,SAAhB,EAA2C;AAAA;;AACzC,aAAOC,MAAM,CAACC,IAAP,CAAY,KAAKzE,YAAjB,EAA+B0E,MAA/B,CAAsC,UAACC,MAAD,EAASC,GAAT;AAAA,eAAiBD,MAAM,GAAGJ,SAAT,GAAqB,KAAI,CAACvE,YAAL,CAAkB4E,GAAlB,CAAtC;AAAA,OAAtC,EAAoG,EAApG,CAAP;AACD;;;WAED,qBAAYC,YAAZ,EAA0C;AAExC,UAAIA,YAAJ,EAAkB;AAChB,eAAOA,YAAP;AACD;;AAGD,UAAI,KAAK5E,GAAL,IAAY,KAAKA,GAAL,CAAS6E,GAArB,IAA4B,KAAK7E,GAAL,CAAS6E,GAAT,WAAgB,KAAKvE,YAArB,UAAhC,EAA0E;AACxE,eAAO,KAAKN,GAAL,CAAS6E,GAAT,WAAgB,KAAKvE,YAArB,UAAP;AACD;;AAGD,0BAAaJ,iBAAcC,UAAd,EAAb;AACD","sourcesContent":["/* @flow */\n/* global location */\n\nimport uuidGenerator from './uuid';\nimport { InternalSetupStruct, DatabaseInterface, KeepAliveStruct, ProxyStruct } from '../flow_interfaces';\n\nconst PRESENCE_TIMEOUT_MINIMUM: number = 20;\nconst PRESENCE_TIMEOUT_DEFAULT: number = 300;\n\nconst makeDefaultOrigins = () => Array.from({ length: 20 }, (_, i) => `ps${i + 1}.pndsn.com`);\n\ntype ConfigConstructArgs = {\n  setup: InternalSetupStruct,\n  db: DatabaseInterface,\n};\n\nexport default class {\n  _db: DatabaseInterface;\n\n  subscribeKey: string;\n  publishKey: string;\n  secretKey: string;\n  cipherKey: string;\n  authKey: string;\n  UUID: string;\n\n  proxy: ProxyStruct;\n\n  /*\n    if _useInstanceId is true, this instanceId will be added to all requests\n  */\n  instanceId: string;\n\n  /*\n    If the SDK is running as part of another SDK built atop of it, allow a custom pnsdk with name and version.\n   */\n  sdkName: string;\n\n  /*\n    keep track of the SDK family for identifier generator\n  */\n  sdkFamily: string;\n\n  /*\n    If the SDK is operated by a partner, allow a custom pnsdk item for them.\n  */\n  partnerId: string;\n\n  /*\n    filter expression to pass along when subscribing.\n  */\n  filterExpression: string;\n  /*\n    configuration to supress leave events; when a presence leave is performed\n    this configuration will disallow the leave event from happening\n  */\n  suppressLeaveEvents: boolean;\n\n  /*\n    use SSL for http requests?\n  */\n  secure: boolean;\n\n  // Custom optional origin.\n  origin: string | string[];\n\n  // log verbosity: true to output lots of info\n  logVerbosity: boolean;\n\n  // if instanceId config is true, the SDK will pass the unique instance identifier to the server as instanceId=<UUID>\n  useInstanceId: boolean;\n\n  // if requestId config is true, the SDK will pass a unique request identifier with each request as request_id=<UUID>\n  useRequestId: boolean;\n\n  // use connection keep-alive for http requests\n  keepAlive: ?boolean;\n\n  keepAliveSettings: ?KeepAliveStruct;\n\n  // if autoNetworkDetection config is true, the SDK will emit NetworkUp and NetworkDown when there changes in the networking\n  autoNetworkDetection: ?boolean;\n\n  // alert when a heartbeat works out.\n  announceSuccessfulHeartbeats: boolean;\n  announceFailedHeartbeats: boolean;\n\n  /*\n    how long the server will wait before declaring that the client is gone.\n  */\n  _presenceTimeout: number;\n\n  /*\n    how often (in seconds) the client should announce its presence to server\n  */\n  _heartbeatInterval: number;\n\n  /*\n    how long to wait for the server when running the subscribe loop\n  */\n  _subscribeRequestTimeout: number;\n  /*\n    how long to wait for the server when making transactional requests\n  */\n  _transactionalRequestTimeout: number;\n  /*\n    use send beacon API when unsubscribing.\n    https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\n  */\n  _useSendBeacon: boolean;\n\n  /*\n    allow frameworks to append to the PNSDK parameter\n    the key should be an identifier for the specific framework to prevent duplicates\n  */\n  _PNSDKSuffix: { [key: string]: string };\n\n  /*\n    if set, the SDK will alert if more messages arrive in one subscribe than the theshold\n  */\n  requestMessageCountThreshold: number;\n\n  /*\n    Restore subscription list on disconnection.\n   */\n  restore: boolean;\n\n  /*\n    support for client deduping\n  */\n  dedupeOnSubscribe: boolean;\n\n  maximumCacheSize: number;\n\n  /*\n    support customp encryption and decryption functions.\n  */\n  customEncrypt: Function; // function to support custome encryption of messages\n\n  customDecrypt: Function; // function used to decrypt old version messages\n\n  // File Upload\n\n  // How many times the publish-file should be retried before giving up\n  fileUploadPublishRetryLimit: number;\n  useRandomIVs: boolean;\n\n  constructor({ setup, db }: ConfigConstructArgs) {\n    this._PNSDKSuffix = {};\n    this._db = db;\n\n    this.instanceId = `pn-${uuidGenerator.createUUID()}`;\n    this.secretKey = setup.secretKey || setup.secret_key;\n    this.subscribeKey = setup.subscribeKey || setup.subscribe_key;\n    this.publishKey = setup.publishKey || setup.publish_key;\n    this.sdkName = setup.sdkName;\n    this.sdkFamily = setup.sdkFamily;\n    this.partnerId = setup.partnerId;\n    this.setAuthKey(setup.authKey);\n    this.setCipherKey(setup.cipherKey);\n\n    this.setFilterExpression(setup.filterExpression);\n\n    if (typeof setup.origin !== 'string' && !Array.isArray(setup.origin) && setup.origin !== undefined) {\n      throw new Error('Origin must be either undefined, a string or a list of strings.');\n    }\n\n    this.origin = setup.origin || makeDefaultOrigins();\n    this.secure = setup.ssl || false;\n    this.restore = setup.restore || false;\n    this.proxy = setup.proxy;\n    this.keepAlive = setup.keepAlive;\n    this.keepAliveSettings = setup.keepAliveSettings;\n    this.autoNetworkDetection = setup.autoNetworkDetection || false;\n\n    this.dedupeOnSubscribe = setup.dedupeOnSubscribe || false;\n    this.maximumCacheSize = setup.maximumCacheSize || 100;\n\n    this.customEncrypt = setup.customEncrypt;\n    this.customDecrypt = setup.customDecrypt;\n\n    this.fileUploadPublishRetryLimit = setup.fileUploadPublishRetryLimit ?? 5;\n    this.useRandomIVs = setup.useRandomIVs ?? true;\n\n    // if location config exist and we are in https, force secure to true.\n    if (typeof location !== 'undefined' && location.protocol === 'https:') {\n      this.secure = true;\n    }\n\n    this.logVerbosity = setup.logVerbosity || false;\n    this.suppressLeaveEvents = setup.suppressLeaveEvents || false;\n\n    this.announceFailedHeartbeats = setup.announceFailedHeartbeats || true;\n    this.announceSuccessfulHeartbeats = setup.announceSuccessfulHeartbeats || false;\n\n    this.useInstanceId = setup.useInstanceId || false;\n    this.useRequestId = setup.useRequestId || false;\n\n    this.requestMessageCountThreshold = setup.requestMessageCountThreshold;\n\n    // set timeout to how long a transaction request will wait for the server (default 15 seconds)\n    this.setTransactionTimeout(setup.transactionalRequestTimeout || 15 * 1000);\n    // set timeout to how long a subscribe event loop will run (default 310 seconds)\n    this.setSubscribeTimeout(setup.subscribeRequestTimeout || 310 * 1000);\n    // set config on beacon (https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) usage\n    this.setSendBeaconConfig(setup.useSendBeacon || true);\n    // how long the SDK will report the client to be alive before issuing a timeout\n    if (setup.presenceTimeout) {\n      this.setPresenceTimeout(setup.presenceTimeout);\n    } else {\n      this._presenceTimeout = PRESENCE_TIMEOUT_DEFAULT;\n    }\n\n    if (setup.heartbeatInterval != null) {\n      this.setHeartbeatInterval(setup.heartbeatInterval);\n    }\n\n    this.setUUID(this._decideUUID(setup.uuid)); // UUID decision depends on subKey.\n  }\n\n  // exposed setters\n  getAuthKey(): string {\n    return this.authKey;\n  }\n\n  setAuthKey(val: string): this {\n    this.authKey = val;\n    return this;\n  }\n\n  setCipherKey(val: string): this {\n    this.cipherKey = val;\n    return this;\n  }\n\n  getUUID(): string {\n    return this.UUID;\n  }\n\n  setUUID(val: string): this {\n    if (this._db && this._db.set) this._db.set(`${this.subscribeKey}uuid`, val);\n    this.UUID = val;\n    return this;\n  }\n\n  getFilterExpression(): string {\n    return this.filterExpression;\n  }\n\n  setFilterExpression(val: string): this {\n    this.filterExpression = val;\n    return this;\n  }\n\n  getPresenceTimeout(): number {\n    return this._presenceTimeout;\n  }\n\n  setPresenceTimeout(val: number): this {\n    if (val >= PRESENCE_TIMEOUT_MINIMUM) {\n      this._presenceTimeout = val;\n    } else {\n      this._presenceTimeout = PRESENCE_TIMEOUT_MINIMUM;\n\n      // eslint-disable-next-line no-console\n      console.log('WARNING: Presence timeout is less than the minimum. Using minimum value: ', this._presenceTimeout);\n    }\n\n    this.setHeartbeatInterval(this._presenceTimeout / 2 - 1);\n\n    return this;\n  }\n\n  setProxy(proxy: ProxyStruct) {\n    this.proxy = proxy;\n  }\n\n  getHeartbeatInterval(): number {\n    return this._heartbeatInterval;\n  }\n\n  setHeartbeatInterval(val: number): this {\n    this._heartbeatInterval = val;\n    return this;\n  }\n\n  // deprecated setters.\n  getSubscribeTimeout(): number {\n    return this._subscribeRequestTimeout;\n  }\n\n  setSubscribeTimeout(val: number): this {\n    this._subscribeRequestTimeout = val;\n    return this;\n  }\n\n  getTransactionTimeout(): number {\n    return this._transactionalRequestTimeout;\n  }\n\n  setTransactionTimeout(val: number): this {\n    this._transactionalRequestTimeout = val;\n    return this;\n  }\n\n  isSendBeaconEnabled(): boolean {\n    return this._useSendBeacon;\n  }\n\n  setSendBeaconConfig(val: boolean): this {\n    this._useSendBeacon = val;\n    return this;\n  }\n\n  getVersion(): string {\n    return '4.37.0';\n  }\n\n  _addPnsdkSuffix(name: string, suffix: string) {\n    this._PNSDKSuffix[name] = suffix;\n  }\n\n  _getPnsdkSuffix(separator: string): string {\n    return Object.keys(this._PNSDKSuffix).reduce((result, key) => result + separator + this._PNSDKSuffix[key], '');\n  }\n\n  _decideUUID(providedUUID: string): string {\n    // if the uuid was provided by setup, use this UUID.\n    if (providedUUID) {\n      return providedUUID;\n    }\n\n    // if the database module is enabled and we have something saved, use this.\n    if (this._db && this._db.get && this._db.get(`${this.subscribeKey}uuid`)) {\n      return this._db.get(`${this.subscribeKey}uuid`);\n    }\n\n    // randomize the UUID and push to storage\n    return `pn-${uuidGenerator.createUUID()}`;\n  }\n}\n"],"file":"config.js"}