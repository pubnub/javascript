{"version":3,"sources":["core/components/config.js"],"names":["setup","db","_db","instanceId","uuidGenerator","createUUID","secretKey","secret_key","subscribeKey","subscribe_key","publishKey","publish_key","sdkName","sdkFamily","partnerId","setAuthKey","authKey","setCipherKey","cipherKey","setFilterExpression","filterExpression","origin","secure","ssl","restore","proxy","keepAlive","keepAliveSettings","autoNetworkDetection","dedupeOnSubscribe","maximumCacheSize","customEncrypt","customDecrypt","location","protocol","logVerbosity","suppressLeaveEvents","announceFailedHeartbeats","announceSuccessfulHeartbeats","useInstanceId","useRequestId","requestMessageCountThreshold","setTransactionTimeout","transactionalRequestTimeout","setSubscribeTimeout","subscribeRequestTimeout","setSendBeaconConfig","useSendBeacon","setPresenceTimeout","presenceTimeout","heartbeatInterval","setHeartbeatInterval","setUUID","_decideUUID","uuid","val","UUID","set","_presenceTimeout","_heartbeatInterval","_subscribeRequestTimeout","_transactionalRequestTimeout","_useSendBeacon","providedUUID","get"],"mappings":"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","file":"config.js","sourcesContent":["/* @flow */\r\n/* global location */\r\n\r\nimport uuidGenerator from './uuid';\r\nimport {\r\n  InternalSetupStruct,\r\n  DatabaseInterface,\r\n  KeepAliveStruct,\r\n  ProxyStruct,\r\n} from '../flow_interfaces';\r\n\r\ntype ConfigConstructArgs = {\r\n  setup: InternalSetupStruct,\r\n  db: DatabaseInterface,\r\n};\r\n\r\nexport default class {\r\n  _db: DatabaseInterface;\r\n\r\n  subscribeKey: string;\r\n  publishKey: string;\r\n  secretKey: string;\r\n  cipherKey: string;\r\n  authKey: string;\r\n  UUID: string;\r\n\r\n  proxy: ProxyStruct;\r\n\r\n  /*\r\n    if _useInstanceId is true, this instanceId will be added to all requests\r\n  */\r\n  instanceId: string;\r\n\r\n  /*\r\n    If the SDK is running as part of another SDK built atop of it, allow a custom pnsdk with name and version.\r\n   */\r\n  sdkName: string;\r\n\r\n  /*\r\n    keep track of the SDK family for identifier generator\r\n  */\r\n  sdkFamily: string;\r\n\r\n  /*\r\n    If the SDK is operated by a partner, allow a custom pnsdk item for them.\r\n  */\r\n  partnerId: string;\r\n\r\n  /*\r\n    filter expression to pass along when subscribing.\r\n  */\r\n  filterExpression: string;\r\n  /*\r\n    configuration to supress leave events; when a presence leave is performed\r\n    this configuration will disallow the leave event from happening\r\n  */\r\n  suppressLeaveEvents: boolean;\r\n\r\n  /*\r\n    use SSL for http requests?\r\n  */\r\n  secure: boolean;\r\n\r\n  // Custom optional origin.\r\n  origin: string;\r\n\r\n  // log verbosity: true to output lots of info\r\n  logVerbosity: boolean;\r\n\r\n  // if instanceId config is true, the SDK will pass the unique instance identifier to the server as instanceId=<UUID>\r\n  useInstanceId: boolean;\r\n\r\n  // if requestId config is true, the SDK will pass a unique request identifier with each request as request_id=<UUID>\r\n  useRequestId: boolean;\r\n\r\n  // use connection keep-alive for http requests\r\n  keepAlive: ?boolean;\r\n\r\n  keepAliveSettings: ?KeepAliveStruct;\r\n\r\n  // if autoNetworkDetection config is true, the SDK will emit NetworkUp and NetworkDown when there changes in the networking\r\n  autoNetworkDetection: ?boolean;\r\n\r\n  // alert when a heartbeat works out.\r\n  announceSuccessfulHeartbeats: boolean;\r\n  announceFailedHeartbeats: boolean;\r\n\r\n  /*\r\n    how long the server will wait before declaring that the client is gone.\r\n  */\r\n  _presenceTimeout: number;\r\n\r\n  /*\r\n    how often (in seconds) the client should announce its presence to server\r\n  */\r\n  _heartbeatInterval: number;\r\n\r\n  /*\r\n    how long to wait for the server when running the subscribe loop\r\n  */\r\n  _subscribeRequestTimeout: number;\r\n  /*\r\n    how long to wait for the server when making transactional requests\r\n  */\r\n  _transactionalRequestTimeout: number;\r\n  /*\r\n    use send beacon API when unsubscribing.\r\n    https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\r\n  */\r\n  _useSendBeacon: boolean;\r\n\r\n  /*\r\n    if set, the SDK will alert if more messages arrive in one subscribe than the theshold\r\n  */\r\n  requestMessageCountThreshold: number;\r\n\r\n  /*\r\n    Restore subscription list on disconnection.\r\n   */\r\n  restore: boolean;\r\n\r\n  /*\r\n    support for client deduping\r\n  */\r\n  dedupeOnSubscribe: boolean;\r\n\r\n  maximumCacheSize: number;\r\n\r\n  /*\r\n    support customp encryption and decryption functions.\r\n  */\r\n  customEncrypt: Function; // function to support custome encryption of messages\r\n\r\n  customDecrypt: Function; // function used to decrypt old version messages\r\n\r\n  constructor({ setup, db }: ConfigConstructArgs) {\r\n    this._db = db;\r\n\r\n    this.instanceId = `pn-${uuidGenerator.createUUID()}`;\r\n    this.secretKey = setup.secretKey || setup.secret_key;\r\n    this.subscribeKey = setup.subscribeKey || setup.subscribe_key;\r\n    this.publishKey = setup.publishKey || setup.publish_key;\r\n    this.sdkName = setup.sdkName;\r\n    this.sdkFamily = setup.sdkFamily;\r\n    this.partnerId = setup.partnerId;\r\n    this.setAuthKey(setup.authKey);\r\n    this.setCipherKey(setup.cipherKey);\r\n\r\n    this.setFilterExpression(setup.filterExpression);\r\n\r\n    this.origin = setup.origin || 'ps.pndsn.com';\r\n    this.secure = setup.ssl || false;\r\n    this.restore = setup.restore || false;\r\n    this.proxy = setup.proxy;\r\n    this.keepAlive = setup.keepAlive;\r\n    this.keepAliveSettings = setup.keepAliveSettings;\r\n    this.autoNetworkDetection = setup.autoNetworkDetection || false;\r\n\r\n    this.dedupeOnSubscribe = setup.dedupeOnSubscribe || false;\r\n    this.maximumCacheSize = setup.maximumCacheSize || 100;\r\n\r\n    this.customEncrypt = setup.customEncrypt;\r\n    this.customDecrypt = setup.customDecrypt;\r\n\r\n    // if location config exist and we are in https, force secure to true.\r\n    if (typeof location !== 'undefined' && location.protocol === 'https:') {\r\n      this.secure = true;\r\n    }\r\n\r\n    this.logVerbosity = setup.logVerbosity || false;\r\n    this.suppressLeaveEvents = setup.suppressLeaveEvents || false;\r\n\r\n    this.announceFailedHeartbeats = setup.announceFailedHeartbeats || true;\r\n    this.announceSuccessfulHeartbeats =\r\n      setup.announceSuccessfulHeartbeats || false;\r\n\r\n    this.useInstanceId = setup.useInstanceId || false;\r\n    this.useRequestId = setup.useRequestId || false;\r\n\r\n    this.requestMessageCountThreshold = setup.requestMessageCountThreshold;\r\n\r\n    // set timeout to how long a transaction request will wait for the server (default 15 seconds)\r\n    this.setTransactionTimeout(setup.transactionalRequestTimeout || 15 * 1000);\r\n    // set timeout to how long a subscribe event loop will run (default 310 seconds)\r\n    this.setSubscribeTimeout(setup.subscribeRequestTimeout || 310 * 1000);\r\n    // set config on beacon (https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) usage\r\n    this.setSendBeaconConfig(setup.useSendBeacon || true);\r\n    // how long the SDK will report the client to be alive before issuing a timeout\r\n    this.setPresenceTimeout(setup.presenceTimeout || 300);\r\n\r\n    if (setup.heartbeatInterval != null) {\r\n      this.setHeartbeatInterval(setup.heartbeatInterval);\r\n    }\r\n\r\n    this.setUUID(this._decideUUID(setup.uuid)); // UUID decision depends on subKey.\r\n  }\r\n\r\n  // exposed setters\r\n  getAuthKey(): string {\r\n    return this.authKey;\r\n  }\r\n\r\n  setAuthKey(val: string): this {\r\n    this.authKey = val;\r\n    return this;\r\n  }\r\n\r\n  setCipherKey(val: string): this {\r\n    this.cipherKey = val;\r\n    return this;\r\n  }\r\n\r\n  getUUID(): string {\r\n    return this.UUID;\r\n  }\r\n\r\n  setUUID(val: string): this {\r\n    if (this._db && this._db.set) this._db.set(`${this.subscribeKey}uuid`, val);\r\n    this.UUID = val;\r\n    return this;\r\n  }\r\n\r\n  getFilterExpression(): string {\r\n    return this.filterExpression;\r\n  }\r\n\r\n  setFilterExpression(val: string): this {\r\n    this.filterExpression = val;\r\n    return this;\r\n  }\r\n\r\n  getPresenceTimeout(): number {\r\n    return this._presenceTimeout;\r\n  }\r\n\r\n  setPresenceTimeout(val: number): this {\r\n    this._presenceTimeout = val;\r\n    this.setHeartbeatInterval(this._presenceTimeout / 2 - 1);\r\n    return this;\r\n  }\r\n\r\n  setProxy(proxy: ProxyStruct) {\r\n    this.proxy = proxy;\r\n  }\r\n\r\n  getHeartbeatInterval(): number {\r\n    return this._heartbeatInterval;\r\n  }\r\n\r\n  setHeartbeatInterval(val: number): this {\r\n    this._heartbeatInterval = val;\r\n    return this;\r\n  }\r\n\r\n  // deprecated setters.\r\n  getSubscribeTimeout(): number {\r\n    return this._subscribeRequestTimeout;\r\n  }\r\n\r\n  setSubscribeTimeout(val: number): this {\r\n    this._subscribeRequestTimeout = val;\r\n    return this;\r\n  }\r\n\r\n  getTransactionTimeout(): number {\r\n    return this._transactionalRequestTimeout;\r\n  }\r\n\r\n  setTransactionTimeout(val: number): this {\r\n    this._transactionalRequestTimeout = val;\r\n    return this;\r\n  }\r\n\r\n  isSendBeaconEnabled(): boolean {\r\n    return this._useSendBeacon;\r\n  }\r\n\r\n  setSendBeaconConfig(val: boolean): this {\r\n    this._useSendBeacon = val;\r\n    return this;\r\n  }\r\n\r\n  getVersion(): string {\r\n    return '4.24.2';\r\n  }\r\n\r\n  _decideUUID(providedUUID: string): string {\r\n    // if the uuid was provided by setup, use this UUID.\r\n    if (providedUUID) {\r\n      return providedUUID;\r\n    }\r\n\r\n    // if the database module is enabled and we have something saved, use this.\r\n    if (this._db && this._db.get && this._db.get(`${this.subscribeKey}uuid`)) {\r\n      return this._db.get(`${this.subscribeKey}uuid`);\r\n    }\r\n\r\n    // randomize the UUID and push to storage\r\n    return `pn-${uuidGenerator.createUUID()}`;\r\n  }\r\n}\r\n"]}