{"version":3,"sources":["core/components/listener_manager.js"],"names":[],"mappings":";;;;;;;;AACA;;;;;AAME,oBAAc;AAAA;;AACZ,SAAK,UAAL,GAAkB,EAAlB;AACD;;;;gCAEW,Y,EAA8B;AACxC,WAAK,UAAL,CAAgB,IAAhB,CAAqB,YAArB;AACD;;;mCAEc,kB,EAAoC;AACjD,UAAI,eAAe,EAAnB;;AAEA,WAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAc;AACpC,YAAI,aAAa,kBAAjB,EAAqC,aAAa,IAAb,CAAkB,QAAlB;AACtC,OAFD;;AAIA,WAAK,UAAL,GAAkB,YAAlB;AACD;;;qCAEgB,Q,EAAgC;AAC/C,WAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAc;AACpC,YAAI,SAAS,QAAb,EAAuB,SAAS,QAAT,CAAkB,QAAlB;AACxB,OAFD;AAGD;;;mCAEc,Q,EAA8B;AAC3C,WAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAc;AACpC,YAAI,SAAS,MAAb,EAAqB,SAAS,MAAT,CAAgB,QAAhB;AACtB,OAFD;AAGD;;;oCAEe,Q,EAA+B;AAC7C,WAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAc;AACpC,YAAI,SAAS,OAAb,EAAsB,SAAS,OAAT,CAAiB,QAAjB;AACvB,OAFD;AAGD;;;wCAEmB;AAClB,UAAI,gBAAoC,EAAxC;AACA,oBAAc,QAAd,GAAyB,qBAAzB;AACA,WAAK,cAAL,CAAoB,aAApB;AACD;;;0CAEqB;AACpB,UAAI,gBAAoC,EAAxC;AACA,oBAAc,QAAd,GAAyB,uBAAzB;AACA,WAAK,cAAL,CAAoB,aAApB;AACD","file":"core/components/listener_manager.js","sourcesContent":["/* @flow */\nimport { MessageAnnouncement, StatusAnnouncement, CallbackStruct, PresenceAnnouncement } from '../flow_interfaces';\n\nexport default class {\n\n  _listeners: Array<CallbackStruct>;\n\n  constructor() {\n    this._listeners = [];\n  }\n\n  addListener(newListeners: CallbackStruct) {\n    this._listeners.push(newListeners);\n  }\n\n  removeListener(deprecatedListener: CallbackStruct) {\n    let newListeners = [];\n\n    this._listeners.forEach((listener) => {\n      if (listener !== deprecatedListener) newListeners.push(listener);\n    });\n\n    this._listeners = newListeners;\n  }\n\n  announcePresence(announce: PresenceAnnouncement) {\n    this._listeners.forEach((listener) => {\n      if (listener.presence) listener.presence(announce);\n    });\n  }\n\n  announceStatus(announce: StatusAnnouncement) {\n    this._listeners.forEach((listener) => {\n      if (listener.status) listener.status(announce);\n    });\n  }\n\n  announceMessage(announce: MessageAnnouncement) {\n    this._listeners.forEach((listener) => {\n      if (listener.message) listener.message(announce);\n    });\n  }\n\n  announceNetworkUp() {\n    let networkStatus: StatusAnnouncement = {};\n    networkStatus.category = 'PNNetworkUpCategory';\n    this.announceStatus(networkStatus);\n  }\n\n  announceNetworkDown() {\n    let networkStatus: StatusAnnouncement = {};\n    networkStatus.category = 'PNNetworkDownCategory';\n    this.announceStatus(networkStatus);\n  }\n\n}\n"],"sourceRoot":"/source/"}