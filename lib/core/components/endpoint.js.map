{"version":3,"sources":["core/components/endpoint.js"],"names":["modules","endpoint","networking","config","callback","promiseComponent","incomingParams","getOperation","PNTimeOperation","PNChannelGroupsOperation","Promise","createPromise","validationResult","validateParams","createValidationError","reject","PubNubError","promise","outgoingParams","prepareParams","url","decideURL","callInstance","networkingParams","operation","timeout","getRequestTimeout","uuid","UUID","pnsdk","generatePNSDK","useInstanceId","instanceid","instanceId","useRequestId","requestid","isAuthSupported","getAuthKey","auth","secretKey","signRequest","onResponse","status","payload","error","parsedPayload","handleResponse","fulfill","usePost","postPayload","POST","GET","PNSubscribeOperation","message","name","constructor","Error","createError","errorPayload","type","postURL","getURL","base","sdkFamily","partnerId","getVersion","crypto","timestamp","Math","floor","Date","getTime","signInput","subscribeKey","publishKey","signPamFromParams","signature","HMACSHA256","replace"],"mappings":"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","file":"endpoint.js","sourcesContent":["import uuidGenerator from 'lil-uuid';\n\nimport { StatusAnnouncement } from '../flow_interfaces';\nimport utils from '../utils';\nimport Config from './config';\nimport operationConstants from '../constants/operations';\n\nclass PubNubError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.name = this.constructor.name;\n    this.status = status;\n    this.message = message;\n  }\n}\n\nfunction createError(errorPayload: Object, type: string): Object {\n  errorPayload.type = type;\n  errorPayload.error = true;\n  return errorPayload;\n}\n\nfunction createValidationError(message: string): Object {\n  return createError({ message }, 'validationError');\n}\n\nfunction decideURL(endpoint, modules, incomingParams) {\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    return endpoint.postURL(modules, incomingParams);\n  } else {\n    return endpoint.getURL(modules, incomingParams);\n  }\n}\n\nfunction generatePNSDK(config: Config): string {\n  let base = `PubNub-JS-${config.sdkFamily}`;\n\n  if (config.partnerId) {\n    base += `-${config.partnerId}`;\n  }\n\n  base += `/${config.getVersion()}`;\n\n  return base;\n}\n\nfunction signRequest(modules, url, outgoingParams) {\n  let { config, crypto } = modules;\n\n  outgoingParams.timestamp = Math.floor(new Date().getTime() / 1000);\n  let signInput = `${config.subscribeKey}\\n${config.publishKey}\\n${url}\\n`;\n  signInput += utils.signPamFromParams(outgoingParams);\n\n  let signature = crypto.HMACSHA256(signInput);\n  signature = signature.replace(/\\+/g, '-');\n  signature = signature.replace(/\\//g, '_');\n\n  outgoingParams.signature = signature;\n}\n\nexport default function (modules, endpoint, ...args) {\n  let { networking, config } = modules;\n  let callback = null;\n  let promiseComponent = null;\n  let incomingParams = {};\n\n  if (endpoint.getOperation() === operationConstants.PNTimeOperation || endpoint.getOperation() === operationConstants.PNChannelGroupsOperation) {\n    callback = args[0];\n  } else {\n    incomingParams = args[0];\n    callback = args[1];\n  }\n\n  // bridge in Promise support.\n  if (typeof Promise !== 'undefined' && !callback) {\n    promiseComponent = utils.createPromise();\n  }\n\n  let validationResult = endpoint.validateParams(modules, incomingParams);\n\n  if (validationResult) {\n    if (callback) {\n      return callback(createValidationError(validationResult));\n    } else if (promiseComponent) {\n      promiseComponent.reject(new PubNubError('Validation failed, check status for details', createValidationError(validationResult)));\n      return promiseComponent.promise;\n    }\n    return;\n  }\n\n  let outgoingParams = endpoint.prepareParams(modules, incomingParams);\n  let url = decideURL(endpoint, modules, incomingParams);\n  let callInstance;\n  let networkingParams = { url,\n    operation: endpoint.getOperation(),\n    timeout: endpoint.getRequestTimeout(modules)\n  };\n\n  outgoingParams.uuid = config.UUID;\n  outgoingParams.pnsdk = generatePNSDK(config);\n\n  if (config.useInstanceId) {\n    outgoingParams.instanceid = config.instanceId;\n  }\n\n  if (config.useRequestId) {\n    outgoingParams.requestid = uuidGenerator();\n  }\n\n  if (endpoint.isAuthSupported() && config.getAuthKey()) {\n    outgoingParams.auth = config.getAuthKey();\n  }\n\n  if (config.secretKey) {\n    signRequest(modules, url, outgoingParams);\n  }\n\n  let onResponse = (status: StatusAnnouncement, payload: Object) => {\n    if (status.error) {\n      if (callback) {\n        callback(status);\n      } else if (promiseComponent) {\n        promiseComponent.reject(new PubNubError('PubNub call failed, check status for details', status));\n      }\n      return;\n    }\n\n    let parsedPayload = endpoint.handleResponse(modules, payload, incomingParams);\n\n    if (callback) {\n      callback(status, parsedPayload);\n    } else if (promiseComponent) {\n      promiseComponent.fulfill(parsedPayload);\n    }\n  };\n\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    let payload = endpoint.postPayload(modules, incomingParams);\n    callInstance = networking.POST(outgoingParams, payload, networkingParams, onResponse);\n  } else {\n    callInstance = networking.GET(outgoingParams, networkingParams, onResponse);\n  }\n\n  if (endpoint.getOperation() === operationConstants.PNSubscribeOperation) {\n    return callInstance;\n  }\n\n  if (promiseComponent) {\n    return promiseComponent.promise;\n  }\n}\n"]}