{"version":3,"sources":["core/components/cryptography/index.js"],"names":["bufferToWordArray","b","wa","i","length","CryptoJS","lib","WordArray","create","config","_config","_iv","_allowedKeyEncodings","_allowedKeyLengths","_allowedModes","_defaultOptions","encryptKey","keyEncoding","keyLength","mode","data","hash","HmacSHA256","secretKey","toString","enc","Base64","s","SHA256","Hex","incomingOptions","options","hasOwnProperty","indexOf","toLowerCase","parseInt","key","parse","_decodeKey","Utf8","slice","ECB","CBC","random","customCipherKey","customEncrypt","pnEncrypt","customDecrypt","pnDecrypt","cipherKey","_parseOptions","_getMode","_getPaddedKey","useRandomIVs","waIv","_getRandomIV","waPayload","AES","encrypt","iv","ciphertext","clone","concat","_getIV","encryptedHexArray","base64Encrypted","Buffer","from","payload","plainJSON","decrypt","plaintext","JSON","e"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport Config from '../config';\nimport CryptoJS from './hmac-sha256';\n\nfunction bufferToWordArray(b: Buffer) {\n  let wa = [];\n  let i: number;\n  for (i = 0; i < b.length; i += 1) {\n    // eslint-disable-next-line no-bitwise\n    wa[(i / 4) | 0] |= b[i] << (24 - 8 * i);\n  }\n\n  return CryptoJS.lib.WordArray.create(wa, b.length);\n}\n\ntype CryptoConstruct = {\n  config: Config,\n};\n\nexport default class {\n  _config: Config;\n  _iv: string;\n  _allowedKeyEncodings: Array<string>;\n  _allowedKeyLengths: Array<number>;\n  _allowedModes: Array<string>;\n  _defaultOptions: Object;\n\n  constructor({ config }: CryptoConstruct) {\n    this._config = config;\n\n    this._iv = '0123456789012345';\n\n    this._allowedKeyEncodings = ['hex', 'utf8', 'base64', 'binary'];\n    this._allowedKeyLengths = [128, 256];\n    this._allowedModes = ['ecb', 'cbc'];\n\n    this._defaultOptions = {\n      encryptKey: true,\n      keyEncoding: 'utf8',\n      keyLength: 256,\n      mode: 'cbc',\n    };\n  }\n\n  HMACSHA256(data: string): string {\n    let hash = CryptoJS.HmacSHA256(data, this._config.secretKey);\n    return hash.toString(CryptoJS.enc.Base64);\n  }\n\n  SHA256(s: string): string {\n    return CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex);\n  }\n\n  _parseOptions(incomingOptions: ?Object): Object {\n    // Defaults\n    let options = incomingOptions || {};\n    if (!options.hasOwnProperty('encryptKey')) options.encryptKey = this._defaultOptions.encryptKey;\n    if (!options.hasOwnProperty('keyEncoding')) options.keyEncoding = this._defaultOptions.keyEncoding;\n    if (!options.hasOwnProperty('keyLength')) options.keyLength = this._defaultOptions.keyLength;\n    if (!options.hasOwnProperty('mode')) options.mode = this._defaultOptions.mode;\n\n    // Validation\n    if (this._allowedKeyEncodings.indexOf(options.keyEncoding.toLowerCase()) === -1) {\n      options.keyEncoding = this._defaultOptions.keyEncoding;\n    }\n\n    if (this._allowedKeyLengths.indexOf(parseInt(options.keyLength, 10)) === -1) {\n      options.keyLength = this._defaultOptions.keyLength;\n    }\n\n    if (this._allowedModes.indexOf(options.mode.toLowerCase()) === -1) {\n      options.mode = this._defaultOptions.mode;\n    }\n\n    return options;\n  }\n\n  _decodeKey(key: string, options: Object): string {\n    if (options.keyEncoding === 'base64') {\n      return CryptoJS.enc.Base64.parse(key);\n    } else if (options.keyEncoding === 'hex') {\n      return CryptoJS.enc.Hex.parse(key);\n    } else {\n      return key;\n    }\n  }\n\n  _getPaddedKey(key: string, options: Object): string {\n    key = this._decodeKey(key, options);\n    if (options.encryptKey) {\n      return CryptoJS.enc.Utf8.parse(this.SHA256(key).slice(0, 32));\n    } else {\n      return key;\n    }\n  }\n\n  _getMode(options: Object): string {\n    if (options.mode === 'ecb') {\n      return CryptoJS.mode.ECB;\n    } else {\n      return CryptoJS.mode.CBC;\n    }\n  }\n\n  _getIV(options: Object): string | null {\n    return options.mode === 'cbc' ? CryptoJS.enc.Utf8.parse(this._iv) : null;\n  }\n\n  _getRandomIV(): any {\n    return CryptoJS.lib.WordArray.random(16);\n  }\n\n  encrypt(data: string, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (this._config.customEncrypt) {\n      return this._config.customEncrypt(data);\n    } else {\n      return this.pnEncrypt(data, customCipherKey, options);\n    }\n  }\n\n  decrypt(data: Object, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (this._config.customDecrypt) {\n      return this._config.customDecrypt(data);\n    } else {\n      return this.pnDecrypt(data, customCipherKey, options);\n    }\n  }\n\n  pnEncrypt(data: string, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (!customCipherKey && !this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(customCipherKey || this._config.cipherKey, options);\n\n    if (this._config.useRandomIVs) {\n      let waIv = this._getRandomIV();\n      let waPayload = CryptoJS.AES.encrypt(data, cipherKey, { iv: waIv, mode }).ciphertext;\n\n      return waIv.clone().concat(waPayload.clone()).toString(CryptoJS.enc.Base64);\n    } else {\n      let iv = this._getIV(options);\n      let encryptedHexArray = CryptoJS.AES.encrypt(data, cipherKey, { iv, mode }).ciphertext;\n      let base64Encrypted = encryptedHexArray.toString(CryptoJS.enc.Base64);\n      return base64Encrypted || data;\n    }\n  }\n\n  pnDecrypt(data: string, customCipherKey: ?string, options: ?Object): Object | null {\n    if (!customCipherKey && !this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(customCipherKey || this._config.cipherKey, options);\n    if (this._config.useRandomIVs) {\n      let ciphertext = Buffer.from(data, 'base64');\n\n      let iv = bufferToWordArray(ciphertext.slice(0, 16));\n      let payload = bufferToWordArray(ciphertext.slice(16));\n\n      try {\n        let plainJSON = CryptoJS.AES.decrypt({ ciphertext: payload }, cipherKey, { iv, mode }).toString(\n          CryptoJS.enc.Utf8\n        );\n        let plaintext = JSON.parse(plainJSON);\n        return plaintext;\n      } catch (e) {\n        return null;\n      }\n    } else {\n      let iv = this._getIV(options);\n      try {\n        let ciphertext = CryptoJS.enc.Base64.parse(data);\n        let plainJSON = CryptoJS.AES.decrypt({ ciphertext }, cipherKey, { iv, mode }).toString(CryptoJS.enc.Utf8);\n        let plaintext = JSON.parse(plainJSON);\n        return plaintext;\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n}\n"],"file":"index.js"}