{"version":3,"sources":["core/flow_interfaces.js"],"names":["module","exports"],"mappings":";;AAoxBAA,MAAM,CAACC,OAAP,GAAiB,EAAjB","sourcesContent":["/* eslint no-unused-vars: 0 */\ndeclare module 'uuid' {\n  declare function v4(): string;\n}\n\ndeclare module 'superagent' {\n  declare function type(): superagent;\n}\n\nexport type CallbackStruct = {\n  status: Function,\n  presence: Function,\n  message: Function,\n  signal: Function,\n  messageAction: Function,\n  user: Function,\n  space: Function,\n  membership: Function\n}\n\nexport type ProxyStruct = {\n  port: number,\n  hostname: string,\n  headers: Object\n}\n\nexport type KeepAliveStruct = {\n  keepAlive: number,\n  keepAliveMsecs: number,\n  freeSocketKeepAliveTimeout: number,\n  timeout: number,\n  maxSockets: number,\n  maxFreeSockets: number\n}\n\nexport type NetworkingModules = {\n  keepAlive: ?Function,\n  sendBeacon: ?Function,\n  get: Function,\n  post: Function,\n  patch: Function\n}\n\nexport type InternalSetupStruct = {\n  useSendBeacon: ?boolean, // configuration on beacon usage\n  publishKey: ?string, // API key required for publishing\n  subscribeKey: string, // API key required to subscribe\n  cipherKey: string, // decryption keys\n  origin: ?string, // an optional FQDN which will recieve calls from the SDK.\n  ssl: boolean, // is SSL enabled?\n  shutdown: Function, // function to call when pubnub is shutting down.\n\n  sendBeacon: ?Function, // executes a call against the Beacon API\n  useSendBeacon: ?boolean, // enable, disable usage of send beacons\n\n  subscribeRequestTimeout: ?number, // how long to wait for subscribe requst\n  transactionalRequestTimeout: ?number, // how long to wait for transactional requests\n\n  proxy: ?ProxyStruct, // configuration to support proxy settings.\n\n  keepAlive: ?boolean, // is keep-alive enabled?\n\n  keepAliveSettings: ?KeepAliveStruct, // configuration on keep-alive usage\n\n  suppressLev: ?boolean,\n\n  networking: Function // component of networking to use\n}\n\ntype EndpointKeyDefinition = {\n  required: boolean\n}\n\ntype SupportedParams = {\n  subscribeKey: EndpointKeyDefinition,\n  uuid: EndpointKeyDefinition,\n}\n\nexport type EndpointDefinition = {\n  params: SupportedParams,\n  headers?: Object,\n  timeout: number,\n  url: string\n}\n\nexport type StateChangeAnnouncement = {\n  state: Object,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\n// ****************** SUBSCRIPTIONS ********************************************\n\ntype SubscribeMetadata = {\n  timetoken: number,\n  region: number\n}\n\ntype PublishMetaData = {\n  publishTimetoken: number,\n  region: number\n}\n\ntype SubscribeMessage = {\n  shard: string,\n  subscriptionMatch: string,\n  channel: string,\n  messageType: number,\n  payload: Object,\n  flags: string,\n  issuingClientId: string,\n  subscribeKey: string,\n  originationTimetoken: string,\n  publishMetaData: PublishMetaData\n\n}\n\n// subscribe responses\ntype SubscribeEnvelope = {\n  messages: Array<SubscribeMessage>,\n  metadata: SubscribeMetadata;\n}\n\n// *****************************************************************************\n\n\n// ****************** Announcements ********************************************\n\ntype PresenceAnnouncement = {\n  event: string,\n\n  uuid: string,\n  timestamp: number,\n  occupancy: number,\n  state: Object,\n\n  subscribedChannel: string, // deprecated\n  actualChannel: string,     // deprecated\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number,\n  userMetadata: Object\n}\n\ntype MessageAnnouncement = {\n\n  message: Object,\n\n  subscribedChannel: string, // deprecated\n  actualChannel: string,     // deprecated\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number | string,\n  userMetadata: Object,\n  publisher: string\n}\n\ntype SignalAnnouncement = {\n\n  message: Object,\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number | string,\n  userMetadata: Object,\n  publisher: string\n}\n\ntype ObjectMessage = {\n  event: string,\n  type: string,\n  data: Object\n}\n\ntype ObjectAnnouncement = {\n\n  message: ObjectMessage,\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number | string,\n  userMetadata: Object,\n  publisher: string\n}\n\nexport type StatusAnnouncement = {\n  error: boolean,\n  statusCode: number,\n  category: string,\n  errorData: Object,\n  lastTimetoken: number,\n  currentTimetoken: number,\n\n  // send back channel, channel groups that were affected by this operation\n  affectedChannels: Array<String>,\n  affectedChannelGroups: Array<String>,\n}\n\n// *****************************************************************************\n\n// Time endpoints\n\ntype TimeResponse = {\n  timetoken: number\n};\n\n// history\ntype FetchHistoryArguments = {\n  channel: string, // fetch history from a channel\n  start: number | string, // start timetoken for history fetching\n  end: number | string, // end timetoken for history fetching\n  includeTimetoken: boolean, // include time token for each history call\n  includeMeta: boolean, // include message meta for each history entry\n  reverse: boolean,\n  count: number\n}\n\n// history\nexport type MessageCounterArguments = {\n  channels: Array<string>, // fetch history from a channel\n  timetoken: number | null,\n  channelTimetokens: Array<string> | null\n}\n\ntype FetchMessagesArguments = {\n  channels: string, // fetch history from a channel\n  start: number | string, // start timetoken for history fetching\n  end: number | string, // end timetoken for history fetching\n  includeMeta: boolean, // include message meta for each history entry\n  includeMessageActions: boolean, // include message actions for each history entry\n  count: number\n}\n\ntype HistoryItem = {\n  timetoken: number | string | null,\n  meta: Object | null,\n  entry: any,\n}\n\ntype HistoryResponse = {\n  messages: Array<HistoryItem>,\n  startTimeToken: number | string,\n  endTimeToken: number | string,\n}\n\n\nexport type MessageCountersResponse = {\n  channels: Object\n}\n\ntype HistoryV3Response = {\n  channels: Object\n}\n\n// CG endpoints\n\ntype AddChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\ntype RemoveChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\ntype DeleteGroupParams = {\n  channelGroup: string,\n}\n\ntype ListAllGroupsResponse = {\n  groups: Array<string>\n}\n\ntype ListChannelsParams = {\n  channelGroup: string,\n}\n\ntype ListChannelsResponse = {\n  channels: Array<string>\n}\n\n//\n\n// push\n\nexport type APNS2Target = {\n  topic: string,\n  environment?: 'development' | 'production',\n  excludedDevices?: Array<string>\n}\n\nexport type APNS2Configuration = {\n  collapseId?: string,\n  expirationDate?: Date,\n  targets: Array<APNS2Target>\n}\n\ntype ProvisionDeviceArgs = {\n  operation: 'add' | 'remove',\n  pushGateway: 'gcm' | 'apns' | 'apns2' | 'mpns',\n  environment?: 'development' | 'production',\n  topic?: string,\n  device: string,\n  channels: Array<string>\n};\n\ntype ModifyDeviceArgs = {\n  pushGateway: 'gcm' | 'apns' | 'apns2' | 'mpns',\n  environment?: 'development' | 'production',\n  topic?: string,\n  device: string,\n  channels: Array<string>\n};\n\ntype ListChannelsArgs = {\n  pushGateway: 'gcm' | 'apns' | 'apns2' | 'mpns',\n  environment?: 'development' | 'production',\n  topic?: string,\n  device: string,\n};\n\ntype RemoveDeviceArgs = {\n  pushGateway: 'gcm' | 'apns' | 'apns2' | 'mpns',\n  environment?: 'development' | 'production',\n  topic?: string,\n  device: string,\n};\n\ntype ListPushChannelsResponse = {\n  channels: Array<string>\n}\n\n//\n\n// presence\n\ntype LeaveArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n}\n\ntype HereNowArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  includeUUIDs: boolean,\n  includeState: boolean,\n  queryParameters?: Object\n}\n\ntype WhereNowArguments = {\n  uuid: string,\n}\n\ntype WhereNowResponse = {\n  channels: Array<string>,\n}\n\n//\n\ntype GetStateArguments = {\n  uuid: string,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype GetStateResponse = {\n  channels: Object\n}\n\n//\n\ntype SetStateArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SetStateResponse = {\n  state: Object\n}\n\n\ntype HeartbeatArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\n//\n\n// subscribe\n\ntype SubscribeArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  timetoken: number,\n  filterExpression: ?string,\n  region: ?string,\n  state: Object\n}\n\n//\n\n// access manager\n\ntype AuditArguments = {\n  channel: string,\n  channelGroup: string,\n  authKeys: Array<string>,\n}\n\ntype GrantArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  uuids: Array<string>,\n  ttl: number,\n  read: boolean,\n  write: boolean,\n  manage: boolean,\n  get: boolean,\n  join: boolean,\n  update: boolean,\n  delete: Boolean,\n  authKeys: Array<string>\n}\n\n// Base permissions object\ninterface GrantTokenObject {\n  read: boolean,\n  write: boolean,\n  manage: boolean,\n  delete: boolean,\n  get: boolean,\n  update: boolean,\n  join: boolean\n}\n\ninterface GrantTokenInput {\n  ttl: number,\n  authorizedUuid: String,\n  resources?: {\n    channels?: {\n      [key: String]: GrantTokenObject,\n    },\n    groups?: {\n      [key: String]: GrantTokenObject,\n    },\n    uuids?: {\n      [key: String]: GrantTokenObject,\n    }\n  },\n  patterns?: {\n    channels?: {\n      [key: String]: GrantTokenObject,\n    },\n    groups?: {\n      [key: String]: GrantTokenObject,\n    },\n    uuids?: {\n      [key: String]: GrantTokenObject,\n    }\n  },\n  meta?: Object\n}\n\ninterface GrantTokenOutput extends GrantTokenInput {\n  version: number,\n  timestamp: number,\n  signature: Buffer\n}\n\n// publish\n\ntype PublishResponse = {\n  timetoken: number\n};\n\ntype PublishArguments = {\n  message: Object | string | number | boolean, // the contents of the dispatch\n  channel: string, // the destination of our dispatch\n  sendByPost: boolean | null, // use POST when dispatching the message\n  storeInHistory: boolean | null, // store the published message in remote history\n  meta: Object, // psv2 supports filtering by metadata\n  replicate: boolean | null // indicates to server on replication status to other data centers.\n}\n\n// signal\ntype SignalResponse = {\n  timetoken: number\n};\n\ntype SignalArguments = {\n  message: Object | string | number | boolean,\n  channel: string\n}\n\n// Actions\n\ninterface MessageAction {\n  type: string,\n  value: string,\n}\n\ninterface PublishedMessageAction extends MessageAction {\n  messageTimetoken: string,\n  actionTimetoken: string,\n  uuid: string,\n}\n\ntype MessageActionAnnouncement = {\n  data: PublishedMessageAction,\n  event: string,\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number | string,\n  userMetadata: Object,\n  publisher: string\n}\n\ninterface AddMessageActionInput {\n  messageTimetoken: string,\n  channel: string,\n  action: MessageAction,\n}\n\ninterface AddMessageActionResponse {\n  data: PublishedMessageAction,\n}\n\ninterface RemoveMessageActionInput {\n  messageTimetoken: string,\n  actionTimetoken: string,\n  channel: string,\n}\n\ninterface RemoveMessageActionResponse {\n  data: {},\n}\n\ninterface GetMessageActionsInput {\n  channel: string,\n  start?: number | string,\n  end?: number | string,\n  limit?: number,\n}\n\ninterface GetMessageActionsResponse {\n  data: Array<PublishedMessageAction>,\n  start?: string,\n  end?: string,\n}\n\n// Users Object\n\ntype UserListInput = {\n  limit?: number,\n  page?: {\n    next?: string,\n    prev?: string,\n  },\n  include?: {\n    totalCount?: boolean,\n    customFields?: boolean,\n  },\n  filter?: string,\n}\n\ntype SingleUserInput = {\n  userId: string,\n  include?: {\n    customFields?: boolean,\n  }\n}\n\ntype UsersObjectInput = {\n  id: string,\n  name: string,\n  externalId?: string,\n  profileUrl?: string,\n  email?: string,\n  custom?: Object,\n};\n\ntype UserResponse = {\n  status: number,\n  data: {\n    ...UsersObjectInput,\n    created: string,\n    updated: string,\n    eTag: string,\n  },\n};\n\ntype UsersListResponse = {\n  status: number,\n  totalCount: number,\n  next: String,\n  prev: String,\n  data: Array<UserResponse>,\n};\n\n// Spaces Object\n\ntype SpaceListInput = {\n  limit?: number,\n  page?: {\n    next?: string,\n    prev?: string,\n  },\n  include?: {\n    totalCount?: boolean,\n    customFields?: boolean,\n  },\n  filter?: string,\n}\n\ntype SingleSpaceInput = {\n  spaceId: string,\n  include?: {\n    customFields?: boolean,\n  }\n}\n\ntype SpacesObjectInput = {\n  id: string,\n  name: string,\n  description?: String,\n  custom?: Object,\n  include?: {\n    customFields?: boolean,\n  }\n};\n\ntype SpacesResponse = {\n  status: number,\n  data: {\n    ...SpacesObjectInput,\n    created: string,\n    updated: string,\n    eTag: string,\n  },\n};\n\ntype SpaceResponse = {\n  status: number,\n  data: {\n    ...SpacesObjectInput,\n    created: string,\n    updated: string,\n    eTag: string,\n  },\n};\n\ntype SpacesListResponse = {\n  status: number,\n  totalCount: number,\n  next: String,\n  prev: String,\n  data: Array<SpaceResponse>,\n};\n\n// Memberships Object\n\ntype MembershipsInput = {\n  userId: string,\n  limit?: number,\n  page?: {\n    next?: string,\n    prev?: string,\n  },\n  include?: {\n    totalCount?: boolean,\n    customFields?: boolean,\n    spaceFields?: boolean,\n    customSpaceFields?: boolean,\n  },\n  filter?: string,\n}\n\ntype MembershipsObjectInput = {\n  id: string,\n  custom?: Object,\n  space?: SpacesResponse,\n};\n\ntype MembershipsResponse = {\n  status: number,\n  data: {\n    ...MembershipsObjectInput,\n    created: string,\n    updated: string,\n    eTag: string,\n  },\n};\n\ntype MembershipsListResponse = {\n  status: number,\n  totalCount: number,\n  next: String,\n  prev: String,\n  data: Array<MembershipsResponse>,\n};\n\ninterface AddMemberships extends MembershipsInput {\n  addMemberships: Array<MembershipsObjectInput>,\n}\n\ninterface UpdateMemberships extends MembershipsInput {\n  updateMemberships: Array<MembershipsObjectInput>,\n}\n\ninterface RemoveMemberships extends MembershipsInput {\n  removeMemberships: Array<string>,\n}\n\ninterface AddUpdateRemoveMemberships extends AddMemberships, UpdateMemberships, RemoveMemberships {}\n\n// Members Object\n\ntype MembersInput = {\n  spaceId: string,\n  limit?: number,\n  page?: {\n    next?: string,\n    prev?: string,\n  },\n  include?: {\n    totalCount?: boolean,\n    customFields?: boolean,\n    userFields?: boolean,\n    customUserFields?: boolean,\n  },\n  filter?: string,\n}\n\ntype MembersObjectInput = {\n  id: string,\n  custom?: Object,\n  user?: UserResponse,\n};\n\ntype MembersResponse = {\n  status: number,\n  data: {\n    ...MembersObjectInput,\n    created: string,\n    updated: string,\n    eTag: string,\n  },\n};\n\ntype MembersListResponse = {\n  status: number,\n  totalCount: number,\n  next: String,\n  prev: String,\n  data: Array<MembersResponse>,\n};\n\ninterface AddMembers extends MembersInput {\n  addMembers: Array<MembersObjectInput>,\n}\n\ninterface UpdateMembers extends MembersInput {\n  updateMembers: Array<MembersObjectInput>,\n}\n\ninterface RemoveMembers extends MembersInput {\n  removeMembers: Array<string>,\n}\n\ninterface AddUpdateRemoveMembers extends AddMembers, UpdateMembers, RemoveMembers {}\n\n//\n\ntype ModulesInject = {\n  config: Object;\n}\n\nmodule.exports = {};\n"],"file":"flow_interfaces.js"}