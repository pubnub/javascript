{"version":3,"sources":["core/flow_interfaces.js"],"names":["module","exports"],"mappings":";;AAwYAA,OAAOC,OAAP,GAAiB,EAAjB","file":"flow_interfaces.js","sourcesContent":["/* eslint no-unused-vars: 0 */\r\ndeclare module 'uuid' {\r\n  declare function v4(): string;\r\n}\r\n\r\ndeclare module 'superagent' {\r\n  declare function type(): superagent;\r\n}\r\n\r\nexport type CallbackStruct = {\r\n  status: Function,\r\n  presence: Function,\r\n  message: Function\r\n}\r\n\r\nexport type ProxyStruct = {\r\n  port: number,\r\n  hostname: string,\r\n  headers: Object\r\n}\r\n\r\nexport type KeepAliveStruct = {\r\n  keepAlive: number,\r\n  keepAliveMsecs: number,\r\n  freeSocketKeepAliveTimeout: number,\r\n  timeout: number,\r\n  maxSockets: number,\r\n  maxFreeSockets: number\r\n}\r\n\r\nexport type NetworkingModules = {\r\n  keepAlive: ?Function,\r\n  sendBeacon: ?Function,\r\n  get: Function,\r\n  post: Function\r\n}\r\n\r\nexport type InternalSetupStruct = {\r\n  useSendBeacon: ?boolean, // configuration on beacon usage\r\n  publishKey: ?string, // API key required for publishing\r\n  subscribeKey: string, // API key required to subscribe\r\n  cipherKey: string, // decryption keys\r\n  origin: ?string, // an optional FQDN which will recieve calls from the SDK.\r\n  ssl: boolean, // is SSL enabled?\r\n  shutdown: Function, // function to call when pubnub is shutting down.\r\n\r\n  sendBeacon: ?Function, // executes a call against the Beacon API\r\n  useSendBeacon: ?boolean, // enable, disable usage of send beacons\r\n\r\n  subscribeRequestTimeout: ?number, // how long to wait for subscribe requst\r\n  transactionalRequestTimeout: ?number, // how long to wait for transactional requests\r\n\r\n  proxy: ?ProxyStruct, // configuration to support proxy settings.\r\n\r\n  keepAlive: ?boolean, // is keep-alive enabled?\r\n\r\n  keepAliveSettings: ?KeepAliveStruct, // configuration on keep-alive usage\r\n\r\n  suppressLev: ?boolean,\r\n\r\n  db: Function, // get / set implementation to store data\r\n  networking: Function // component of networking to use\r\n}\r\n\r\ntype DatabaseInterface = {\r\n  get: Function,\r\n  set: Function\r\n}\r\n\r\ntype EndpointKeyDefinition = {\r\n  required: boolean\r\n}\r\n\r\ntype SupportedParams = {\r\n  subscribeKey: EndpointKeyDefinition,\r\n  uuid: EndpointKeyDefinition,\r\n}\r\n\r\nexport type endpointDefinition = {\r\n  params: SupportedParams,\r\n  timeout: number,\r\n  url: string\r\n}\r\n\r\nexport type StateChangeAnnouncement = {\r\n  state: Object,\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>\r\n}\r\n\r\n// ****************** SUBSCRIPTIONS ********************************************\r\n\r\ntype SubscribeMetadata = {\r\n  timetoken: number,\r\n  region: number\r\n}\r\n\r\ntype PublishMetaData = {\r\n  publishTimetoken: number,\r\n  region: number\r\n}\r\n\r\ntype SubscribeMessage = {\r\n  shard: string,\r\n  subscriptionMatch: string,\r\n  channel: string,\r\n  payload: Object,\r\n  flags: string,\r\n  issuingClientId: string,\r\n  subscribeKey: string,\r\n  originationTimetoken: string,\r\n  publishMetaData: PublishMetaData\r\n\r\n}\r\n\r\n// subscribe responses\r\ntype SubscribeEnvelope = {\r\n  messages: Array<SubscribeMessage>,\r\n  metadata: SubscribeMetadata;\r\n}\r\n\r\n// *****************************************************************************\r\n\r\n\r\n// ****************** Announcements ********************************************\r\n\r\ntype PresenceAnnouncement = {\r\n  event: string,\r\n\r\n  uuid: string,\r\n  timestamp: number,\r\n  occupancy: number,\r\n  state: Object,\r\n\r\n  subscribedChannel: string, // deprecated\r\n  actualChannel: string,     // deprecated\r\n\r\n  channel: string,\r\n  subscription: string,\r\n\r\n  timetoken: number,\r\n  userMetadata: Object\r\n}\r\n\r\ntype MessageAnnouncement = {\r\n\r\n  message: Object,\r\n\r\n  subscribedChannel: string, // deprecated\r\n  actualChannel: string,     // deprecated\r\n\r\n  channel: string,\r\n  subscription: string,\r\n\r\n  timetoken: number | string,\r\n  userMetadata: Object,\r\n  publisher: string\r\n}\r\n\r\nexport type StatusAnnouncement = {\r\n  error: boolean,\r\n  statusCode: number,\r\n  category: string,\r\n  errorData: Object,\r\n  lastTimetoken: number,\r\n  currentTimetoken: number,\r\n\r\n  // send back channel, channel groups that were affected by this operation\r\n  affectedChannels: Array<String>,\r\n  affectedChannelGroups: Array<String>,\r\n}\r\n\r\n// *****************************************************************************\r\n\r\n// Time endpoints\r\n\r\ntype TimeResponse = {\r\n  timetoken: number\r\n};\r\n\r\n// history\r\ntype FetchHistoryArguments = {\r\n  channel: string, // fetch history from a channel\r\n  start: number | string, // start timetoken for history fetching\r\n  end: number | string, // end timetoken for history fetching\r\n  includeTimetoken: boolean, // include time token for each history call\r\n  reverse: boolean,\r\n  count: number\r\n}\r\n\r\n// history\r\nexport type MessageCounterArguments = {\r\n  channels: Array<string>, // fetch history from a channel\r\n  timetoken: number | null,\r\n  channelTimetokens: Array<string> | null\r\n}\r\n\r\ntype FetchMessagesArguments = {\r\n  channels: string, // fetch history from a channel\r\n  start: number | string, // start timetoken for history fetching\r\n  end: number | string, // end timetoken for history fetching\r\n  count: number\r\n}\r\n\r\ntype HistoryItem = {\r\n  timetoken: number | string | null,\r\n  entry: any,\r\n}\r\n\r\ntype HistoryResponse = {\r\n  messages: Array<HistoryItem>,\r\n  startTimeToken: number | string,\r\n  endTimeToken: number | string,\r\n}\r\n\r\n\r\nexport type MessageCountersResponse = {\r\n  channels: Object\r\n}\r\n\r\ntype HistoryV3Response = {\r\n  channels: Object\r\n}\r\n\r\n// CG endpoints\r\n\r\ntype AddChannelParams = {\r\n  channels: Array<string>,\r\n  channelGroup: string,\r\n}\r\n\r\ntype RemoveChannelParams = {\r\n  channels: Array<string>,\r\n  channelGroup: string,\r\n}\r\n\r\ntype DeleteGroupParams = {\r\n  channelGroup: string,\r\n}\r\n\r\ntype ListAllGroupsResponse = {\r\n  groups: Array<string>\r\n}\r\n\r\ntype ListChannelsParams = {\r\n  channelGroup: string,\r\n}\r\n\r\ntype ListChannelsResponse = {\r\n  channels: Array<string>\r\n}\r\n\r\n//\r\n\r\n// push\r\n\r\ntype ProvisionDeviceArgs = {\r\n  operation: 'add' | 'remove',\r\n  pushGateway: 'gcm' | 'apns' | 'mpns',\r\n  device: string,\r\n  channels: Array<string>\r\n};\r\n\r\ntype ModifyDeviceArgs = {\r\n  pushGateway: 'gcm' | 'apns' | 'mpns',\r\n  device: string,\r\n  channels: Array<string>\r\n};\r\n\r\ntype ListChannelsArgs = {\r\n  pushGateway: 'gcm' | 'apns' | 'mpns',\r\n  device: string,\r\n};\r\n\r\ntype RemoveDeviceArgs = {\r\n  pushGateway: 'gcm' | 'apns' | 'mpns',\r\n  device: string,\r\n};\r\n\r\ntype ListPushChannelsResponse = {\r\n  channels: Array<string>\r\n}\r\n\r\n//\r\n\r\n// presence\r\n\r\ntype LeaveArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n}\r\n\r\ntype HereNowArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  includeUUIDs: boolean,\r\n  includeState: boolean\r\n}\r\n\r\ntype WhereNowArguments = {\r\n  uuid: string,\r\n}\r\n\r\ntype WhereNowResponse = {\r\n  channels: Array<string>,\r\n}\r\n\r\n//\r\n\r\ntype GetStateArguments = {\r\n  uuid: string,\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>\r\n}\r\n\r\ntype GetStateResponse = {\r\n  channels: Object\r\n}\r\n\r\n//\r\n\r\ntype SetStateArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  state: Object\r\n}\r\n\r\ntype SetStateResponse = {\r\n  state: Object\r\n}\r\n\r\n\r\ntype HeartbeatArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  state: Object\r\n}\r\n\r\n//\r\n\r\n// subscribe\r\n\r\ntype SubscribeArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  timetoken: number,\r\n  filterExpression: ?string,\r\n  region: ?string,\r\n  state: Object\r\n}\r\n\r\n//\r\n\r\n// access manager\r\n\r\ntype AuditArguments = {\r\n  channel: string,\r\n  channelGroup: string,\r\n  authKeys: Array<string>,\r\n}\r\n\r\ntype GrantArguments = {\r\n  channels: Array<string>,\r\n  channelGroups: Array<string>,\r\n  ttl: number,\r\n  read: boolean,\r\n  write: boolean,\r\n  manage: boolean,\r\n  authKeys: Array<string>\r\n}\r\n\r\n// publish\r\n\r\ntype PublishResponse = {\r\n  timetoken: number\r\n};\r\n\r\ntype PublishArguments = {\r\n  message: Object | string | number | boolean, // the contents of the dispatch\r\n  channel: string, // the destination of our dispatch\r\n  sendByPost: boolean | null, // use POST when dispatching the message\r\n  storeInHistory: boolean | null, // store the published message in remote history\r\n  meta: Object, // psv2 supports filtering by metadata\r\n  replicate: boolean | null // indicates to server on replication status to other data centers.\r\n}\r\n\r\n//\r\n\r\ntype ModulesInject = {\r\n  config: Object;\r\n}\r\n\r\nmodule.exports = {};\r\n"]}