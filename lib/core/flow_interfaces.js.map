{"version":3,"sources":["core/flow_interfaces.js"],"names":["module","exports"],"mappings":";;AAwYAA,OAAOC,OAAP,GAAiB,EAAjB","file":"flow_interfaces.js","sourcesContent":["/* eslint no-unused-vars: 0 */\ndeclare module 'uuid' {\n  declare function v4(): string;\n}\n\ndeclare module 'superagent' {\n  declare function type(): superagent;\n}\n\nexport type CallbackStruct = {\n  status: Function,\n  presence: Function,\n  message: Function\n}\n\nexport type ProxyStruct = {\n  port: number,\n  hostname: string,\n  headers: Object\n}\n\nexport type KeepAliveStruct = {\n  keepAlive: number,\n  keepAliveMsecs: number,\n  freeSocketKeepAliveTimeout: number,\n  timeout: number,\n  maxSockets: number,\n  maxFreeSockets: number\n}\n\nexport type NetworkingModules = {\n  keepAlive: ?Function,\n  sendBeacon: ?Function,\n  get: Function,\n  post: Function\n}\n\nexport type InternalSetupStruct = {\n  useSendBeacon: ?boolean, // configuration on beacon usage\n  publishKey: ?string, // API key required for publishing\n  subscribeKey: string, // API key required to subscribe\n  cipherKey: string, // decryption keys\n  origin: ?string, // an optional FQDN which will recieve calls from the SDK.\n  ssl: boolean, // is SSL enabled?\n  shutdown: Function, // function to call when pubnub is shutting down.\n\n  sendBeacon: ?Function, // executes a call against the Beacon API\n  useSendBeacon: ?boolean, // enable, disable usage of send beacons\n\n  subscribeRequestTimeout: ?number, // how long to wait for subscribe requst\n  transactionalRequestTimeout: ?number, // how long to wait for transactional requests\n\n  proxy: ?ProxyStruct, // configuration to support proxy settings.\n\n  keepAlive: ?boolean, // is keep-alive enabled?\n\n  keepAliveSettings: ?KeepAliveStruct, // configuration on keep-alive usage\n\n  suppressLev: ?boolean,\n\n  db: Function, // get / set implementation to store data\n  networking: Function // component of networking to use\n}\n\ntype DatabaseInterface = {\n  get: Function,\n  set: Function\n}\n\ntype EndpointKeyDefinition = {\n  required: boolean\n}\n\ntype SupportedParams = {\n  subscribeKey: EndpointKeyDefinition,\n  uuid: EndpointKeyDefinition,\n}\n\nexport type endpointDefinition = {\n  params: SupportedParams,\n  timeout: number,\n  url: string\n}\n\nexport type StateChangeAnnouncement = {\n  state: Object,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\n// ****************** SUBSCRIPTIONS ********************************************\n\ntype SubscribeMetadata = {\n  timetoken: number,\n  region: number\n}\n\ntype PublishMetaData = {\n  publishTimetoken: number,\n  region: number\n}\n\ntype SubscribeMessage = {\n  shard: string,\n  subscriptionMatch: string,\n  channel: string,\n  payload: Object,\n  flags: string,\n  issuingClientId: string,\n  subscribeKey: string,\n  originationTimetoken: string,\n  publishMetaData: PublishMetaData\n\n}\n\n// subscribe responses\ntype SubscribeEnvelope = {\n  messages: Array<SubscribeMessage>,\n  metadata: SubscribeMetadata;\n}\n\n// *****************************************************************************\n\n\n// ****************** Announcements ********************************************\n\ntype PresenceAnnouncement = {\n  event: string,\n\n  uuid: string,\n  timestamp: number,\n  occupancy: number,\n  state: Object,\n\n  subscribedChannel: string, // deprecated\n  actualChannel: string,     // deprecated\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number,\n  userMetadata: Object\n}\n\ntype MessageAnnouncement = {\n\n  message: Object,\n\n  subscribedChannel: string, // deprecated\n  actualChannel: string,     // deprecated\n\n  channel: string,\n  subscription: string,\n\n  timetoken: number | string,\n  userMetadata: Object,\n  publisher: string\n}\n\nexport type StatusAnnouncement = {\n  error: boolean,\n  statusCode: number,\n  category: string,\n  errorData: Object,\n  lastTimetoken: number,\n  currentTimetoken: number,\n\n  // send back channel, channel groups that were affected by this operation\n  affectedChannels: Array<String>,\n  affectedChannelGroups: Array<String>,\n}\n\n// *****************************************************************************\n\n// Time endpoints\n\ntype TimeResponse = {\n  timetoken: number\n};\n\n// history\ntype FetchHistoryArguments = {\n  channel: string, // fetch history from a channel\n  start: number | string, // start timetoken for history fetching\n  end: number | string, // end timetoken for history fetching\n  includeTimetoken: boolean, // include time token for each history call\n  reverse: boolean,\n  count: number\n}\n\n// history\nexport type MessageCounterArguments = {\n  channels: Array<string>, // fetch history from a channel\n  timetoken: number | null,\n  channelTimetokens: Array<string> | null\n}\n\ntype FetchMessagesArguments = {\n  channels: string, // fetch history from a channel\n  start: number | string, // start timetoken for history fetching\n  end: number | string, // end timetoken for history fetching\n  count: number\n}\n\ntype HistoryItem = {\n  timetoken: number | string | null,\n  entry: any,\n}\n\ntype HistoryResponse = {\n  messages: Array<HistoryItem>,\n  startTimeToken: number | string,\n  endTimeToken: number | string,\n}\n\n\nexport type MessageCountersResponse = {\n  channels: Object\n}\n\ntype HistoryV3Response = {\n  channels: Object\n}\n\n// CG endpoints\n\ntype AddChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\ntype RemoveChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\ntype DeleteGroupParams = {\n  channelGroup: string,\n}\n\ntype ListAllGroupsResponse = {\n  groups: Array<string>\n}\n\ntype ListChannelsParams = {\n  channelGroup: string,\n}\n\ntype ListChannelsResponse = {\n  channels: Array<string>\n}\n\n//\n\n// push\n\ntype ProvisionDeviceArgs = {\n  operation: 'add' | 'remove',\n  pushGateway: 'gcm' | 'apns' | 'mpns',\n  device: string,\n  channels: Array<string>\n};\n\ntype ModifyDeviceArgs = {\n  pushGateway: 'gcm' | 'apns' | 'mpns',\n  device: string,\n  channels: Array<string>\n};\n\ntype ListChannelsArgs = {\n  pushGateway: 'gcm' | 'apns' | 'mpns',\n  device: string,\n};\n\ntype RemoveDeviceArgs = {\n  pushGateway: 'gcm' | 'apns' | 'mpns',\n  device: string,\n};\n\ntype ListPushChannelsResponse = {\n  channels: Array<string>\n}\n\n//\n\n// presence\n\ntype LeaveArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n}\n\ntype HereNowArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  includeUUIDs: boolean,\n  includeState: boolean\n}\n\ntype WhereNowArguments = {\n  uuid: string,\n}\n\ntype WhereNowResponse = {\n  channels: Array<string>,\n}\n\n//\n\ntype GetStateArguments = {\n  uuid: string,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype GetStateResponse = {\n  channels: Object\n}\n\n//\n\ntype SetStateArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SetStateResponse = {\n  state: Object\n}\n\n\ntype HeartbeatArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\n//\n\n// subscribe\n\ntype SubscribeArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  timetoken: number,\n  filterExpression: ?string,\n  region: ?string,\n  state: Object\n}\n\n//\n\n// access manager\n\ntype AuditArguments = {\n  channel: string,\n  channelGroup: string,\n  authKeys: Array<string>,\n}\n\ntype GrantArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  ttl: number,\n  read: boolean,\n  write: boolean,\n  manage: boolean,\n  authKeys: Array<string>\n}\n\n// publish\n\ntype PublishResponse = {\n  timetoken: number\n};\n\ntype PublishArguments = {\n  message: Object | string | number | boolean, // the contents of the dispatch\n  channel: string, // the destination of our dispatch\n  sendByPost: boolean | null, // use POST when dispatching the message\n  storeInHistory: boolean | null, // store the published message in remote history\n  meta: Object, // psv2 supports filtering by metadata\n  replicate: boolean | null // indicates to server on replication status to other data centers.\n}\n\n//\n\ntype ModulesInject = {\n  config: Object;\n}\n\nmodule.exports = {};\n"]}