{"version":3,"sources":["core/endpoints/presence/get_state.js"],"names":["getOperation","operationConstants","PNGetStateOperation","validateParams","modules","config","subscribeKey","getURL","incomingParams","uuid","UUID","channels","stringifiedChannels","length","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","channelGroups","params","handleResponse","serverResponse","channelsResponse","payload"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAEO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,mBAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgD;AACrD,MAAMC,MAAN,GAAiBD,OAAjB,CAAMC,MAAN;AAEA,MAAI,CAACA,MAAM,CAACC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CAAgBH,OAAhB,EAAwCI,cAAxC,EAAmF;AACxF,MAAMH,MAAN,GAAiBD,OAAjB,CAAMC,MAAN;AACA,6BAA4CG,cAA5C,CAAMC,IAAN;AAAA,MAAMA,IAAN,qCAAaJ,MAAM,CAACK,IAApB;AAAA,8BAA4CF,cAA5C,CAA0BG,QAA1B;AAAA,MAA0BA,QAA1B,sCAAqC,EAArC;AACA,MAAIC,mBAAmB,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GAAsBF,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,wCAA+BT,MAAM,CAACC,YAAtC,sBAA8DS,kBAAMC,YAAN,CAAmBJ,mBAAnB,CAA9D,mBAA8GH,IAA9G;AACD;;AAEM,SAASQ,iBAAT,OAA8D;AAAA,MAAjCZ,MAAiC,QAAjCA,MAAiC;AACnE,SAAOA,MAAM,CAACa,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBhB,OAAvB,EAA+CI,cAA/C,EAA0F;AAC/F,+BAA6BA,cAA7B,CAAMa,aAAN;AAAA,MAAMA,aAAN,uCAAsB,EAAtB;AACA,MAAMC,MAAM,GAAG,EAAf;;AAEA,MAAID,aAAa,CAACR,MAAd,GAAuB,CAA3B,EAA8B;AAC5BS,IAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BD,aAAa,CAACP,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOQ,MAAP;AACD;;AAEM,SAASC,cAAT,CAAwBnB,OAAxB,EAAgDoB,cAAhD,EAAwEhB,cAAxE,EAA6H;AAClI,+BAA4CA,cAA5C,CAAMG,QAAN;AAAA,MAAMA,QAAN,uCAAiB,EAAjB;AAAA,+BAA4CH,cAA5C,CAAqBa,aAArB;AAAA,MAAqBA,aAArB,uCAAqC,EAArC;AACA,MAAII,gBAAgB,GAAG,EAAvB;;AAEA,MAAId,QAAQ,CAACE,MAAT,KAAoB,CAApB,IAAyBQ,aAAa,CAACR,MAAd,KAAyB,CAAtD,EAAyD;AACvDY,IAAAA,gBAAgB,CAACd,QAAQ,CAAC,CAAD,CAAT,CAAhB,GAAgCa,cAAc,CAACE,OAA/C;AACD,GAFD,MAEO;AACLD,IAAAA,gBAAgB,GAAGD,cAAc,CAACE,OAAlC;AACD;;AAED,SAAO;AAAEf,IAAAA,QAAQ,EAAEc;AAAZ,GAAP;AACD","sourcesContent":["/* @flow */\n\nimport { GetStateArguments, GetStateResponse, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNGetStateOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: GetStateArguments): string {\n  let { config } = modules;\n  let { uuid = config.UUID, channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/presence/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}/uuid/${uuid}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: GetStateArguments): Object {\n  let { channelGroups = [] } = incomingParams;\n  const params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object, incomingParams: GetStateArguments): GetStateResponse {\n  let { channels = [], channelGroups = [] } = incomingParams;\n  let channelsResponse = {};\n\n  if (channels.length === 1 && channelGroups.length === 0) {\n    channelsResponse[channels[0]] = serverResponse.payload;\n  } else {\n    channelsResponse = serverResponse.payload;\n  }\n\n  return { channels: channelsResponse };\n}\n"],"file":"get_state.js"}