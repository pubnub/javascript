{"version":3,"sources":["core/endpoints/presence/leave.js"],"names":["getOperation","operationConstants","PNUnsubscribeOperation","validateParams","modules","config","subscribeKey","getURL","incomingParams","channels","stringifiedChannels","length","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","channelGroups","params","handleResponse"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAEO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,sBAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgD;AACrD,MAAMC,MAAN,GAAiBD,OAAjB,CAAMC,MAAN;AAEA,MAAI,CAACA,MAAM,CAACC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CAAgBH,OAAhB,EAAwCI,cAAxC,EAAgF;AACrF,MAAMH,MAAN,GAAiBD,OAAjB,CAAMC,MAAN;AACA,8BAAwBG,cAAxB,CAAMC,QAAN;AAAA,MAAMA,QAAN,sCAAiB,EAAjB;AACA,MAAIC,mBAAmB,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GAAsBF,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,wCAA+BP,MAAM,CAACC,YAAtC,sBAA8DO,kBAAMC,YAAN,CAAmBJ,mBAAnB,CAA9D;AACD;;AAEM,SAASK,iBAAT,OAAsD;AAAA,MAAzBV,MAAyB,QAAzBA,MAAyB;AAC3D,SAAOA,MAAM,CAACW,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBd,OAAvB,EAA+CI,cAA/C,EAAuF;AAC5F,+BAA6BA,cAA7B,CAAMW,aAAN;AAAA,MAAMA,aAAN,uCAAsB,EAAtB;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,MAAID,aAAa,CAACR,MAAd,GAAuB,CAA3B,EAA8B;AAC5BS,IAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BD,aAAa,CAACP,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOQ,MAAP;AACD;;AAEM,SAASC,cAAT,GAAkC;AACvC,SAAO,EAAP;AACD","sourcesContent":["/* @flow */\n\nimport { LeaveArguments, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNUnsubscribeOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: LeaveArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/presence/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}/leave`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: LeaveArguments): Object {\n  let { channelGroups = [] } = incomingParams;\n  let params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(): Object {\n  return {};\n}\n"],"file":"leave.js"}