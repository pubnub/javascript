{"version":3,"sources":["core/endpoints/presence/leave.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNUnsubscribeOperation","modules","config","subscribeKey","incomingParams","channels","stringifiedChannels","length","join","utils","encodeString","getTransactionTimeout","channelGroups","params"],"mappings":";;;;;QAMgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAMAC,M,GAAAA,M;QAOAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAWAC,c,GAAAA,c;;AAxChB;;AACA;;;;AACA;;;;;;AAEO,SAASN,YAAT,GAAgC;AACrC,SAAOO,qBAAmBC,sBAA1B;AACD;;AAEM,SAASP,cAAT,CAAwBQ,OAAxB,EAAgD;AAAA,MAC/CC,MAD+C,GACpCD,OADoC,CAC/CC,MAD+C;;;AAGrD,MAAI,CAACA,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAST,MAAT,CAAgBO,OAAhB,EAAwCG,cAAxC,EAAgF;AAAA,MAC/EF,MAD+E,GACpED,OADoE,CAC/EC,MAD+E;AAAA,8BAE7DE,cAF6D,CAE/EC,QAF+E;AAAA,MAE/EA,QAF+E,yCAEpE,EAFoE;;AAGrF,MAAIC,sBAAsBD,SAASE,MAAT,GAAkB,CAAlB,GAAsBF,SAASG,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,mCAA+BN,OAAOC,YAAtC,iBAA8DM,gBAAMC,YAAN,CAAmBJ,mBAAnB,CAA9D;AACD;;AAEM,SAASX,iBAAT,OAAsD;AAAA,MAAzBO,MAAyB,QAAzBA,MAAyB;;AAC3D,SAAOA,OAAOS,qBAAP,EAAP;AACD;;AAEM,SAASf,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBI,OAAvB,EAA+CG,cAA/C,EAAuF;AAAA,+BAC/DA,cAD+D,CACtFQ,aADsF;AAAA,MACtFA,aADsF,0CACtE,EADsE;;AAE5F,MAAIC,SAAS,EAAb;;AAEA,MAAID,cAAcL,MAAd,GAAuB,CAA3B,EAA8B;AAC5BM,WAAO,eAAP,IAA0BD,cAAcJ,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOK,MAAP;AACD;;AAEM,SAASf,cAAT,GAAkC;AACvC,SAAO,EAAP;AACD","file":"leave.js","sourcesContent":["/* @flow */\n\nimport { LeaveArguments, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNUnsubscribeOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: LeaveArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/presence/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}/leave`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: LeaveArguments): Object {\n  let { channelGroups = [] } = incomingParams;\n  let params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(): Object {\n  return {};\n}\n"]}