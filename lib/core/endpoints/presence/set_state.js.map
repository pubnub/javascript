{"version":3,"sources":["core/endpoints/presence/set_state.js"],"names":["getOperation","operationConstants","PNSetStateOperation","validateParams","modules","incomingParams","config","state","channels","channelGroups","subscribeKey","length","getURL","stringifiedChannels","join","utils","encodeString","UUID","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","params","JSON","stringify","handleResponse","serverResponse","payload"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAEO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,mBAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgDC,cAAhD,EAAmF;AACxF,MAAMC,MAAN,GAAiBF,OAAjB,CAAME,MAAN;AACA,MAAMC,KAAN,GAAmDF,cAAnD,CAAME,KAAN;AAAA,8BAAmDF,cAAnD,CAAaG,QAAb;AAAA,MAAaA,QAAb,sCAAwB,EAAxB;AAAA,+BAAmDH,cAAnD,CAA4BI,aAA5B;AAAA,MAA4BA,aAA5B,uCAA4C,EAA5C;AAEA,MAAI,CAACF,KAAL,EAAY,OAAO,eAAP;AACZ,MAAI,CAACD,MAAM,CAACI,YAAZ,EAA0B,OAAO,uBAAP;AAC1B,MAAIF,QAAQ,CAACG,MAAT,KAAoB,CAApB,IAAyBF,aAAa,CAACE,MAAd,KAAyB,CAAtD,EAAyD,OAAO,yDAAP;AAC1D;;AAEM,SAASC,MAAT,CAAgBR,OAAhB,EAAwCC,cAAxC,EAAmF;AACxF,MAAMC,MAAN,GAAiBF,OAAjB,CAAME,MAAN;AACA,+BAAwBD,cAAxB,CAAMG,QAAN;AAAA,MAAMA,QAAN,uCAAiB,EAAjB;AACA,MAAIK,mBAAmB,GAAGL,QAAQ,CAACG,MAAT,GAAkB,CAAlB,GAAsBH,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,wCAA+BR,MAAM,CAACI,YAAtC,sBAA8DK,kBAAMC,YAAN,CAAmBH,mBAAnB,CAA9D,mBAA8GE,kBAAMC,YAAN,CAAmBV,MAAM,CAACW,IAA1B,CAA9G;AACD;;AAEM,SAASC,iBAAT,OAA8D;AAAA,MAAjCZ,MAAiC,QAAjCA,MAAiC;AACnE,SAAOA,MAAM,CAACa,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBjB,OAAvB,EAA+CC,cAA/C,EAA0F;AAC/F,MAAME,KAAN,GAAoCF,cAApC,CAAME,KAAN;AAAA,+BAAoCF,cAApC,CAAaI,aAAb;AAAA,MAAaA,aAAb,uCAA6B,EAA7B;AACA,MAAMa,MAAM,GAAG,EAAf;AAEAA,EAAAA,MAAM,CAACf,KAAP,GAAegB,IAAI,CAACC,SAAL,CAAejB,KAAf,CAAf;;AAEA,MAAIE,aAAa,CAACE,MAAd,GAAuB,CAA3B,EAA8B;AAC5BW,IAAAA,MAAM,CAAC,eAAD,CAAN,GAA0Bb,aAAa,CAACK,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOQ,MAAP;AACD;;AAEM,SAASG,cAAT,CAAwBrB,OAAxB,EAAgDsB,cAAhD,EAA0F;AAC/F,SAAO;AAAEnB,IAAAA,KAAK,EAAEmB,cAAc,CAACC;AAAxB,GAAP;AACD","sourcesContent":["/* @flow */\n\nimport { SetStateArguments, SetStateResponse, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNSetStateOperation;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: SetStateArguments) {\n  let { config } = modules;\n  let { state, channels = [], channelGroups = [] } = incomingParams;\n\n  if (!state) return 'Missing State';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n  if (channels.length === 0 && channelGroups.length === 0) return 'Please provide a list of channels and/or channel-groups';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: SetStateArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/presence/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}/uuid/${utils.encodeString(config.UUID)}/data`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: SetStateArguments): Object {\n  let { state, channelGroups = [] } = incomingParams;\n  const params = {};\n\n  params.state = JSON.stringify(state);\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): SetStateResponse {\n  return { state: serverResponse.payload };\n}\n"],"file":"set_state.js"}