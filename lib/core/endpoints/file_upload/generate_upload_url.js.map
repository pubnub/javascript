{"version":3,"sources":["core/endpoints/file_upload/generate_upload_url.js"],"names":["endpoint","getOperation","operationConstants","PNGenerateUploadUrlOperation","validateParams","_","params","channel","name","usePost","postURL","config","subscribeKey","utils","encodeString","postPayload","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","handleResponse","response","status","data","file_upload_request"],"mappings":";;;;;;;;;AAGA;;AAEA;;AAEA,IAAMA,QAA0E,GAAG;AACjFC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,4BAAzB;AAAA,GADmE;AAGjFC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,yBAAP;AACD;;AAED,QAAI,EAACD,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEE,IAAT,CAAJ,EAAmB;AACjB,aAAO,sBAAP;AACD;AACF,GAXgF;AAajFC,EAAAA,OAAO,EAAE;AAAA,WAAM,IAAN;AAAA,GAbwE;AAcjFC,EAAAA,OAAO,EAAE,uBAAaJ,MAAb;AAAA,QAAGK,MAAH,QAAGA,MAAH;AAAA,+BAAqCA,MAAM,CAACC,YAA5C,uBAAqEC,kBAAMC,YAAN,CAAmBR,MAAM,CAACC,OAA1B,CAArE;AAAA,GAdwE;AAgBjFQ,EAAAA,WAAW,EAAE,qBAACV,CAAD,EAAIC,MAAJ;AAAA,WAAgB;AAC3BE,MAAAA,IAAI,EAAEF,MAAM,CAACE;AADc,KAAhB;AAAA,GAhBoE;AAoBjFQ,EAAAA,iBAAiB,EAAE;AAAA,QAAGL,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACM,qBAAP,EAAhB;AAAA,GApB8D;AAsBjFC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAtBgE;AAwBjFC,EAAAA,aAAa,EAAE;AAAA,WAAO,EAAP;AAAA,GAxBkE;AA0BjFC,EAAAA,cAAc,EAAE,wBAACf,CAAD,EAAIgB,QAAJ;AAAA,WAA2C;AACzDC,MAAAA,MAAM,EAAED,QAAQ,CAACC,MADwC;AAEzDC,MAAAA,IAAI,EAAEF,QAAQ,CAACE,IAF0C;AAGzDC,MAAAA,mBAAmB,EAAEH,QAAQ,CAACG;AAH2B,KAA3C;AAAA;AA1BiE,CAAnF;eAiCexB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { GenerateUploadUrlParams, GenerateUploadUrlResult } from './types';\nimport utils from '../../utils';\n\nconst endpoint: EndpointConfig<GenerateUploadUrlParams, GenerateUploadUrlResult> = {\n  getOperation: () => operationConstants.PNGenerateUploadUrlOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return 'channel can\\'t be empty';\n    }\n\n    if (!params?.name) {\n      return 'name can\\'t be empty';\n    }\n  },\n\n  usePost: () => true,\n  postURL: ({ config }, params) => `/v1/files/${config.subscribeKey}/channels/${utils.encodeString(params.channel)}/generate-upload-url`,\n\n  postPayload: (_, params) => ({\n    name: params.name\n  }),\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  prepareParams: () => ({}),\n\n  handleResponse: (_, response): GenerateUploadUrlResult => ({\n    status: response.status,\n    data: response.data,\n    file_upload_request: response.file_upload_request,\n  }),\n};\n\nexport default endpoint;\n"],"file":"generate_upload_url.js"}