{"version":3,"sources":["core/endpoints/file_upload/download_file.js"],"names":["endpoint","getOperation","operationConstants","PNDownloadFileOperation","validateParams","_","params","channel","name","id","useGetFile","getFileURL","config","subscribeKey","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","ignoreBody","forceBuffered","prepareParams","handleResponse","res","PubNubFile","cryptography","body","response","supportsEncryptFile","cipherKey","decrypt","create","data","mimeType","type"],"mappings":";;;;;;;;;;;;;AAGA;;AAEA;;AAEA,IAAMA,QAAgE,GAAG;AACvEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,uBAAzB;AAAA,GADyD;AAGvEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,wBAAP;AACD;;AAED,QAAI,EAACD,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEE,IAAT,CAAJ,EAAmB;AACjB,aAAO,qBAAP;AACD;;AAED,QAAI,EAACF,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEG,EAAT,CAAJ,EAAiB;AACf,aAAO,mBAAP;AACD;AACF,GAfsE;AAiBvEC,EAAAA,UAAU,EAAE;AAAA,WAAM,IAAN;AAAA,GAjB2D;AAmBvEC,EAAAA,UAAU,EAAE,0BAAaL,MAAb;AAAA,QAAGM,MAAH,QAAGA,MAAH;AAAA,+BACGA,MAAM,CAACC,YADV,uBACmCC,kBAAMC,YAAN,CAAmBT,MAAM,CAACC,OAA1B,CADnC,oBAC+ED,MAAM,CAACG,EADtF,cAC4FH,MAAM,CAACE,IADnG;AAAA,GAnB2D;AAsBvEQ,EAAAA,iBAAiB,EAAE;AAAA,QAAGJ,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACK,qBAAP,EAAhB;AAAA,GAtBoD;AAwBvEC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAxBsD;AAyBvEC,EAAAA,UAAU,EAAE;AAAA,WAAM,IAAN;AAAA,GAzB2D;AA0BvEC,EAAAA,aAAa,EAAE;AAAA,WAAM,IAAN;AAAA,GA1BwD;AA4BvEC,EAAAA,aAAa,EAAE;AAAA,WAAO,EAAP;AAAA,GA5BwD;AA8BvEC,EAAAA,cAAc;AAAA,0FAAE,wBAA6CC,GAA7C,EAAkDjB,MAAlD;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASkB,cAAAA,UAAT,SAASA,UAAT,EAAqBZ,MAArB,SAAqBA,MAArB,EAA6Ba,YAA7B,SAA6BA,YAA7B;AACVC,cAAAA,IADU,GACHH,GAAG,CAACI,QAAJ,CAAaD,IADV;;AAAA,oBAGVF,UAAU,CAACI,mBAAX,0BAAmCtB,MAAM,CAACuB,SAA1C,iEAAuDjB,MAAM,CAACiB,SAA9D,CAHU;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAICJ,YAAY,CAACK,OAAb,uBAAqBxB,MAAM,CAACuB,SAA5B,mEAAyCjB,MAAM,CAACiB,SAAhD,EAA2DH,IAA3D,CAJD;;AAAA;AAIZA,cAAAA,IAJY;;AAAA;AAAA,+CAOPF,UAAU,CAACO,MAAX,CAAkB;AACvBC,gBAAAA,IAAI,EAAEN,IADiB;AAEvBlB,gBAAAA,IAAI,wBAAEe,GAAG,CAACI,QAAJ,CAAanB,IAAf,mEAAuBF,MAAM,CAACE,IAFX;AAGvByB,gBAAAA,QAAQ,EAAEV,GAAG,CAACI,QAAJ,CAAaO;AAHA,eAAlB,CAPO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA9ByD,CAAzE;eA6CelC,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { DownloadFileParams, DownloadFileResult } from './types';\nimport utils from '../../utils';\n\nconst endpoint: EndpointConfig<DownloadFileParams, DownloadFileResult> = {\n  getOperation: () => operationConstants.PNDownloadFileOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return \"channel can't be empty\";\n    }\n\n    if (!params?.name) {\n      return \"name can't be empty\";\n    }\n\n    if (!params?.id) {\n      return \"id can't be empty\";\n    }\n  },\n\n  useGetFile: () => true,\n\n  getFileURL: ({ config }, params) =>\n    `/v1/files/${config.subscribeKey}/channels/${utils.encodeString(params.channel)}/files/${params.id}/${params.name}`,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n  ignoreBody: () => true,\n  forceBuffered: () => true,\n\n  prepareParams: () => ({}),\n\n  handleResponse: async ({ PubNubFile, config, cryptography }, res, params): Promise<DownloadFileResult> => {\n    let body = res.response.body;\n\n    if (PubNubFile.supportsEncryptFile && (params.cipherKey ?? config.cipherKey)) {\n      body = await cryptography.decrypt(params.cipherKey ?? config.cipherKey, body);\n    }\n\n    return PubNubFile.create({\n      data: body,\n      name: res.response.name ?? params.name,\n      mimeType: res.response.type,\n    });\n  },\n};\n\nexport default endpoint;\n"],"file":"download_file.js"}