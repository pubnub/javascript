{"version":3,"sources":["core/endpoints/file_upload/get_file_url.js"],"names":["modules","channel","id","name","config","networking","PubNubError","url","subscribeKey","utils","encodeString","params","uuid","getUUID","pnsdk","getAuthKey","auth","secretKey","getOperation","queryParams","Object","keys","map","key","encodeURIComponent","join","getStandardOrigin"],"mappings":";;;;;;;;;AAEA;;AAGA;;eAEe,kBAACA,OAAD,QAAiF;AAAA,MAA5DC,OAA4D,QAA5DA,OAA4D;AAAA,MAAnDC,EAAmD,QAAnDA,EAAmD;AAAA,MAA/CC,IAA+C,QAA/CA,IAA+C;AAC9F,MAAQC,MAAR,GAA+BJ,OAA/B,CAAQI,MAAR;AAAA,MAAgBC,UAAhB,GAA+BL,OAA/B,CAAgBK,UAAhB;;AAEA,MAAI,CAACJ,OAAL,EAAc;AACZ,UAAM,IAAIK,qBAAJ,CACJ,6CADI,EAEJ,qCAAsB,wBAAtB,CAFI,CAAN;AAID;;AAED,MAAI,CAACJ,EAAL,EAAS;AACP,UAAM,IAAII,qBAAJ,CACJ,6CADI,EAEJ,qCAAsB,wBAAtB,CAFI,CAAN;AAID;;AAED,MAAI,CAACH,IAAL,EAAW;AACT,UAAM,IAAIG,qBAAJ,CACJ,6CADI,EAEJ,qCAAsB,0BAAtB,CAFI,CAAN;AAID;;AAED,MAAMC,GAAG,uBAAgBH,MAAM,CAACI,YAAvB,uBAAgDC,kBAAMC,YAAN,CAAmBT,OAAnB,CAAhD,oBAAqFC,EAArF,cAA2FC,IAA3F,CAAT;AACA,MAAMQ,MAAM,GAAG,EAAf;AAEAA,EAAAA,MAAM,CAACC,IAAP,GAAcR,MAAM,CAACS,OAAP,EAAd;AACAF,EAAAA,MAAM,CAACG,KAAP,GAAe,6BAAcV,MAAd,CAAf;;AAEA,MAAIA,MAAM,CAACW,UAAP,EAAJ,EAAyB;AACvBJ,IAAAA,MAAM,CAACK,IAAP,GAAcZ,MAAM,CAACW,UAAP,EAAd;AACD;;AAED,MAAIX,MAAM,CAACa,SAAX,EAAsB;AACpB,+BAAYjB,OAAZ,EAAqBO,GAArB,EAA0BI,MAA1B,EAAkC,EAAlC,EAAsC;AACpCO,MAAAA,YAAY,EAAE;AAAA,eAAM,2BAAN;AAAA;AADsB,KAAtC;AAGD;;AAED,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBW,GAApB,CAAwB,UAACC,GAAD;AAAA,qBAAYC,kBAAkB,CAACD,GAAD,CAA9B,cAAuCC,kBAAkB,CAACb,MAAM,CAACY,GAAD,CAAP,CAAzD;AAAA,GAAxB,EAAkGE,IAAlG,CAAuG,GAAvG,CAApB;;AAEA,MAAIN,WAAW,KAAK,EAApB,EAAwB;AACtB,qBAAUd,UAAU,CAACqB,iBAAX,EAAV,SAA2CnB,GAA3C,cAAkDY,WAAlD;AACD;;AAED,mBAAUd,UAAU,CAACqB,iBAAX,EAAV,SAA2CnB,GAA3C;AACD,C","sourcesContent":["/** @flow */\n\nimport { PubNubError, createValidationError, signRequest, generatePNSDK } from '../../components/endpoint';\nimport type { Modules } from '../endpoint';\nimport type { GetFileUrlParams, GetFileUrlResult } from './types';\nimport utils from '../../utils';\n\nexport default (modules: Modules, { channel, id, name }: GetFileUrlParams): GetFileUrlResult => {\n  const { config, networking } = modules;\n\n  if (!channel) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"channel can't be empty\")\n    );\n  }\n\n  if (!id) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"file id can't be empty\")\n    );\n  }\n\n  if (!name) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"file name can't be empty\")\n    );\n  }\n\n  const url = `/v1/files/${config.subscribeKey}/channels/${utils.encodeString(channel)}/files/${id}/${name}`;\n  const params = {};\n\n  params.uuid = config.getUUID();\n  params.pnsdk = generatePNSDK(config);\n\n  if (config.getAuthKey()) {\n    params.auth = config.getAuthKey();\n  }\n\n  if (config.secretKey) {\n    signRequest(modules, url, params, {}, {\n      getOperation: () => 'PubNubGetFileUrlOperation',\n    });\n  }\n\n  const queryParams = Object.keys(params).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n\n  if (queryParams !== '') {\n    return `${networking.getStandardOrigin()}${url}?${queryParams}`;\n  }\n\n  return `${networking.getStandardOrigin()}${url}`;\n};\n"],"file":"get_file_url.js"}