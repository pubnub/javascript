{"version":3,"sources":["core/endpoints/file_upload/list_files.js"],"names":["endpoint","getOperation","operationConstants","PNListFilesOperation","validateParams","_","params","channel","getURL","config","subscribeKey","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","outParams","limit","next","handleResponse","response","status","data","count"],"mappings":";;;;;;;;;AAGA;;AAEA;;AAEA,IAAMA,QAA0D,GAAG;AACjEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,oBAAzB;AAAA,GADmD;AAGjEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,yBAAP;AACD;AACF,GAPgE;AASjEC,EAAAA,MAAM,EAAE,sBAAaF,MAAb;AAAA,QAAGG,MAAH,QAAGA,MAAH;AAAA,+BAAqCA,MAAM,CAACC,YAA5C,uBAAqEC,kBAAMC,YAAN,CAAmBN,MAAM,CAACC,OAA1B,CAArE;AAAA,GATyD;AAWjEM,EAAAA,iBAAiB,EAAE;AAAA,QAAGJ,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACK,qBAAP,EAAhB;AAAA,GAX8C;AAajEC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAbgD;AAejEC,EAAAA,aAAa,EAAE,uBAACX,CAAD,EAAIC,MAAJ,EAAe;AAC5B,QAAMW,SAAS,GAAG,EAAlB;;AAEA,QAAIX,MAAM,CAACY,KAAX,EAAkB;AAChBD,MAAAA,SAAS,CAACC,KAAV,GAAkBZ,MAAM,CAACY,KAAzB;AACD;;AAED,QAAIZ,MAAM,CAACa,IAAX,EAAiB;AACfF,MAAAA,SAAS,CAACE,IAAV,GAAiBb,MAAM,CAACa,IAAxB;AACD;;AAED,WAAOF,SAAP;AACD,GA3BgE;AA6BjEG,EAAAA,cAAc,EAAE,wBAACf,CAAD,EAAIgB,QAAJ;AAAA,WAAmC;AACjDC,MAAAA,MAAM,EAAED,QAAQ,CAACC,MADgC;AAEjDC,MAAAA,IAAI,EAAEF,QAAQ,CAACE,IAFkC;AAGjDJ,MAAAA,IAAI,EAAEE,QAAQ,CAACF,IAHkC;AAIjDK,MAAAA,KAAK,EAAEH,QAAQ,CAACG;AAJiC,KAAnC;AAAA;AA7BiD,CAAnE;eAqCexB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { ListFilesParams, ListFilesResult } from './types';\nimport utils from '../../utils';\n\nconst endpoint: EndpointConfig<ListFilesParams, ListFilesResult> = {\n  getOperation: () => operationConstants.PNListFilesOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return 'channel can\\'t be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => `/v1/files/${config.subscribeKey}/channels/${utils.encodeString(params.channel)}/files`,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  prepareParams: (_, params) => {\n    const outParams = {};\n\n    if (params.limit) {\n      outParams.limit = params.limit;\n    }\n\n    if (params.next) {\n      outParams.next = params.next;\n    }\n\n    return outParams;\n  },\n\n  handleResponse: (_, response): ListFilesResult => ({\n    status: response.status,\n    data: response.data,\n    next: response.next,\n    count: response.count,\n  }),\n};\n\nexport default endpoint;\n"],"file":"list_files.js"}