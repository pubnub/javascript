{"version":3,"sources":["core/endpoints/file_upload/send_file.js"],"names":["getErrorFromResponse","response","Promise","resolve","result","on","data","toString","sendFile","generateUploadUrl","publishFile","modules","PubNubFile","config","cryptography","networking","channel","input","file","message","cipherKey","meta","ttl","storeInHistory","PubNubError","create","name","file_upload_request","url","formFields","form_fields","id","supportsEncryptFile","encryptFile","formFieldsWithMimeType","mimeType","map","entry","key","value","supportsFileUri","uri","toFileUri","POSTFILE","supportsFile","toFile","supportsBuffer","toBuffer","supportsBlob","toBlob","Error","errorBody","reason","exec","status","retries","fileUploadPublishRetryLimit","wasSuccessful","publishResult","timetoken","fileId","fileName","deps","f","params","cb","resultP","then","error"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { PubNubError, createValidationError } from '../../components/endpoint';\nimport type {\n  SendFileParams,\n  SendFileResult,\n  GenerateUploadUrlParams,\n  GenerateUploadUrlResult,\n  PublishFileParams,\n  PublishFileResult,\n} from './types';\n\nimport type { Modules } from '../endpoint';\n\ntype Dependencies = {|\n  generateUploadUrl: (params: GenerateUploadUrlParams) => Promise<GenerateUploadUrlResult>,\n  publishFile: (params: PublishFileParams) => Promise<PublishFileResult>,\n  modules: Modules,\n|};\n\nconst getErrorFromResponse = (response) => new Promise((resolve) => {\n  let result = '';\n\n  response.on('data', (data) => {\n    result += data.toString('utf8');\n  });\n\n  response.on('end', () => {\n    resolve(result);\n  });\n});\n\nconst sendFile = ({\n  generateUploadUrl,\n  publishFile,\n  modules: { PubNubFile, config, cryptography, networking },\n}: Dependencies) => async ({\n  channel,\n  file: input,\n  message,\n  cipherKey,\n  meta,\n  ttl,\n  storeInHistory,\n}: SendFileParams): Promise<SendFileResult> => {\n  if (!channel) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"channel can't be empty\")\n    );\n  }\n\n  if (!input) {\n    throw new PubNubError('Validation failed, check status for details', createValidationError(\"file can't be empty\"));\n  }\n\n  let file = PubNubFile.create(input);\n\n  const {\n    file_upload_request: { url, form_fields: formFields },\n    data: { id, name },\n  } = await generateUploadUrl({ channel, name: file.name });\n\n  if (PubNubFile.supportsEncryptFile && (cipherKey ?? config.cipherKey)) {\n    file = await cryptography.encryptFile(cipherKey ?? config.cipherKey, file, PubNubFile);\n  }\n\n  let formFieldsWithMimeType = formFields;\n\n  if (file.mimeType) {\n    formFieldsWithMimeType = formFields.map((entry) => {\n      if (entry.key === 'Content-Type') return { key: entry.key, value: file.mimeType };\n      else return entry;\n    });\n  }\n\n  let result;\n\n  try {\n    if (PubNubFile.supportsFileUri && input.uri) {\n      result = await networking.POSTFILE(url, formFieldsWithMimeType, await file.toFileUri());\n    } else if (PubNubFile.supportsFile) {\n      result = await networking.POSTFILE(url, formFieldsWithMimeType, await file.toFile());\n    } else if (PubNubFile.supportsBuffer) {\n      result = await networking.POSTFILE(url, formFieldsWithMimeType, await file.toBuffer());\n    } else if (PubNubFile.supportsBlob) {\n      result = await networking.POSTFILE(url, formFieldsWithMimeType, await file.toBlob());\n    } else {\n      throw new Error('Unsupported environment');\n    }\n  } catch (e) {\n    const errorBody = await getErrorFromResponse(e.response);\n\n    const reason = /<Message>(.*)<\\/Message>/gi.exec(errorBody);\n\n    throw new PubNubError(reason ? `Upload to bucket failed: ${reason[1]}` : 'Upload to bucket failed.', e);\n  }\n\n  if (result.status !== 204) {\n    throw new PubNubError('Upload to bucket was unsuccessful', result);\n  }\n\n  let retries = config.fileUploadPublishRetryLimit;\n  let wasSuccessful = false;\n\n  let publishResult = { timetoken: '0' };\n\n  do {\n    try {\n      publishResult = await publishFile({\n        channel,\n        message,\n        fileId: id,\n        fileName: name,\n        meta,\n        storeInHistory,\n        ttl,\n      });\n\n      wasSuccessful = true;\n    } catch (e) {\n      retries -= 1;\n    }\n  } while (!wasSuccessful && retries > 0);\n\n  if (!wasSuccessful) {\n    throw new PubNubError('Publish failed. You may want to execute that operation manually using pubnub.publishFile', {\n      channel,\n      id,\n      name,\n    });\n  } else {\n    return {\n      timetoken: publishResult.timetoken,\n      id,\n      name,\n    };\n  }\n};\n\nexport default (deps: Dependencies) => {\n  const f = sendFile(deps);\n\n  return (params: SendFileParams, cb?: (error: any, params: SendFileResult) => void): Promise<SendFileResult> => {\n    const resultP = f(params);\n\n    if (typeof cb === 'function') {\n      resultP.then((result) => cb(null, result)).catch((error) => cb(error, (null: any)));\n\n      return resultP;\n    } else {\n      return resultP;\n    }\n  };\n};\n"],"file":"send_file.js"}