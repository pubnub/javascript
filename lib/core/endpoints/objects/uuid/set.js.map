{"version":3,"sources":["core/endpoints/objects/uuid/set.js"],"names":["endpoint","getOperation","operationConstants","PNSetUUIDMetadataOperation","validateParams","_","params","data","usePatch","patchURL","config","subscribeKey","utils","encodeString","uuid","getUUID","patchPayload","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","include","customFields","handleResponse","response","status"],"mappings":";;;;;;;;;AAGA;;AAEA;;AAeA,IAAMA,QAAsE,GAAG;AAC7EC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,0BAAzB;AAAA,GAD+D;AAG7EC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEC,IAAT,CAAJ,EAAmB;AACjB,aAAO,sBAAP;AACD;AACF,GAP4E;AAS7EC,EAAAA,QAAQ,EAAE;AAAA,WAAM,IAAN;AAAA,GATmE;AAW7EC,EAAAA,QAAQ,EAAE,wBAAaH,MAAb;AAAA;;AAAA,QAAGI,MAAH,QAAGA,MAAH;AAAA,iCAAuCA,MAAM,CAACC,YAA9C,oBAAoEC,kBAAMC,YAAN,iBAAmBP,MAAM,CAACQ,IAA1B,uDAAkCJ,MAAM,CAACK,OAAP,EAAlC,CAApE;AAAA,GAXmE;AAa7EC,EAAAA,YAAY,EAAE,sBAACX,CAAD,EAAIC,MAAJ;AAAA,WAAeA,MAAM,CAACC,IAAtB;AAAA,GAb+D;AAe7EU,EAAAA,iBAAiB,EAAE;AAAA,QAAGP,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACQ,qBAAP,EAAhB;AAAA,GAf0D;AAiB7EC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAjB4D;AAmB7EC,EAAAA,aAAa,EAAE,8BAAad,MAAb;AAAA;;AAAA,QAAGI,MAAH,SAAGA,MAAH;AAAA,WAAyB;AACtCI,MAAAA,IAAI,mBAAER,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEQ,IAAV,yDAAkBJ,MAAM,CAACK,OAAP,EADgB;AAEtCM,MAAAA,OAAO,EAAE,0BAACf,MAAD,aAACA,MAAD,0CAACA,MAAM,CAAEe,OAAT,oDAAC,gBAAiBC,YAAlB,yEAAkC,IAAlC,KAA2C;AAFd,KAAzB;AAAA,GAnB8D;AAwB7EC,EAAAA,cAAc,EAAE,wBAAClB,CAAD,EAAImB,QAAJ;AAAA,WAAkB;AAChCC,MAAAA,MAAM,EAAED,QAAQ,CAACC,MADe;AAEhClB,MAAAA,IAAI,EAAEiB,QAAQ,CAACjB;AAFiB,KAAlB;AAAA;AAxB6D,CAA/E;eA8BeP,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../../endpoint';\nimport operationConstants from '../../../constants/operations';\nimport type { UUIDMetadata } from './uuid';\nimport utils from '../../../utils';\n\nexport type SetUUIDMetadataParams = {|\n  uuid?: string,\n  include?: {|\n    customFields: ?boolean,\n  |},\n  data: $Shape<UUIDMetadata>,\n|};\n\nexport type SetUUIDMetadataResult = {|\n  status: 200,\n  data: UUIDMetadata,\n|};\n\nconst endpoint: EndpointConfig<SetUUIDMetadataParams, SetUUIDMetadataResult> = {\n  getOperation: () => operationConstants.PNSetUUIDMetadataOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.data) {\n      return 'Data cannot be empty';\n    }\n  },\n\n  usePatch: () => true,\n\n  patchURL: ({ config }, params) => `/v2/objects/${config.subscribeKey}/uuids/${utils.encodeString(params.uuid ?? config.getUUID())}`,\n\n  patchPayload: (_, params) => params.data,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  prepareParams: ({ config }, params) => ({\n    uuid: params?.uuid ?? config.getUUID(),\n    include: (params?.include?.customFields ?? true) && 'custom',\n  }),\n\n  handleResponse: (_, response) => ({\n    status: response.status,\n    data: response.data,\n  }),\n};\n\nexport default endpoint;\n"],"file":"set.js"}