{"version":3,"sources":["core/endpoints/signal.js"],"names":["getOperation","validateParams","usePost","postURL","getURL","getRequestTimeout","isAuthSupported","postPayload","prepareParams","handleResponse","prepareMessagePayload","modules","messagePayload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","operationConstants","PNSignalOperation","incomingParams","message","channel","subscribeKey","publishKey","utils","encodeString","getTransactionTimeout","meta","params","serverResponse","timetoken"],"mappings":";;;;;;;;QAsBgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAWAC,O,GAAAA,O;QAIAC,O,GAAAA,O;QAWAC,M,GAAAA,M;QAOAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,W,GAAAA,W;QAQAC,a,GAAAA,a;QAcAC,c,GAAAA,c;;AAvFhB;;AAKA;;;;AACA;;;;;;AAEA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,cAAxC,EAAwD;AAAA,MAC9CC,MAD8C,GAC3BF,OAD2B,CAC9CE,MAD8C;AAAA,MACtCC,MADsC,GAC3BH,OAD2B,CACtCG,MADsC;;AAEtD,MAAIC,qBAAqBC,KAAKC,SAAL,CAAeL,cAAf,CAAzB;;AAEA,MAAIE,OAAOI,SAAX,EAAsB;AACpBH,yBAAqBF,OAAOM,OAAP,CAAeJ,kBAAf,CAArB;AACAA,yBAAqBC,KAAKC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD;;AAEM,SAASf,YAAT,GAAgC;AACrC,SAAOoB,qBAAmBC,iBAA1B;AACD;;AAEM,SAASpB,cAAT,OAELqB,cAFK,EAGL;AAAA,MAFER,MAEF,QAFEA,MAEF;AAAA,MACMS,OADN,GAC2BD,cAD3B,CACMC,OADN;AAAA,MACeC,OADf,GAC2BF,cAD3B,CACeE,OADf;;;AAGA,MAAI,CAACA,OAAL,EAAc,OAAO,iBAAP;AACd,MAAI,CAACD,OAAL,EAAc,OAAO,iBAAP;AACd,MAAI,CAACT,OAAOW,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASvB,OAAT,GAAmB;AACxB,SAAO,IAAP;AACD;;AAEM,SAASC,OAAT,CACLQ,OADK,EAELW,cAFK,EAGG;AAAA,MACAR,MADA,GACWH,OADX,CACAG,MADA;AAAA,MAEAU,OAFA,GAEYF,cAFZ,CAEAE,OAFA;;AAGR,yBAAqBV,OAAOY,UAA5B,SACEZ,OAAOW,YADT,SAEIE,gBAAMC,YAAN,CAAmBJ,OAAnB,CAFJ;AAGD;;AAEM,SAASpB,MAAT,CACLO,OADK,EAELW,cAFK,EAGG;AACR,SAAOnB,QAAQQ,OAAR,EAAiBW,cAAjB,CAAP;AACD;;AAEM,SAASjB,iBAAT,QAAsD;AAAA,MAAzBS,MAAyB,SAAzBA,MAAyB;;AAC3D,SAAOA,OAAOe,qBAAP,EAAP;AACD;;AAEM,SAASvB,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,WAAT,CACLI,OADK,EAELW,cAFK,EAGG;AAAA,MACAC,OADA,GACYD,cADZ,CACAC,OADA;;AAER,SAAOb,sBAAsBC,OAAtB,EAA+BY,OAA/B,CAAP;AACD;;AAEM,SAASf,aAAT,CACLG,OADK,EAELW,cAFK,EAGG;AAAA,MACAQ,IADA,GACSR,cADT,CACAQ,IADA;;AAER,MAAMC,SAAS,EAAf;;AAEA,MAAID,QAAQ,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAA5B,EAAsC;AACpCC,WAAOD,IAAP,GAAcd,KAAKC,SAAL,CAAea,IAAf,CAAd;AACD;;AAED,SAAOC,MAAP;AACD;;AAEM,SAAStB,cAAT,CACLE,OADK,EAELqB,cAFK,EAGW;AAChB,SAAO,EAAEC,WAAWD,eAAe,CAAf,CAAb,EAAP;AACD","file":"signal.js","sourcesContent":["/* @flow */\n\nimport {\n  SignalResponse,\n  SignalArguments,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNSignalOperation;\n}\n\nexport function validateParams(\n  { config }: ModulesInject,\n  incomingParams: SignalArguments\n) {\n  let { message, channel } = incomingParams;\n\n  if (!channel) return 'Missing Channel';\n  if (!message) return 'Missing Message';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function usePost() {\n  return true;\n}\n\nexport function postURL(\n  modules: ModulesInject,\n  incomingParams: SignalArguments\n): string {\n  const { config } = modules;\n  const { channel } = incomingParams;\n  return `/v1/signal/${config.publishKey}/${\n    config.subscribeKey\n  }/${utils.encodeString(channel)}`;\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: SignalArguments\n): string {\n  return postURL(modules, incomingParams);\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function postPayload(\n  modules: ModulesInject,\n  incomingParams: SignalArguments\n): string {\n  const { message } = incomingParams;\n  return prepareMessagePayload(modules, message);\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: SignalArguments\n): Object {\n  const { meta } = incomingParams;\n  const params = {};\n\n  if (meta && typeof meta === 'object') {\n    params.meta = JSON.stringify(meta);\n  }\n\n  return params;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: Object\n): SignalResponse {\n  return { timetoken: serverResponse[2] };\n}\n"]}