{"version":3,"sources":["core/endpoints/signal.js"],"names":["prepareMessagePayload","modules","messagePayload","stringifiedPayload","JSON","stringify","getOperation","operationConstants","PNSignalOperation","validateParams","incomingParams","config","message","channel","subscribeKey","getURL","publishKey","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","params","handleResponse","serverResponse","timetoken"],"mappings":";;;;;;;;;;;;;;;AAEA;;AAKA;;AACA;;AAEA,SAASA,qBAAT,CAA+BC,OAA/B,EAAwCC,cAAxC,EAAwD;AACtD,MAAIC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeH,cAAf,CAAzB;AAEA,SAAOC,kBAAP;AACD;;AAEM,SAASG,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,iBAA1B;AACD;;AAEM,SAASC,cAAT,OAELC,cAFK,EAGL;AAAA,MAFEC,MAEF,QAFEA,MAEF;AACA,MAAMC,OAAN,GAA2BF,cAA3B,CAAME,OAAN;AAAA,MAAeC,OAAf,GAA2BH,cAA3B,CAAeG,OAAf;AAEA,MAAI,CAACA,OAAL,EAAc,OAAO,iBAAP;AACd,MAAI,CAACD,OAAL,EAAc,OAAO,iBAAP;AACd,MAAI,CAACD,MAAM,CAACG,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CACLd,OADK,EAELS,cAFK,EAGG;AACR,MAAQC,MAAR,GAAmBV,OAAnB,CAAQU,MAAR;AACA,MAAQE,OAAR,GAA6BH,cAA7B,CAAQG,OAAR;AAAA,MAAiBD,OAAjB,GAA6BF,cAA7B,CAAiBE,OAAjB;AACA,MAAIT,kBAAkB,GAAGH,qBAAqB,CAACC,OAAD,EAAUW,OAAV,CAA9C;AACA,2BAAkBD,MAAM,CAACK,UAAzB,cAAuCL,MAAM,CAACG,YAA9C,gBAAgEG,kBAAMC,YAAN,CAAmBL,OAAnB,CAAhE,gBAAiGI,kBAAMC,YAAN,CAAmBf,kBAAnB,CAAjG;AACD;;AAEM,SAASgB,iBAAT,QAAsD;AAAA,MAAzBR,MAAyB,SAAzBA,MAAyB;AAC3D,SAAOA,MAAM,CAACS,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,GAAiC;AACtC,MAAMC,MAAM,GAAG,EAAf;AAEA,SAAOA,MAAP;AACD;;AAEM,SAASC,cAAT,CACLvB,OADK,EAELwB,cAFK,EAGW;AAChB,SAAO;AAAEC,IAAAA,SAAS,EAAED,cAAc,CAAC,CAAD;AAA3B,GAAP;AACD","sourcesContent":["/* @flow */\n\nimport {\n  SignalResponse,\n  SignalArguments,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  return stringifiedPayload;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNSignalOperation;\n}\n\nexport function validateParams(\n  { config }: ModulesInject,\n  incomingParams: SignalArguments\n) {\n  let { message, channel } = incomingParams;\n\n  if (!channel) return 'Missing Channel';\n  if (!message) return 'Missing Message';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: SignalArguments\n): string {\n  const { config } = modules;\n  const { channel, message } = incomingParams;\n  let stringifiedPayload = prepareMessagePayload(modules, message);\n  return `/signal/${config.publishKey}/${config.subscribeKey}/0/${utils.encodeString(channel)}/0/${utils.encodeString(stringifiedPayload)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(): Object {\n  const params = {};\n\n  return params;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: Object\n): SignalResponse {\n  return { timetoken: serverResponse[2] };\n}\n"],"file":"signal.js"}