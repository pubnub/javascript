{"version":3,"sources":["core/endpoints/fetch_messages.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","__processMessage","modules","message","config","crypto","cipherKey","decrypt","e","operationConstants","PNFetchMessagesOperation","incomingParams","channels","length","subscribeKey","stringifiedChannels","join","utils","encodeString","getTransactionTimeout","start","end","count","stringifiedTimeToken","outgoingParams","max","string_message_token","serverResponse","response","Object","keys","forEach","channelName","messageEnvelope","announce","channel","subscription","timetoken","push"],"mappings":"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","file":"fetch_messages.js","sourcesContent":["/* @flow */\n\nimport { FetchMessagesArguments, FetchMessagesResponse, MessageAnnouncement, HistoryV3Response, ModulesInject } from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction __processMessage(modules, message: Object): Object | null {\n  let { config, crypto } = modules;\n  if (!config.cipherKey) return message;\n\n  try {\n    return crypto.decrypt(message);\n  } catch (e) {\n    return message;\n  }\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNFetchMessagesOperation;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: FetchMessagesArguments) {\n  let { channels } = incomingParams;\n  let { config } = modules;\n\n  if (!channels || channels.length === 0) return 'Missing channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: FetchMessagesArguments): string {\n  let { channels = [] } = incomingParams;\n  let { config } = modules;\n\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v3/history/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: FetchMessagesArguments): Object {\n  const { start, end, count, stringifiedTimeToken = false } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if (count) outgoingParams.max = count;\n  if (start) outgoingParams.start = start;\n  if (end) outgoingParams.end = end;\n  if (stringifiedTimeToken) outgoingParams.string_message_token = 'true';\n\n  return outgoingParams;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: HistoryV3Response): FetchMessagesResponse {\n  const response: FetchMessagesResponse = {\n    channels: {}\n  };\n\n  Object.keys(serverResponse.channels || {}).forEach((channelName) => {\n    response.channels[channelName] = [];\n\n    (serverResponse.channels[channelName] || []).forEach((messageEnvelope) => {\n      let announce: MessageAnnouncement = {};\n      announce.channel = channelName;\n      announce.subscription = null;\n      announce.timetoken = messageEnvelope.timetoken;\n      announce.message = __processMessage(modules, messageEnvelope.message);\n      response.channels[channelName].push(announce);\n    });\n  });\n\n  return response;\n}\n"]}