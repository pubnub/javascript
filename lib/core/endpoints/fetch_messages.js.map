{"version":3,"sources":["core/endpoints/fetch_messages.js"],"names":["__processMessage","modules","message","config","crypto","cipherKey","decrypt","e","getOperation","operationConstants","PNFetchMessagesOperation","validateParams","incomingParams","channels","includeMessageActions","length","subscribeKey","TypeError","getURL","endpoint","stringifiedChannels","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","start","end","count","stringifiedTimeToken","includeMeta","includeUuid","includeUUID","includeMessageType","outgoingParams","max","string_message_token","include_meta","include_uuid","include_message_type","handleResponse","serverResponse","response","Object","keys","forEach","channelName","messageEnvelope","announce","channel","timetoken","messageType","message_type","uuid","actions","data","meta","push","more"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport {\n  FetchMessagesArguments,\n  FetchMessagesResponse,\n  MessageAnnouncement,\n  HistoryV3Response,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction __processMessage(modules, message: Object): Object | null {\n  let { config, crypto } = modules;\n  if (!config.cipherKey) return message;\n\n  try {\n    return crypto.decrypt(message);\n  } catch (e) {\n    return message;\n  }\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNFetchMessagesOperation;\n}\n\nexport function validateParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n) {\n  let { channels, includeMessageActions = false } = incomingParams;\n  let { config } = modules;\n\n  if (!channels || channels.length === 0) return 'Missing channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n\n  if (includeMessageActions && channels.length > 1) {\n    throw new TypeError('History can return actions data for a single channel only. Either pass a single channel or disable the includeMessageActions flag.');\n  }\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): string {\n  let { channels = [], includeMessageActions = false } = incomingParams;\n  let { config } = modules;\n  const endpoint = !includeMessageActions ? 'history' : 'history-with-actions';\n\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v3/${endpoint}/sub-key/${\n    config.subscribeKey\n  }/channel/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): Object {\n  const {\n    channels,\n    start,\n    end,\n    includeMessageActions,\n    count,\n    stringifiedTimeToken = false,\n    includeMeta = false,\n    includeUuid,\n    includeUUID = true,\n    includeMessageType = true\n  } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if (count) {\n    outgoingParams.max = count;\n  } else {\n    outgoingParams.max = (channels.length > 1 || includeMessageActions === true) ? 25 : 100;\n  }\n  if (start) outgoingParams.start = start;\n  if (end) outgoingParams.end = end;\n  if (stringifiedTimeToken) outgoingParams.string_message_token = 'true';\n  if (includeMeta) outgoingParams.include_meta = 'true';\n  if (includeUUID && includeUuid !== false) outgoingParams.include_uuid = 'true';\n  if (includeMessageType) outgoingParams.include_message_type = 'true';\n\n  return outgoingParams;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: HistoryV3Response\n): FetchMessagesResponse {\n  const response: FetchMessagesResponse = {\n    channels: {},\n  };\n\n  Object.keys(serverResponse.channels || {}).forEach((channelName) => {\n    response.channels[channelName] = [];\n\n    (serverResponse.channels[channelName] || []).forEach((messageEnvelope) => {\n      let announce: MessageAnnouncement = {};\n      announce.channel = channelName;\n      announce.timetoken = messageEnvelope.timetoken;\n      announce.message = __processMessage(modules, messageEnvelope.message);\n      announce.messageType = messageEnvelope.message_type;\n      announce.uuid = messageEnvelope.uuid;\n\n      if (messageEnvelope.actions) {\n        announce.actions = messageEnvelope.actions;\n\n        // This should be kept for few updates for existing clients consistency.\n        announce.data = messageEnvelope.actions;\n      }\n      if (messageEnvelope.meta) {\n        announce.meta = messageEnvelope.meta;\n      }\n\n      response.channels[channelName].push(announce);\n    });\n  });\n  if (serverResponse.more) {\n    response.more  = serverResponse.more;\n  }\n\n  return response;\n}\n"],"file":"fetch_messages.js"}