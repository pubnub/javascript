{"version":3,"sources":["core/endpoints/users/update_user.js"],"names":["getOperation","validateParams","usePatch","getURL","patchURL","getRequestTimeout","isAuthSupported","prepareParams","patchPayload","handleResponse","prepareMessagePayload","modules","messagePayload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","operationConstants","PNUsersOperation","incomingParams","id","custom","subscribeKey","Object","values","every","value","getTransactionTimeout","channelGroups","params","length","join","message","usersResponse"],"mappings":";;;;;QAqBgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAuBAC,Q,GAAAA,Q;QAIAC,M,GAAAA,M;QAKAC,Q,GAAAA,Q;QAKAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAcAC,Y,GAAAA,Y;QAQAC,c,GAAAA,c;;AA1FhB;;AAKA;;;;;;AAEA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,cAAxC,EAAwD;AAAA,MAC9CC,MAD8C,GAC3BF,OAD2B,CAC9CE,MAD8C;AAAA,MACtCC,MADsC,GAC3BH,OAD2B,CACtCG,MADsC;;AAEtD,MAAIC,qBAAqBC,KAAKC,SAAL,CAAeL,cAAf,CAAzB;;AAEA,MAAIE,OAAOI,SAAX,EAAsB;AACpBH,yBAAqBF,OAAOM,OAAP,CAAeJ,kBAAf,CAArB;AACAA,yBAAqBC,KAAKC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD;;AAEM,SAASf,YAAT,GAAgC;AACrC,SAAOoB,qBAAmBC,gBAA1B;AACD;;AAEM,SAASpB,cAAT,OAELqB,cAFK,EAGL;AAAA,MAFER,MAEF,QAFEA,MAEF;AAAA,MACMS,EADN,GACqBD,cADrB,CACMC,EADN;AAAA,MACUC,MADV,GACqBF,cADrB,CACUE,MADV;;;AAGA,MAAI,CAACD,EAAL,EAAS,OAAO,iBAAP;AACT,MAAI,CAACT,OAAOW,YAAZ,EAA0B,OAAO,uBAAP;;AAE1B,MAAID,MAAJ,EAAY;AACV,QACE,CAACE,OAAOC,MAAP,CAAcH,MAAd,EAAsBI,KAAtB,CACC;AAAA,aACE,OAAOC,KAAP,KAAiB,QAAjB,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,OAAOA,KAAP,KAAiB,SAHnB;AAAA,KADD,CADH,EAOE;AACA,aAAO,0EAAP;AACD;AACF;AACF;;AAEM,SAAS3B,QAAT,GAAoB;AACzB,SAAO,IAAP;AACD;;AAEM,SAASC,MAAT,CAAgBQ,OAAhB,EAAgD;AAAA,MAC/CG,MAD+C,GACpCH,OADoC,CAC/CG,MAD+C;;AAErD,0BAAsBA,OAAOW,YAA7B;AACD;;AAEM,SAASrB,QAAT,CAAkBO,OAAlB,EAAkD;AAAA,MAC/CG,MAD+C,GACpCH,OADoC,CAC/CG,MAD+C;;AAEvD,0BAAsBA,OAAOW,YAA7B;AACD;;AAEM,SAASpB,iBAAT,QAAsD;AAAA,MAAzBS,MAAyB,SAAzBA,MAAyB;;AAC3D,SAAOA,OAAOgB,qBAAP,EAAP;AACD;;AAEM,SAASxB,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CACLI,OADK,EAELW,cAFK,EAGG;AAAA,8BACqBA,cADrB,CACFS,aADE;AAAA,MACFA,aADE,yCACc,EADd;;AAER,MAAIC,SAAS,EAAb;;AAEA,MAAID,cAAcE,MAAd,GAAuB,CAA3B,EAA8B;AAC5BD,WAAO,eAAP,IAA0BD,cAAcG,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOF,MAAP;AACD;;AAEM,SAASxB,YAAT,CACLG,OADK,EAELW,cAFK,EAGG;AAAA,MACAa,OADA,GACYb,cADZ,CACAa,OADA;;AAER,SAAOzB,sBAAsBC,OAAtB,EAA+BwB,OAA/B,CAAP;AACD;;AAEM,SAAS1B,cAAT,CACLE,OADK,EAELyB,aAFK,EAGU;AACf,SAAOA,aAAP;AACD","file":"update_user.js","sourcesContent":["/* @flow */\n\nimport {\n  UsersObjectInput,\n  UsersResponse,\n  ModulesInject,\n} from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNUsersOperation;\n}\n\nexport function validateParams(\n  { config }: ModulesInject,\n  incomingParams: UsersObjectInput\n) {\n  let { id, custom } = incomingParams;\n\n  if (!id) return 'Missing User.id';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n\n  if (custom) {\n    if (\n      !Object.values(custom).every(\n        value =>\n          typeof value === 'string' ||\n          typeof value === 'number' ||\n          typeof value === 'boolean'\n      )\n    ) {\n      return 'Invalid custom type, only string, number and boolean values are allowed.';\n    }\n  }\n}\n\nexport function usePatch() {\n  return true;\n}\n\nexport function getURL(modules: ModulesInject): string {\n  let { config } = modules;\n  return `/v1/objects/${config.subscribeKey}/users`;\n}\n\nexport function patchURL(modules: ModulesInject): string {\n  const { config } = modules;\n  return `/v1/objects/${config.subscribeKey}/users`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: UsersObjectInput\n): Object {\n  let { channelGroups = [] } = incomingParams;\n  let params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function patchPayload(\n  modules: ModulesInject,\n  incomingParams: UsersObjectInput\n): string {\n  const { message } = incomingParams;\n  return prepareMessagePayload(modules, message);\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  usersResponse: Object\n): UsersResponse {\n  return usersResponse;\n}\n"]}