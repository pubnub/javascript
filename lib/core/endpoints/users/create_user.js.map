{"version":3,"sources":["core/endpoints/users/create_user.js"],"names":["getOperation","validateParams","usePost","getURL","postURL","getRequestTimeout","isAuthSupported","prepareParams","postPayload","handleResponse","prepareMessagePayload","modules","messagePayload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","operationConstants","PNCreateUserOperation","incomingParams","id","name","custom","subscribeKey","Object","values","every","value","sendByPost","getTransactionTimeout","params","message","usersResponse"],"mappings":";;;;;;;;QAqBgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAwBAC,O,GAAAA,O;QAQAC,M,GAAAA,M;QAKAC,O,GAAAA,O;QAKAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAWAC,W,GAAAA,W;QAQAC,c,GAAAA,c;;AA5FhB;;AAKA;;;;;;AAEA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,cAAxC,EAAwD;AAAA,MAC9CC,MAD8C,GAC3BF,OAD2B,CAC9CE,MAD8C;AAAA,MACtCC,MADsC,GAC3BH,OAD2B,CACtCG,MADsC;;AAEtD,MAAIC,qBAAqBC,KAAKC,SAAL,CAAeL,cAAf,CAAzB;;AAEA,MAAIE,OAAOI,SAAX,EAAsB;AACpBH,yBAAqBF,OAAOM,OAAP,CAAeJ,kBAAf,CAArB;AACAA,yBAAqBC,KAAKC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD;;AAEM,SAASf,YAAT,GAAgC;AACrC,SAAOoB,qBAAmBC,qBAA1B;AACD;;AAEM,SAASpB,cAAT,OAELqB,cAFK,EAGL;AAAA,MAFER,MAEF,QAFEA,MAEF;AAAA,MACMS,EADN,GAC2BD,cAD3B,CACMC,EADN;AAAA,MACUC,IADV,GAC2BF,cAD3B,CACUE,IADV;AAAA,MACgBC,MADhB,GAC2BH,cAD3B,CACgBG,MADhB;;;AAGA,MAAI,CAACF,EAAL,EAAS,OAAO,iBAAP;AACT,MAAI,CAACC,IAAL,EAAW,OAAO,mBAAP;AACX,MAAI,CAACV,OAAOY,YAAZ,EAA0B,OAAO,uBAAP;;AAE1B,MAAID,MAAJ,EAAY;AACV,QACE,CAACE,OAAOC,MAAP,CAAcH,MAAd,EAAsBI,KAAtB,CACC;AAAA,aACE,OAAOC,KAAP,KAAiB,QAAjB,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,OAAOA,KAAP,KAAiB,SAHnB;AAAA,KADD,CADH,EAOE;AACA,aAAO,0EAAP;AACD;AACF;AACF;;AAEM,SAAS5B,OAAT,CACLS,OADK,EAELW,cAFK,EAGL;AAAA,8BAC4BA,cAD5B,CACMS,UADN;AAAA,MACMA,UADN,yCACmB,IADnB;;AAEA,SAAOA,UAAP;AACD;;AAEM,SAAS5B,MAAT,CAAgBQ,OAAhB,EAAgD;AAAA,MAC/CG,MAD+C,GACpCH,OADoC,CAC/CG,MAD+C;;AAErD,0BAAsBA,OAAOY,YAA7B;AACD;;AAEM,SAAStB,OAAT,CAAiBO,OAAjB,EAAiD;AAAA,MAC9CG,MAD8C,GACnCH,OADmC,CAC9CG,MAD8C;;AAEtD,0BAAsBA,OAAOY,YAA7B;AACD;;AAEM,SAASrB,iBAAT,QAAsD;AAAA,MAAzBS,MAAyB,SAAzBA,MAAyB;;AAC3D,SAAOA,OAAOkB,qBAAP,EAAP;AACD;;AAEM,SAAS1B,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CACLI,OADK,EAELW,cAFK,EAGG;AACR,MAAMW,sBAAcX,cAAd,CAAN;;AAIA,SAAOW,MAAP;AACD;;AAEM,SAASzB,WAAT,CACLG,OADK,EAELW,cAFK,EAGG;AAAA,MACAY,OADA,GACYZ,cADZ,CACAY,OADA;;AAER,SAAOxB,sBAAsBC,OAAtB,EAA+BuB,OAA/B,CAAP;AACD;;AAEM,SAASzB,cAAT,CACLE,OADK,EAELwB,aAFK,EAGU;AACf,SAAOA,aAAP;AACD","file":"create_user.js","sourcesContent":["/* @flow */\n\nimport {\n  UsersObjectInput,\n  UsersResponse,\n  ModulesInject,\n} from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNCreateUserOperation;\n}\n\nexport function validateParams(\n  { config }: ModulesInject,\n  incomingParams: UsersObjectInput\n) {\n  let { id, name, custom } = incomingParams;\n\n  if (!id) return 'Missing User.id';\n  if (!name) return 'Missing User.name';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n\n  if (custom) {\n    if (\n      !Object.values(custom).every(\n        value =>\n          typeof value === 'string' ||\n          typeof value === 'number' ||\n          typeof value === 'boolean'\n      )\n    ) {\n      return 'Invalid custom type, only string, number and boolean values are allowed.';\n    }\n  }\n}\n\nexport function usePost(\n  modules: ModulesInject,\n  incomingParams: UsersObjectInput\n) {\n  let { sendByPost = true } = incomingParams;\n  return sendByPost;\n}\n\nexport function getURL(modules: ModulesInject): string {\n  let { config } = modules;\n  return `/v1/objects/${config.subscribeKey}/users`;\n}\n\nexport function postURL(modules: ModulesInject): string {\n  const { config } = modules;\n  return `/v1/objects/${config.subscribeKey}/users`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: UsersObjectInput\n): Object {\n  const params = { ...incomingParams };\n\n  // Just applying the incoming params for now, this space will be used for possible future additions\n\n  return params;\n}\n\nexport function postPayload(\n  modules: ModulesInject,\n  incomingParams: UsersObjectInput\n): string {\n  const { message } = incomingParams;\n  return prepareMessagePayload(modules, message);\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  usersResponse: Object\n): UsersResponse {\n  return usersResponse;\n}\n"]}