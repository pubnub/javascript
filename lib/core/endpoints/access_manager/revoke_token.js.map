{"version":3,"sources":["core/endpoints/access_manager/revoke_token.js"],"names":["endpoint","getOperation","operationConstants","PNAccessManagerRevokeToken","validateParams","modules","token","secretKey","config","getURL","subscribeKey","utils","encodeString","useDelete","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","uuid","getUUID","handleResponse","_","response","status","data"],"mappings":";;;;;;;;;AAGA;;AACA;;AASA,IAAMA,QAA8D,GAAG;AACrEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,0BAAzB;AAAA,GADuD;AAGrEC,EAAAA,cAAc,EAAE,wBAACC,OAAD,EAAUC,KAAV,EAAoB;AAClC,QAAQC,SAAR,GAAsBF,OAAO,CAACG,MAA9B,CAAQD,SAAR;;AACA,QAAI,CAACA,SAAL,EAAgB;AACd,aAAO,oBAAP;AACD;;AAED,QAAI,CAACD,KAAL,EAAY;AACV,aAAO,sBAAP;AACD;AACF,GAZoE;AAcrEG,EAAAA,MAAM,EAAE,sBAAaH,KAAb;AAAA,QAAGE,MAAH,QAAGA,MAAH;AAAA,6BAAkCA,MAAM,CAACE,YAAzC,oBAA+DC,kBAAMC,YAAN,CAAmBN,KAAnB,CAA/D;AAAA,GAd6D;AAerEO,EAAAA,SAAS,EAAE;AAAA,WAAM,IAAN;AAAA,GAf0D;AAiBrEC,EAAAA,iBAAiB,EAAE;AAAA,QAAGN,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACO,qBAAP,EAAhB;AAAA,GAjBkD;AAmBrEC,EAAAA,eAAe,EAAE;AAAA,WAAM,KAAN;AAAA,GAnBoD;AAqBrEC,EAAAA,aAAa,EAAE;AAAA,QAAGT,MAAH,SAAGA,MAAH;AAAA,WAAiB;AAC9BU,MAAAA,IAAI,EAAEV,MAAM,CAACW,OAAP;AADwB,KAAjB;AAAA,GArBsD;AAyBrEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,QAAJ;AAAA,WAAkB;AAChCC,MAAAA,MAAM,EAAED,QAAQ,CAACC,MADe;AAEhCC,MAAAA,IAAI,EAAEF,QAAQ,CAACE;AAFiB,KAAlB;AAAA;AAzBqD,CAAvE;eA+BexB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport type RevokeTokenParams = string;\n\nexport type RevokeTokenResult = {|\n  status: 200,\n  data: string\n|}\n\nconst endpoint: EndpointConfig<RevokeTokenParams, RevokeTokenResult> = {\n  getOperation: () => operationConstants.PNAccessManagerRevokeToken,\n\n  validateParams: (modules, token) => {\n    const { secretKey } = modules.config;\n    if (!secretKey) {\n      return 'Missing Secret Key';\n    }\n\n    if (!token) {\n      return \"token can't be empty\";\n    }\n  },\n\n  getURL: ({ config }, token) => `/v3/pam/${config.subscribeKey}/grant/${utils.encodeString(token)}`,\n  useDelete: () => true,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => false,\n\n  prepareParams: ({ config }) => ({\n    uuid: config.getUUID(),\n  }),\n\n  handleResponse: (_, response) => ({\n    status: response.status,\n    data: response.data,\n  }),\n};\n\nexport default endpoint;\n"],"file":"revoke_token.js"}