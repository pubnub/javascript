{"version":3,"sources":["core/endpoints/push/list_push_channels.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNPushNotificationEnabledChannelsOperation","modules","incomingParams","device","pushGateway","config","subscribeKey","getTransactionTimeout","type","serverResponse","channels"],"mappings":";;;;;QAKgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QASAC,M,GAAAA,M;QAMAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAKAC,c,GAAAA,c;;AAnChB;;AACA;;;;;;AAEO,SAASN,YAAT,GAAgC;AACrC,SAAOO,qBAAmBC,0CAA1B;AACD;;AAEM,SAASP,cAAT,CAAwBQ,OAAxB,EAAgDC,cAAhD,EAAkF;AAAA,MACjFC,MADiF,GACzDD,cADyD,CACjFC,MADiF;AAAA,MACzEC,WADyE,GACzDF,cADyD,CACzEE,WADyE;AAAA,MAEjFC,MAFiF,GAEtEJ,OAFsE,CAEjFI,MAFiF;;;AAIvF,MAAI,CAACF,MAAL,EAAa,OAAO,4BAAP;AACb,MAAI,CAACC,WAAL,EAAkB,OAAO,4CAAP;AAClB,MAAI,CAACC,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASZ,MAAT,CAAgBO,OAAhB,EAAwCC,cAAxC,EAAkF;AAAA,MACjFC,MADiF,GACtED,cADsE,CACjFC,MADiF;AAAA,MAEjFE,MAFiF,GAEtEJ,OAFsE,CAEjFI,MAFiF;;AAGvF,+BAA2BA,OAAOC,YAAlC,iBAA0DH,MAA1D;AACD;;AAEM,SAASR,iBAAT,OAAsD;AAAA,MAAzBU,MAAyB,QAAzBA,MAAyB;;AAC3D,SAAOA,OAAOE,qBAAP,EAAP;AACD;;AAEM,SAASX,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBI,OAAvB,EAA+CC,cAA/C,EAAyF;AAAA,MACxFE,WADwF,GACxEF,cADwE,CACxFE,WADwF;;AAE9F,SAAO,EAAEI,MAAMJ,WAAR,EAAP;AACD;;AAEM,SAASN,cAAT,CAAwBG,OAAxB,EAAgDQ,cAAhD,EAAqG;AAC1G,SAAO,EAAEC,UAAUD,cAAZ,EAAP;AACD","file":"list_push_channels.js","sourcesContent":["/* @flow */\n\nimport { ListChannelsArgs, ListChannelsResponse, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\n\nexport function getOperation(): string {\n  return operationConstants.PNPushNotificationEnabledChannelsOperation;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: ListChannelsArgs) {\n  let { device, pushGateway } = incomingParams;\n  let { config } = modules;\n\n  if (!device) return 'Missing Device ID (device)';\n  if (!pushGateway) return 'Missing GW Type (pushGateway: gcm or apns)';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: ListChannelsArgs): string {\n  let { device } = incomingParams;\n  let { config } = modules;\n  return `/v1/push/sub-key/${config.subscribeKey}/devices/${device}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: ListChannelsArgs): Object {\n  let { pushGateway } = incomingParams;\n  return { type: pushGateway };\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Array<string>): ListChannelsResponse {\n  return { channels: serverResponse };\n}\n"]}