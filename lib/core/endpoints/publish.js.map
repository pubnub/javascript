{"version":3,"sources":["core/endpoints/publish.js"],"names":["getOperation","validateParams","usePost","getURL","postURL","getRequestTimeout","isAuthSupported","postPayload","prepareParams","handleResponse","prepareMessagePayload","modules","messagePayload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","operationConstants","PNPublishOperation","incomingParams","message","channel","subscribeKey","sendByPost","publishKey","utils","encodeString","getTransactionTimeout","meta","replicate","storeInHistory","ttl","params","store","norep","serverResponse","timetoken"],"mappings":"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","file":"publish.js","sourcesContent":["/* @flow */\r\n\r\nimport { PublishResponse, PublishArguments, ModulesInject } from '../flow_interfaces';\r\nimport operationConstants from '../constants/operations';\r\nimport utils from '../utils';\r\n\r\nfunction prepareMessagePayload(modules, messagePayload) {\r\n  const { crypto, config } = modules;\r\n  let stringifiedPayload = JSON.stringify(messagePayload);\r\n\r\n  if (config.cipherKey) {\r\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\r\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\r\n  }\r\n\r\n  return stringifiedPayload;\r\n}\r\n\r\nexport function getOperation(): string {\r\n  return operationConstants.PNPublishOperation;\r\n}\r\n\r\nexport function validateParams({ config }: ModulesInject, incomingParams: PublishArguments) {\r\n  let { message, channel } = incomingParams;\r\n\r\n  if (!channel) return 'Missing Channel';\r\n  if (!message) return 'Missing Message';\r\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\r\n}\r\n\r\nexport function usePost(modules: ModulesInject, incomingParams: PublishArguments) {\r\n  let { sendByPost = false } = incomingParams;\r\n  return sendByPost;\r\n}\r\n\r\nexport function getURL(modules: ModulesInject, incomingParams: PublishArguments): string {\r\n  const { config } = modules;\r\n  const { channel, message } = incomingParams;\r\n  let stringifiedPayload = prepareMessagePayload(modules, message);\r\n  return `/publish/${config.publishKey}/${config.subscribeKey}/0/${utils.encodeString(channel)}/0/${utils.encodeString(stringifiedPayload)}`;\r\n}\r\n\r\nexport function postURL(modules: ModulesInject, incomingParams: PublishArguments): string {\r\n  const { config } = modules;\r\n  const { channel } = incomingParams;\r\n  return `/publish/${config.publishKey}/${config.subscribeKey}/0/${utils.encodeString(channel)}/0`;\r\n}\r\n\r\nexport function getRequestTimeout({ config }: ModulesInject) {\r\n  return config.getTransactionTimeout();\r\n}\r\n\r\nexport function isAuthSupported() {\r\n  return true;\r\n}\r\n\r\nexport function postPayload(modules: ModulesInject, incomingParams: PublishArguments): string {\r\n  const { message } = incomingParams;\r\n  return prepareMessagePayload(modules, message);\r\n}\r\n\r\nexport function prepareParams(modules: ModulesInject, incomingParams: PublishArguments): Object {\r\n  const { meta, replicate = true, storeInHistory, ttl } = incomingParams;\r\n  const params = {};\r\n\r\n  if (storeInHistory != null) {\r\n    if (storeInHistory) {\r\n      params.store = '1';\r\n    } else {\r\n      params.store = '0';\r\n    }\r\n  }\r\n\r\n  if (ttl) {\r\n    params.ttl = ttl;\r\n  }\r\n\r\n  if (replicate === false) {\r\n    params.norep = 'true';\r\n  }\r\n\r\n  if (meta && typeof meta === 'object') {\r\n    params.meta = JSON.stringify(meta);\r\n  }\r\n\r\n  return params;\r\n}\r\n\r\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): PublishResponse {\r\n  return { timetoken: serverResponse[2] };\r\n}\r\n"]}