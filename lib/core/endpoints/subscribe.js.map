{"version":3,"sources":["core/endpoints/subscribe.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNSubscribeOperation","modules","config","subscribeKey","incomingParams","channels","stringifiedChannels","length","join","utils","encodeString","getSubscribeTimeout","state","channelGroups","timetoken","filterExpression","region","params","heartbeat","getPresenceTimeout","Object","keys","JSON","stringify","tt","tr","serverResponse","messages","m","forEach","publishMetaData","publishTimetoken","rawMessage","p","t","r","parsedMessage","shard","parseInt","a","subscriptionMatch","b","channel","c","payload","d","flags","f","issuingClientId","i","k","originationTimetoken","o","userMetadata","u","push","metadata"],"mappings":"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","file":"subscribe.js","sourcesContent":["/* @flow */\n\nimport {\n  SubscribeArguments,\n  PublishMetaData,\n  SubscribeMetadata,\n  SubscribeMessage,\n  SubscribeEnvelope,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNSubscribeOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: SubscribeArguments\n): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(\n    stringifiedChannels\n  )}/0`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getSubscribeTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(\n  { config }: ModulesInject,\n  incomingParams: SubscribeArguments\n): Object {\n  let {\n    state,\n    channelGroups = [],\n    timetoken,\n    filterExpression,\n    region,\n  } = incomingParams;\n  const params: Object = {\n    heartbeat: config.getPresenceTimeout(),\n  };\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  if (filterExpression && filterExpression.length > 0) {\n    params['filter-expr'] = filterExpression;\n  }\n\n  if (Object.keys(state).length) {\n    params.state = JSON.stringify(state);\n  }\n\n  if (timetoken) {\n    params.tt = timetoken;\n  }\n\n  if (region) {\n    params.tr = region;\n  }\n\n  return params;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: Object\n): SubscribeEnvelope {\n  const messages: Array<SubscribeMessage> = [];\n\n  serverResponse.m.forEach(rawMessage => {\n    let publishMetaData: PublishMetaData = {\n      publishTimetoken: rawMessage.p.t,\n      region: rawMessage.p.r,\n    };\n    let parsedMessage: SubscribeMessage = {\n      shard: parseInt(rawMessage.a, 10),\n      subscriptionMatch: rawMessage.b,\n      channel: rawMessage.c,\n      payload: rawMessage.d,\n      flags: rawMessage.f,\n      issuingClientId: rawMessage.i,\n      subscribeKey: rawMessage.k,\n      originationTimetoken: rawMessage.o,\n      userMetadata: rawMessage.u,\n      publishMetaData,\n    };\n    messages.push(parsedMessage);\n  });\n\n  const metadata: SubscribeMetadata = {\n    timetoken: serverResponse.t.t,\n    region: serverResponse.t.r,\n  };\n\n  return { messages, metadata };\n}\n"]}