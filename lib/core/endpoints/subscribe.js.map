{"version":3,"sources":["core/endpoints/subscribe.js"],"names":["getOperation","operationConstants","PNSubscribeOperation","validateParams","modules","config","subscribeKey","getURL","incomingParams","channels","stringifiedChannels","length","join","utils","encodeString","getRequestTimeout","getSubscribeTimeout","isAuthSupported","prepareParams","state","channelGroups","timetoken","filterExpression","region","params","heartbeat","getPresenceTimeout","Object","keys","JSON","stringify","tt","tr","handleResponse","serverResponse","messages","m","forEach","rawMessage","publishMetaData","publishTimetoken","p","t","r","parsedMessage","shard","parseInt","a","subscriptionMatch","b","channel","c","messageType","e","payload","d","flags","f","issuingClientId","i","k","originationTimetoken","o","userMetadata","u","push","metadata"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport {\n  SubscribeArguments,\n  PublishMetaData,\n  SubscribeMetadata,\n  SubscribeMessage,\n  SubscribeEnvelope,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNSubscribeOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: SubscribeArguments\n): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(\n    stringifiedChannels\n  )}/0`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getSubscribeTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(\n  { config }: ModulesInject,\n  incomingParams: SubscribeArguments\n): Object {\n  let {\n    state,\n    channelGroups = [],\n    timetoken,\n    filterExpression,\n    region,\n  } = incomingParams;\n  const params: Object = {\n    heartbeat: config.getPresenceTimeout(),\n  };\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  if (filterExpression && filterExpression.length > 0) {\n    params['filter-expr'] = filterExpression;\n  }\n\n  if (Object.keys(state).length) {\n    params.state = JSON.stringify(state);\n  }\n\n  if (timetoken) {\n    params.tt = timetoken;\n  }\n\n  if (region) {\n    params.tr = region;\n  }\n\n  return params;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: Object\n): SubscribeEnvelope {\n  const messages: Array<SubscribeMessage> = [];\n\n  serverResponse.m.forEach((rawMessage) => {\n    let publishMetaData: PublishMetaData = {\n      publishTimetoken: rawMessage.p.t,\n      region: rawMessage.p.r,\n    };\n    let parsedMessage: SubscribeMessage = {\n      shard: parseInt(rawMessage.a, 10),\n      subscriptionMatch: rawMessage.b,\n      channel: rawMessage.c,\n      messageType: rawMessage.e,\n      payload: rawMessage.d,\n      flags: rawMessage.f,\n      issuingClientId: rawMessage.i,\n      subscribeKey: rawMessage.k,\n      originationTimetoken: rawMessage.o,\n      userMetadata: rawMessage.u,\n      publishMetaData,\n    };\n    messages.push(parsedMessage);\n  });\n\n  const metadata: SubscribeMetadata = {\n    timetoken: serverResponse.t.t,\n    region: serverResponse.t.r,\n  };\n\n  return { messages, metadata };\n}\n"],"file":"subscribe.js"}