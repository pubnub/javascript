{"version":3,"sources":["core/endpoints/history/message_counts.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNMessageCounts","modules","incomingParams","channels","timetoken","channelTimetokens","config","length","subscribeKey","stringifiedChannels","join","utils","encodeString","getTransactionTimeout","outgoingParams","tt","channelsTimetoken","serverResponse"],"mappings":";;;;;;;;QAWgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAUAC,M,GAAAA,M;QASAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAgBAC,c,GAAAA,c;;AAxDhB;;;;AACA;;;;;;AAQO,SAASN,YAAT,GAAgC;AACrC,SAAOO,qBAAmBC,eAA1B;AACD;;AAEM,SAASP,cAAT,CAAwBQ,OAAxB,EAAgDC,cAAhD,EAAyF;AAAA,MACxFC,QADwF,GAC7CD,cAD6C,CACxFC,QADwF;AAAA,MAC9EC,SAD8E,GAC7CF,cAD6C,CAC9EE,SAD8E;AAAA,MACnEC,iBADmE,GAC7CH,cAD6C,CACnEG,iBADmE;AAAA,MAExFC,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;;;AAI9F,MAAI,CAACH,QAAL,EAAe,OAAO,iBAAP;AACf,MAAIC,aAAaC,iBAAjB,EAAoC,OAAO,2DAAP;AACpC,MAAKD,aAAaC,iBAAd,IAAqCA,kBAAkBE,MAAlB,GAA2B,CAAhE,IAAuEJ,SAASI,MAAT,KAAoBF,kBAAkBE,MAAjH,EAA0H,OAAO,uDAAP;AAC1H,MAAI,CAACD,OAAOE,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASd,MAAT,CAAgBO,OAAhB,EAAwCC,cAAxC,EAAyF;AAAA,MACxFC,QADwF,GAC3ED,cAD2E,CACxFC,QADwF;AAAA,MAExFG,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;;;AAI9F,MAAIG,sBAAsBN,SAASO,IAAT,CAAc,GAAd,CAA1B;;AAEA,kCAA8BJ,OAAOE,YAArC,wBAAoEG,gBAAMC,YAAN,CAAmBH,mBAAnB,CAApE;AACD;;AAEM,SAASd,iBAAT,OAA+D;AAAA,MAAlCW,MAAkC,QAAlCA,MAAkC;;AACpE,SAAOA,OAAOO,qBAAP,EAAP;AACD;;AAEM,SAASjB,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBI,OAAvB,EAA+CC,cAA/C,EAAgG;AAAA,MAC7FE,SAD6F,GAC5DF,cAD4D,CAC7FE,SAD6F;AAAA,MAClFC,iBADkF,GAC5DH,cAD4D,CAClFG,iBADkF;;AAErG,MAAIS,iBAAyB,EAA7B;;AAEA,MAAKT,iBAAD,IAAwBA,kBAAkBE,MAAlB,KAA6B,CAAzD,EAA6D;AAAA,4CAChDF,iBADgD;AAAA,QACtDU,EADsD;;AAE3DD,mBAAeV,SAAf,GAA2BW,EAA3B;AACD,GAHD,MAGO,IAAIV,iBAAJ,EAAuB;AAC5BS,mBAAeE,iBAAf,GAAmCX,kBAAkBK,IAAlB,CAAuB,GAAvB,CAAnC;AACD,GAFM,MAEA,IAAIN,SAAJ,EAAe;AACpBU,mBAAeV,SAAf,GAA2BA,SAA3B;AACD;;AAED,SAAOU,cAAP;AACD;;AAEM,SAAShB,cAAT,CAAwBG,OAAxB,EAAgDgB,cAAhD,EAAkH;AACvH,SAAO,EAAEd,UAAUc,eAAed,QAA3B,EAAP;AACD","file":"message_counts.js","sourcesContent":["/* @flow */\n\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\nimport type {\n  MessageCounterArguments,\n  MessageCountersResponse,\n  ModulesInject\n} from '../../flow_interfaces';\n\n\nexport function getOperation(): string {\n  return operationConstants.PNMessageCounts;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: MessageCounterArguments) {\n  let { channels, timetoken, channelTimetokens } = incomingParams;\n  let { config } = modules;\n\n  if (!channels) return 'Missing channel';\n  if (timetoken && channelTimetokens) return 'timetoken and channelTimetokens are incompatible together';\n  if ((timetoken && channelTimetokens) && (channelTimetokens.length > 1) && (channels.length !== channelTimetokens.length)) return 'Length of channelTimetokens and channels do not match';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: MessageCounterArguments): string {\n  let { channels } = incomingParams;\n  let { config } = modules;\n\n  let stringifiedChannels = channels.join(',');\n\n  return `/v3/history/sub-key/${config.subscribeKey}/message-counts/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: MessageCounterArguments): Object {\n  const { timetoken, channelTimetokens } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if ((channelTimetokens) && (channelTimetokens.length === 1)) {\n    let [tt] = channelTimetokens;\n    outgoingParams.timetoken = tt;\n  } else if (channelTimetokens) {\n    outgoingParams.channelsTimetoken = channelTimetokens.join(',');\n  } else if (timetoken) {\n    outgoingParams.timetoken = timetoken;\n  }\n\n  return outgoingParams;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: MessageCounterArguments): MessageCountersResponse {\n  return { channels: serverResponse.channels };\n}\n"]}