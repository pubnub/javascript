{"version":3,"sources":["core/endpoints/subscriptionUtils/handshake.js"],"names":["endpoint","getOperation","operationConstants","PNHandshakeOperation","validateParams","_","params","channels","channelGroups","getURL","config","channelsString","join","subscribeKey","utils","encodeString","getRequestTimeout","getSubscribeTimeout","isAuthSupported","prepareParams","outParams","tt","handleResponse","response","region","t","r","timetoken"],"mappings":";;;;;;;;;AAGA;;AAEA;;AAEA,IAAMA,QAA0D,GAAG;AACjEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,oBAAzB;AAAA,GADmD;AAGjEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEC,QAAT,KAAqB,EAACD,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEE,aAAT,CAAzB,EAAiD;AAC/C,aAAO,qDAAP;AACD;AACF,GAPgE;AASjEC,EAAAA,MAAM,EAAE,sBAAaH,MAAb,EAAwB;AAAA,QAArBI,MAAqB,QAArBA,MAAqB;AAC9B,QAAIC,cAAc,GAAGL,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACC,QAAP,CAAgBK,IAAhB,CAAqB,GAArB,CAAlB,GAA8C,GAAnE;AACA,mCAAwBF,MAAM,CAACG,YAA/B,cAA+CC,kBAAMC,YAAN,CAAmBJ,cAAnB,CAA/C;AACD,GAZgE;AAcjEK,EAAAA,iBAAiB,EAAE;AAAA,QAAGN,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACO,mBAAP,EAAhB;AAAA,GAd8C;AAgBjEC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAhBgD;AAkBjEC,EAAAA,aAAa,EAAE,uBAACd,CAAD,EAAIC,MAAJ,EAAe;AAC5B,QAAMc,SAAS,GAAG,EAAlB;;AACA,QAAId,MAAM,CAACE,aAAX,EAA0B;AACxBY,MAAAA,SAAS,CAAC,eAAD,CAAT,GAA6Bd,MAAM,CAACE,aAAP,CAAqBI,IAArB,CAA0B,GAA1B,CAA7B;AACD;;AACDQ,IAAAA,SAAS,CAACC,EAAV,GAAe,CAAf;AACA,WAAOD,SAAP;AACD,GAzBgE;AA2BjEE,EAAAA,cAAc,EAAE,wBAACjB,CAAD,EAAIkB,QAAJ;AAAA,WAAmC;AACjDC,MAAAA,MAAM,EAAED,QAAQ,CAACE,CAAT,CAAWC,CAD8B;AAEjDC,MAAAA,SAAS,EAAEJ,QAAQ,CAACE,CAAT,CAAWA;AAF2B,KAAnC;AAAA;AA3BiD,CAAnE;eAiCezB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { HandshakeParams, HandshakeResult } from './types';\nimport utils from '../../utils';\n\nconst endpoint: EndpointConfig<HandshakeParams, HandshakeResult> = {\n  getOperation: () => operationConstants.PNHandshakeOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channels && !params?.channelGroups) {\n      return 'channels and channleGroups both should not be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => {\n    let channelsString = params.channels ? params.channels.join(',') : ',';\n    return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(channelsString)}/0`;\n  },\n\n  getRequestTimeout: ({ config }) => config.getSubscribeTimeout(),\n\n  isAuthSupported: () => true,\n\n  prepareParams: (_, params) => {\n    const outParams = {};\n    if (params.channelGroups) {\n      outParams['channel-group'] = params.channelGroups.join(',');\n    }\n    outParams.tt = 0;\n    return outParams;\n  },\n\n  handleResponse: (_, response): HandshakeResult => ({\n    region: response.t.r,\n    timetoken: response.t.t\n  })\n};\n\nexport default endpoint;\n"],"file":"handshake.js"}