{"version":3,"sources":["core/endpoints/subscriptionUtils/receiveMessages.js"],"names":["endpoint","getOperation","operationConstants","PNReceiveMessagesOperation","validateParams","_","params","channels","channelGroups","timetoken","region","getURL","config","channelsString","join","subscribeKey","utils","encodeString","getRequestTimeout","getSubscribeTimeout","isAuthSupported","prepareParams","outParams","tt","tr","handleResponse","response","parsedMessages","m","forEach","message","envelope","shard","parseInt","a","subscriptionMatch","b","channel","c","messageType","e","payload","d","flags","f","issuingClientId","i","k","originationTimetoken","o","userMetadata","u","publishMetaData","p","t","r","push","messages","metadata"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { ReceiveMessagesParams, ReceiveMessagesResult } from './types';\nimport utils from '../../utils';\n\nconst endpoint : EndpointConfig<ReceiveMessagesParams, ReceiveMessagesResult> = {\n  getOperation: () => operationConstants.PNReceiveMessagesOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channels && !params?.channelGroups) {\n      return 'channels and channleGroups both should not be empty';\n    }\n    if (!params?.timetoken) {\n      return 'timetoken can not be empty';\n    }\n    if (!params?.region) {\n      return 'region can not be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => {\n    let channelsString = params.channels ? params.channels.join(',') : ',';\n    return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(channelsString)}/0`;\n  },\n\n  getRequestTimeout: ({ config }) => config.getSubscribeTimeout(),\n\n  isAuthSupported: () => true,\n\n  prepareParams: (_, params) => {\n    const outParams = {};\n    if (params.channelGroups) {\n      outParams['channel-group'] = params.channelGroups.join(',');\n    }\n    outParams.tt = params.timetoken;\n    outParams.tr = params.region;\n    return outParams;\n  },\n\n  handleResponse: async (_, response): ReceiveMessagesResult => {\n    const parsedMessages = [];\n\n    response.m.forEach((message) => {\n      let envelope = {\n        shard: parseInt(message.a, 10),\n        subscriptionMatch: message.b,\n        channel: message.c,\n        messageType: message.e,\n        payload: message.d,\n        flags: message.f,\n        issuingClientId: message.i,\n        subscribeKey: message.k,\n        originationTimetoken: message.o,\n        userMetadata: message.u,\n        publishMetaData: {\n          timetoken: message.p.t,\n          region: message.p.r\n        },\n      };\n      parsedMessages.push(envelope);\n    });\n    return {\n      messages: parsedMessages,\n      metadata: {\n        region: response.t.r,\n        timetoken: response.t.t\n      }\n    };\n  }\n};\n\nexport default endpoint;\n"],"file":"receiveMessages.js"}