{"version":3,"sources":["core/endpoints/subscriptionUtils/receiveMessages.js"],"names":["endpoint","getOperation","operationConstants","PNReceiveMessagesOperation","validateParams","_","params","channels","channelGroups","timetoken","region","getURL","config","channelsString","join","subscribeKey","utils","encodeString","getRequestTimeout","getSubscribeTimeout","isAuthSupported","getAbortSignal","abortSignal","prepareParams","outParams","tt","tr","handleResponse","response","parsedMessages","m","forEach","envelope","parsedMessage","shard","parseInt","a","subscriptionMatch","b","channel","c","messageType","e","payload","d","flags","f","issuingClientId","i","k","originationTimetoken","o","publishMetaData","p","t","r","push","messages","metadata"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { ReceiveMessagesParams, ReceiveMessagesResult, Message } from './types';\nimport utils from '../../utils';\n\nconst endpoint : EndpointConfig<ReceiveMessagesParams, ReceiveMessagesResult> = {\n  getOperation: () => operationConstants.PNReceiveMessagesOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channels && !params?.channelGroups) {\n      return 'channels and channleGroups both should not be empty';\n    }\n    if (!params?.timetoken) {\n      return 'timetoken can not be empty';\n    }\n    if (!params?.region) {\n      return 'region can not be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => {\n    let channelsString = params.channels ? params.channels.join(',') : ',';\n    return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(channelsString)}/0`;\n  },\n\n  getRequestTimeout: ({ config }) => config.getSubscribeTimeout(),\n\n  isAuthSupported: () => true,\n\n  getAbortSignal: (_, params) => params.abortSignal,\n\n  prepareParams: (_, params) => {\n    const outParams = {};\n    if (params.channelGroups) {\n      outParams['channel-group'] = params.channelGroups.join(',');\n    }\n    outParams.tt = params.timetoken;\n    outParams.tr = params.region;\n    return outParams;\n  },\n\n  handleResponse: (_, response): ReceiveMessagesResult => {\n    const parsedMessages = [];\n\n    response.m.forEach((envelope) => {\n      let parsedMessage: Message = {\n        shard: parseInt(envelope.a, 10),\n        subscriptionMatch: envelope.b,\n        channel: envelope.c,\n        messageType: envelope.e,\n        payload: envelope.d,\n        flags: envelope.f,\n        issuingClientId: envelope.i,\n        subscribeKey: envelope.k,\n        originationTimetoken: envelope.o,\n        publishMetaData: {\n          timetoken: envelope.p.t,\n          region: envelope.p.r,\n        },\n      };\n      parsedMessages.push(parsedMessage);\n    });\n    return { messages: parsedMessages,\n      metadata: {\n        region: response.t.r,\n        timetoken: response.t.t\n      }\n    };\n  }\n};\n\nexport default endpoint;\n"],"file":"receiveMessages.js"}