{"version":3,"sources":["crypto/modules/web.js"],"names":["concatArrayBuffer","ab1","ab2","tmp","Uint8Array","byteLength","set","buffer","WebCryptography","key","input","getKey","cKey","ArrayBuffer","encryptArrayBuffer","encryptString","Error","decryptArrayBuffer","decryptString","file","File","bKey","toArrayBuffer","abPlaindata","abCipherdata","create","name","mimeType","data","Buffer","from","crypto","subtle","digest","abHash","abKey","toString","slice","importKey","plaintext","abIv","getRandomValues","encrypt","iv","ciphertext","decrypt","abPlaintext","abPayload","abCiphertext"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport crypto, { type $CryptoKey } from 'isomorphic-webcrypto';\n\nimport type { ICryptography } from '../';\nimport type { IFile, FileClass } from '../../file';\n\nfunction concatArrayBuffer(ab1: ArrayBuffer, ab2: ArrayBuffer): ArrayBuffer {\n  const tmp = new Uint8Array(ab1.byteLength + ab2.byteLength);\n\n  tmp.set(new Uint8Array(ab1), 0);\n  tmp.set(new Uint8Array(ab2), ab1.byteLength);\n\n  return tmp.buffer;\n}\n\nexport default class WebCryptography implements ICryptography<ArrayBuffer | string> {\n  static IV_LENGTH = 16;\n\n  get algo() {\n    return 'aes-256-cbc';\n  }\n\n  async encrypt(key: string, input: ArrayBuffer | string): Promise<ArrayBuffer | string> {\n    const cKey = await this.getKey(key);\n\n    if (input instanceof ArrayBuffer) {\n      return this.encryptArrayBuffer(cKey, input);\n    } else if (typeof input === 'string') {\n      return this.encryptString(cKey, input);\n    } else {\n      throw new Error('Cannot encrypt this file. In browsers file encryption supports only string or ArrayBuffer');\n    }\n  }\n\n  async decrypt(key: string, input: ArrayBuffer | string): Promise<ArrayBuffer | string> {\n    const cKey = await this.getKey(key);\n\n    if (input instanceof ArrayBuffer) {\n      return this.decryptArrayBuffer(cKey, input);\n    } else if (typeof input === 'string') {\n      return this.decryptString(cKey, input);\n    } else {\n      throw new Error('Cannot decrypt this file. In browsers file decryption supports only string or ArrayBuffer');\n    }\n  }\n\n  async encryptFile(key: string, file: IFile, File: FileClass): Promise<IFile> {\n    const bKey = await this.getKey(key);\n\n    const abPlaindata = await file.toArrayBuffer();\n\n    const abCipherdata = await this.encryptArrayBuffer(bKey, abPlaindata);\n\n    return File.create({\n      name: file.name,\n      mimeType: 'application/octet-stream',\n      data: abCipherdata,\n    });\n  }\n\n  async decryptFile(key: string, file: IFile, File: FileClass): Promise<IFile> {\n    const bKey = await this.getKey(key);\n\n    const abCipherdata = await file.toArrayBuffer();\n\n    const abPlaindata = await this.decryptArrayBuffer(bKey, abCipherdata);\n\n    return File.create({\n      name: file.name,\n      data: abPlaindata,\n    });\n  }\n\n  async getKey(key: string): Promise<$CryptoKey> {\n    const bKey = Buffer.from(key);\n    const abHash = await crypto.subtle.digest('SHA-256', bKey.buffer);\n\n    const abKey = Buffer.from(Buffer.from(abHash).toString('hex').slice(0, 32), 'utf8').buffer;\n\n    return crypto.subtle.importKey('raw', abKey, 'AES-CBC', true, ['encrypt', 'decrypt']);\n  }\n\n  async encryptArrayBuffer(key: $CryptoKey, plaintext: ArrayBuffer) {\n    const abIv = crypto.getRandomValues(new Uint8Array(16));\n\n    return concatArrayBuffer(abIv.buffer, await crypto.subtle.encrypt({ name: 'AES-CBC', iv: abIv }, key, plaintext));\n  }\n\n  async decryptArrayBuffer(key: $CryptoKey, ciphertext: ArrayBuffer) {\n    const abIv = ciphertext.slice(0, 16);\n\n    return crypto.subtle.decrypt({ name: 'AES-CBC', iv: abIv }, key, ciphertext.slice(16));\n  }\n\n  async encryptString(key: $CryptoKey, plaintext: string) {\n    const abIv = crypto.getRandomValues(new Uint8Array(16));\n\n    const abPlaintext = Buffer.from(plaintext).buffer;\n    const abPayload = await crypto.subtle.encrypt({ name: 'AES-CBC', iv: abIv }, key, abPlaintext);\n\n    const ciphertext = concatArrayBuffer(abIv.buffer, abPayload);\n\n    return Buffer.from(ciphertext).toString('utf8');\n  }\n\n  async decryptString(key: $CryptoKey, ciphertext: string) {\n    const abCiphertext = Buffer.from(ciphertext);\n    const abIv = abCiphertext.slice(0, 16);\n    const abPayload = abCiphertext.slice(16);\n\n    const abPlaintext = await crypto.subtle.decrypt({ name: 'AES-CBC', iv: abIv }, key, abPayload);\n\n    return Buffer.from(abPlaintext).toString('utf8');\n  }\n}\n"],"file":"web.js"}