import { Listener } from './components/listener_manager';
import NotificationsPayload from './components/push_payload';
import { TokenManager } from './components/token_manager';
import Crypto from './components/cryptography/index';
import { Payload, ResultCallback } from './types/api';
import { ClientConfiguration, PrivateClientConfiguration } from './interfaces/configuration';
import { Cryptography } from './interfaces/cryptography';
import { Transport } from './interfaces/transport';
import RequestOperation from './constants/operations';
import StatusCategory from './constants/categories';
import { RetryPolicy } from '../event-engine/core/retryPolicy';
import * as Publish from './endpoints/publish';
import * as Signal from './endpoints/signal';
import * as Subscription from './types/api/subscription';
import * as Presence from './types/api/presence';
import * as History from './types/api/history';
import * as MessageAction from './types/api/message-action';
import * as FileSharing from './types/api/file-sharing';
import { PubNubFileInterface } from './types/file';
import * as PAM from './types/api/access-panager';
import { SubscriptionOptions } from '../entities/commonTypes';
import { ChannelMetadata } from '../entities/ChannelMetadata';
import { SubscriptionSet } from '../entities/SubscriptionSet';
import { ChannelGroup } from '../entities/ChannelGroup';
import { UserMetadata } from '../entities/UserMetadata';
import { Channel } from '../entities/Channel';
import PubNubChannelGroups from './pubnub-channel-groups';
import PubNubPushNotifications from './pubnub-push';
import * as AppContext from './types/api/app-context';
import PubNubObjects from './pubnub-objects';
import * as Time from './endpoints/time';
type ClientInstanceConfiguration<CryptographyTypes> = {
    configuration: PrivateClientConfiguration;
    transport: Transport;
    tokenManager: TokenManager;
    cryptography?: Cryptography<CryptographyTypes>;
    crypto?: Crypto;
};
export declare class PubNubCore<CryptographyTypes, FileConstructorParameters, PlatformFile extends Partial<PubNubFileInterface> = Record<string, unknown>> {
    static OPERATIONS: typeof RequestOperation;
    static CATEGORIES: typeof StatusCategory;
    static ExponentialRetryPolicy: typeof RetryPolicy.ExponentialRetryPolicy;
    static LinearRetryPolicy: typeof RetryPolicy.LinearRetryPolicy;
    static notificationPayload(title: string, body: string): NotificationsPayload;
    static generateUUID(): any;
    constructor(configuration: ClientInstanceConfiguration<CryptographyTypes>);
    get configuration(): ClientConfiguration;
    get _config(): ClientConfiguration;
    get authKey(): string | undefined;
    getAuthKey(): string | undefined;
    setAuthKey(authKey: string): void;
    get userId(): string;
    set userId(value: string);
    getUserId(): string;
    setUserId(value: string): void;
    get filterExpression(): string | undefined;
    getFilterExpression(): string | undefined;
    set filterExpression(expression: string | null | undefined);
    setFilterExpression(expression: string | null): void;
    get cipherKey(): string | undefined;
    set cipherKey(key: string | undefined);
    setCipherKey(key: string): void;
    set heartbeatInterval(interval: number);
    setHeartbeatInterval(interval: number): void;
    getVersion(): string;
    _addPnsdkSuffix(name: string, suffix: string | number): void;
    getUUID(): string;
    setUUID(value: string): void;
    get customEncrypt(): ((data: string) => string) | undefined;
    get customDecrypt(): ((data: string) => string) | undefined;
    channel(name: string): Channel;
    channelGroup(name: string): ChannelGroup;
    channelMetadata(id: string): ChannelMetadata;
    userMetadata(id: string): UserMetadata;
    subscriptionSet(parameters: {
        channels?: string[];
        channelGroups?: string[];
        subscriptionOptions?: SubscriptionOptions;
    }): SubscriptionSet;
    private sendRequest;
    destroy(isOffline?: boolean): void;
    stop(): void;
    addListener(listener: Listener): void;
    removeListener(listener: Listener): void;
    removeAllListeners(): void;
    publish(parameters: Publish.PublishParameters, callback: ResultCallback<Publish.PublishResponse>): void;
    publish(parameters: Publish.PublishParameters): Promise<Publish.PublishResponse>;
    signal(parameters: Signal.SignalParameters, callback: ResultCallback<Signal.SignalResponse>): void;
    signal(parameters: Signal.SignalParameters): Promise<Signal.SignalResponse>;
    fire(parameters: Publish.PublishParameters, callback: ResultCallback<Publish.PublishResponse>): void;
    fire(parameters: Publish.PublishParameters): Promise<Publish.PublishResponse>;
    getSubscribedChannels(): string[];
    getSubscribedChannelGroups(): string[];
    subscribe(parameters: Subscription.SubscribeParameters): void;
    private makeSubscribe;
    unsubscribe(parameters: Presence.PresenceLeaveParameters): void;
    private makeUnsubscribe;
    unsubscribeAll(): void;
    disconnect(): void;
    reconnect(parameters?: {
        timetoken?: string;
        region?: number;
    }): void;
    private subscribeHandshake;
    private subscribeReceiveMessages;
    getMessageActions(parameters: MessageAction.GetMessageActionsParameters, callback: ResultCallback<MessageAction.GetMessageActionsResponse>): void;
    getMessageActions(parameters: MessageAction.GetMessageActionsParameters): Promise<MessageAction.GetMessageActionsResponse>;
    addMessageAction(parameters: MessageAction.AddMessageActionParameters, callback: ResultCallback<MessageAction.AddMessageActionResponse>): void;
    addMessageAction(parameters: MessageAction.AddMessageActionParameters): Promise<MessageAction.AddMessageActionResponse>;
    removeMessageAction(parameters: MessageAction.RemoveMessageActionParameters, callback: ResultCallback<MessageAction.RemoveMessageActionResponse>): void;
    removeMessageAction(parameters: MessageAction.RemoveMessageActionParameters): Promise<MessageAction.RemoveMessageActionResponse>;
    fetchMessages(parameters: History.FetchMessagesParameters, callback: ResultCallback<History.FetchMessagesResponse>): void;
    fetchMessages(parameters: History.FetchMessagesParameters): Promise<History.FetchMessagesResponse>;
    deleteMessages(parameters: History.DeleteMessagesParameters, callback: ResultCallback<History.DeleteMessagesResponse>): void;
    deleteMessages(parameters: History.DeleteMessagesParameters): Promise<History.DeleteMessagesResponse>;
    messageCounts(parameters: History.MessageCountParameters, callback: ResultCallback<History.MessageCountResponse>): void;
    messageCounts(parameters: History.MessageCountParameters): Promise<History.MessageCountResponse>;
    history(parameters: History.GetHistoryParameters, callback: ResultCallback<History.GetHistoryResponse>): void;
    history(parameters: History.GetHistoryParameters): Promise<History.GetHistoryResponse>;
    hereNow(parameters: Presence.HereNowParameters, callback: ResultCallback<Presence.HereNowResponse>): void;
    hereNow(parameters: Presence.HereNowParameters): Promise<Presence.HereNowResponse>;
    whereNow(parameters: Presence.WhereNowParameters, callback: ResultCallback<Presence.WhereNowResponse>): void;
    whereNow(parameters: Presence.WhereNowParameters): Promise<Presence.WhereNowResponse>;
    getState(parameters: Presence.GetPresenceStateParameters, callback: ResultCallback<Presence.GetPresenceStateResponse>): void;
    getState(parameters: Presence.GetPresenceStateParameters): Promise<Presence.GetPresenceStateResponse>;
    setState(parameters: Presence.SetPresenceStateParameters | Presence.SetPresenceStateWithHeartbeatParameters, callback: ResultCallback<Presence.SetPresenceStateResponse | Presence.PresenceHeartbeatResponse>): void;
    setState(parameters: Presence.SetPresenceStateParameters | Presence.SetPresenceStateWithHeartbeatParameters): Promise<Presence.SetPresenceStateResponse | Presence.PresenceHeartbeatResponse>;
    presence(parameters: {
        connected: boolean;
        channels?: string[];
        channelGroups?: string[];
    }): void;
    private heartbeat;
    private join;
    private leave;
    private leaveAll;
    grantToken(parameters: PAM.GrantTokenParameters, callback: ResultCallback<PAM.GrantTokenResponse>): void;
    grantToken(parameters: PAM.GrantTokenParameters): Promise<PAM.GrantTokenResponse>;
    revokeToken(parameters: PAM.RevokeParameters, callback: ResultCallback<PAM.RevokeTokenResponse>): void;
    revokeToken(parameters: PAM.RevokeParameters): Promise<PAM.RevokeTokenResponse>;
    get token(): string | undefined;
    getToken(): string | undefined;
    set token(token: string | undefined);
    setToken(token: string | undefined): void;
    parseToken(token: string): {
        version: number;
        timestamp: number;
        ttl: number;
        resources?: Partial<Record<"groups" | "channels" | "uuids", Record<string, {
            read: boolean;
            write: boolean;
            manage: boolean;
            delete: boolean;
            get: boolean;
            update: boolean;
            join: boolean;
        } | undefined>>> | undefined;
        patterns?: Partial<Record<"groups" | "channels" | "uuids", Record<string, {
            read: boolean;
            write: boolean;
            manage: boolean;
            delete: boolean;
            get: boolean;
            update: boolean;
            join: boolean;
        } | undefined>>> | undefined;
        authorized_uuid?: string | undefined;
        signature: ArrayBuffer;
        meta?: Payload | undefined;
    } | undefined;
    grant(parameters: PAM.GrantParameters, callback: ResultCallback<PAM.PermissionsResponse>): void;
    grant(parameters: PAM.GrantParameters): Promise<PAM.PermissionsResponse>;
    audit(parameters: PAM.AuditParameters, callback: ResultCallback<PAM.PermissionsResponse>): void;
    audit(parameters: PAM.AuditParameters): Promise<PAM.PermissionsResponse>;
    get objects(): PubNubObjects;
    fetchUsers<Custom extends AppContext.CustomData = AppContext.CustomData>(callback: ResultCallback<AppContext.GetAllUUIDMetadataResponse<Custom>>): void;
    fetchUsers<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetAllMetadataParameters<AppContext.UUIDMetadataObject<Custom>>, callback: ResultCallback<AppContext.GetAllUUIDMetadataResponse<Custom>>): void;
    fetchUsers<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters?: AppContext.GetAllMetadataParameters<AppContext.UUIDMetadataObject<Custom>>): Promise<AppContext.GetAllUUIDMetadataResponse<Custom>>;
    fetchUser<Custom extends AppContext.CustomData = AppContext.CustomData>(callback: ResultCallback<AppContext.GetUUIDMetadataResponse<Custom>>): void;
    fetchUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetUUIDMetadataParameters, callback: ResultCallback<AppContext.GetUUIDMetadataResponse<Custom>>): void;
    fetchUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters?: AppContext.GetUUIDMetadataParameters): Promise<AppContext.GetUUIDMetadataResponse<Custom>>;
    createUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetUUIDMetadataParameters<Custom>, callback: ResultCallback<AppContext.SetUUIDMetadataResponse<Custom>>): void;
    createUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetUUIDMetadataParameters<Custom>): Promise<AppContext.SetUUIDMetadataResponse<Custom>>;
    updateUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetUUIDMetadataParameters<Custom>, callback: ResultCallback<AppContext.SetUUIDMetadataResponse<Custom>>): void;
    updateUser<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetUUIDMetadataParameters<Custom>): Promise<AppContext.SetUUIDMetadataResponse<Custom>>;
    removeUser(callback: ResultCallback<AppContext.RemoveUUIDMetadataResponse>): void;
    removeUser(parameters: AppContext.RemoveUUIDMetadataParameters, callback: ResultCallback<AppContext.RemoveUUIDMetadataResponse>): void;
    removeUser(parameters?: AppContext.RemoveUUIDMetadataParameters): Promise<AppContext.RemoveUUIDMetadataResponse>;
    fetchSpaces<Custom extends AppContext.CustomData = AppContext.CustomData>(callback: ResultCallback<AppContext.GetAllChannelMetadataResponse<Custom>>): void;
    fetchSpaces<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetAllMetadataParameters<AppContext.ChannelMetadataObject<Custom>>, callback: ResultCallback<AppContext.GetAllChannelMetadataResponse<Custom>>): void;
    fetchSpaces<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters?: AppContext.GetAllMetadataParameters<AppContext.ChannelMetadataObject<Custom>>): Promise<AppContext.GetAllChannelMetadataResponse<Custom>>;
    fetchSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetChannelMetadataParameters, callback: ResultCallback<AppContext.GetChannelMetadataResponse<Custom>>): void;
    fetchSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetChannelMetadataParameters): Promise<AppContext.GetChannelMetadataResponse<Custom>>;
    createSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetChannelMetadataParameters<Custom>, callback: ResultCallback<AppContext.SetChannelMetadataResponse<Custom>>): void;
    createSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetChannelMetadataParameters<Custom>): Promise<AppContext.SetChannelMetadataResponse<Custom>>;
    updateSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetChannelMetadataParameters<Custom>, callback: ResultCallback<AppContext.SetChannelMetadataResponse<Custom>>): void;
    updateSpace<Custom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetChannelMetadataParameters<Custom>): Promise<AppContext.SetChannelMetadataResponse<Custom>>;
    removeSpace(parameters: AppContext.RemoveChannelMetadataParameters, callback: ResultCallback<AppContext.RemoveChannelMetadataResponse>): void;
    removeSpace(parameters: AppContext.RemoveChannelMetadataParameters): Promise<AppContext.RemoveChannelMetadataResponse>;
    fetchMemberships<RelationCustom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetMembershipsParameters | AppContext.GetMembersParameters, callback: ResultCallback<AppContext.SpaceMembershipsResponse<RelationCustom, MetadataCustom> | AppContext.UserMembersResponse<RelationCustom, MetadataCustom>>): void;
    fetchMemberships<RelationCustom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.GetMembershipsParameters | AppContext.GetMembersParameters): Promise<AppContext.SpaceMembershipsResponse<RelationCustom, MetadataCustom> | AppContext.UserMembersResponse<RelationCustom, MetadataCustom>>;
    addMemberships<Custom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetMembershipsParameters<Custom> | AppContext.SetChannelMembersParameters<Custom>, callback: ResultCallback<AppContext.SetMembershipsResponse<Custom, MetadataCustom> | AppContext.SetMembersResponse<Custom, MetadataCustom>>): void;
    addMemberships<Custom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetMembershipsParameters<Custom> | AppContext.SetChannelMembersParameters<Custom>): Promise<AppContext.SetMembershipsResponse<Custom, MetadataCustom> | AppContext.SetMembersResponse<Custom, MetadataCustom>>;
    updateMemberships<Custom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetMembershipsParameters<Custom> | AppContext.SetChannelMembersParameters<Custom>, callback: ResultCallback<AppContext.SetMembershipsResponse<Custom, MetadataCustom> | AppContext.SetMembersResponse<Custom, MetadataCustom>>): void;
    updateMemberships<Custom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.SetMembershipsParameters<Custom> | AppContext.SetChannelMembersParameters<Custom>): Promise<AppContext.SetMembershipsResponse<Custom, MetadataCustom> | AppContext.SetMembersResponse<Custom, MetadataCustom>>;
    removeMemberships<RelationCustom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.RemoveMembersParameters | AppContext.RemoveMembershipsParameters, callback: ResultCallback<AppContext.RemoveMembersResponse<RelationCustom, MetadataCustom> | AppContext.RemoveMembershipsResponse<RelationCustom, MetadataCustom>>): void;
    removeMemberships<RelationCustom extends AppContext.CustomData = AppContext.CustomData, MetadataCustom extends AppContext.CustomData = AppContext.CustomData>(parameters: AppContext.RemoveMembersParameters | AppContext.RemoveMembershipsParameters): Promise<AppContext.RemoveMembersResponse<RelationCustom, MetadataCustom>>;
    get channelGroups(): PubNubChannelGroups;
    get push(): PubNubPushNotifications;
    sendFile(parameters: FileSharing.SendFileParameters<FileConstructorParameters>, callback: ResultCallback<FileSharing.SendFileResponse>): void;
    sendFile(parameters: FileSharing.SendFileParameters<FileConstructorParameters>): Promise<FileSharing.SendFileResponse>;
    publishFile(parameters: FileSharing.PublishFileMessageParameters, callback: ResultCallback<FileSharing.PublishFileMessageResponse>): void;
    publishFile(parameters: FileSharing.PublishFileMessageParameters): Promise<FileSharing.PublishFileMessageResponse>;
    listFiles(parameters: FileSharing.ListFilesParameters, callback: ResultCallback<FileSharing.ListFilesResponse>): void;
    listFiles(parameters: FileSharing.ListFilesParameters): Promise<FileSharing.ListFilesResponse>;
    getFileUrl(parameters: FileSharing.FileUrlParameters): FileSharing.FileUrlResponse;
    downloadFile(parameters: FileSharing.DownloadFileParameters, callback: ResultCallback<PlatformFile>): void;
    downloadFile(parameters: FileSharing.DownloadFileParameters): Promise<PlatformFile>;
    deleteFile(parameters: FileSharing.DeleteFileParameters, callback: ResultCallback<FileSharing.DeleteFileResponse>): void;
    deleteFile(parameters: FileSharing.DeleteFileParameters): Promise<FileSharing.DeleteFileResponse>;
    time(callback: ResultCallback<Time.TimeResponse>): void;
    time(): Promise<Time.TimeResponse>;
    encrypt(data: string | Payload, customCipherKey?: string): string;
    decrypt(data: string, customCipherKey?: string): Payload | null;
    encryptFile(file: PubNubFileInterface): Promise<PubNubFileInterface>;
    encryptFile(key: string, file: PubNubFileInterface): Promise<PubNubFileInterface>;
    decryptFile(file: PubNubFileInterface): Promise<PubNubFileInterface>;
    decryptFile(key: string | PubNubFileInterface, file?: PubNubFileInterface): Promise<PubNubFileInterface>;
}
export {};
